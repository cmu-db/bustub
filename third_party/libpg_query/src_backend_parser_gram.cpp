/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.5.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENT = 258,
    FCONST = 259,
    SCONST = 260,
    BCONST = 261,
    XCONST = 262,
    Op = 263,
    ICONST = 264,
    PARAM = 265,
    TYPECAST = 266,
    DOT_DOT = 267,
    COLON_EQUALS = 268,
    EQUALS_GREATER = 269,
    POWER_OF = 270,
    LAMBDA_ARROW = 271,
    DOUBLE_ARROW = 272,
    LESS_EQUALS = 273,
    GREATER_EQUALS = 274,
    NOT_EQUALS = 275,
    ABORT_P = 276,
    ABSOLUTE_P = 277,
    ACCESS = 278,
    ACTION = 279,
    ADD_P = 280,
    ADMIN = 281,
    AFTER = 282,
    AGGREGATE = 283,
    ALL = 284,
    ALSO = 285,
    ALTER = 286,
    ALWAYS = 287,
    ANALYSE = 288,
    ANALYZE = 289,
    AND = 290,
    ANY = 291,
    ARRAY = 292,
    AS = 293,
    ASC_P = 294,
    ASSERTION = 295,
    ASSIGNMENT = 296,
    ASYMMETRIC = 297,
    AT = 298,
    ATTACH = 299,
    ATTRIBUTE = 300,
    AUTHORIZATION = 301,
    BACKWARD = 302,
    BEFORE = 303,
    BEGIN_P = 304,
    BETWEEN = 305,
    BIGINT = 306,
    BINARY = 307,
    BIT = 308,
    BOOLEAN_P = 309,
    BOTH = 310,
    BY = 311,
    CACHE = 312,
    CALL_P = 313,
    CALLED = 314,
    CASCADE = 315,
    CASCADED = 316,
    CASE = 317,
    CAST = 318,
    CATALOG_P = 319,
    CHAIN = 320,
    CHAR_P = 321,
    CHARACTER = 322,
    CHARACTERISTICS = 323,
    CHECK_P = 324,
    CHECKPOINT = 325,
    CLASS = 326,
    CLOSE = 327,
    CLUSTER = 328,
    COALESCE = 329,
    COLLATE = 330,
    COLLATION = 331,
    COLUMN = 332,
    COLUMNS = 333,
    COMMENT = 334,
    COMMENTS = 335,
    COMMIT = 336,
    COMMITTED = 337,
    COMPRESSION = 338,
    CONCURRENTLY = 339,
    CONFIGURATION = 340,
    CONFLICT = 341,
    CONNECTION = 342,
    CONSTRAINT = 343,
    CONSTRAINTS = 344,
    CONTENT_P = 345,
    CONTINUE_P = 346,
    CONVERSION_P = 347,
    COPY = 348,
    COST = 349,
    CREATE_P = 350,
    CROSS = 351,
    CSV = 352,
    CUBE = 353,
    CURRENT_P = 354,
    CURRENT_CATALOG = 355,
    CURRENT_DATE = 356,
    CURRENT_ROLE = 357,
    CURRENT_SCHEMA = 358,
    CURRENT_TIME = 359,
    CURRENT_TIMESTAMP = 360,
    CURRENT_USER = 361,
    CURSOR = 362,
    CYCLE = 363,
    DATA_P = 364,
    DATABASE = 365,
    DAY_P = 366,
    DAYS_P = 367,
    DEALLOCATE = 368,
    DEC = 369,
    DECIMAL_P = 370,
    DECLARE = 371,
    DEFAULT = 372,
    DEFAULTS = 373,
    DEFERRABLE = 374,
    DEFERRED = 375,
    DEFINER = 376,
    DELETE_P = 377,
    DELIMITER = 378,
    DELIMITERS = 379,
    DEPENDS = 380,
    DESC_P = 381,
    DESCRIBE = 382,
    DETACH = 383,
    DICTIONARY = 384,
    DISABLE_P = 385,
    DISCARD = 386,
    DISTINCT = 387,
    DO = 388,
    DOCUMENT_P = 389,
    DOMAIN_P = 390,
    DOUBLE_P = 391,
    DROP = 392,
    EACH = 393,
    ELSE = 394,
    ENABLE_P = 395,
    ENCODING = 396,
    ENCRYPTED = 397,
    END_P = 398,
    ENUM_P = 399,
    ESCAPE = 400,
    EVENT = 401,
    EXCEPT = 402,
    EXCLUDE = 403,
    EXCLUDING = 404,
    EXCLUSIVE = 405,
    EXECUTE = 406,
    EXISTS = 407,
    EXPLAIN = 408,
    EXPORT_P = 409,
    EXPORT_STATE = 410,
    EXTENSION = 411,
    EXTERNAL = 412,
    EXTRACT = 413,
    FALSE_P = 414,
    FAMILY = 415,
    FETCH = 416,
    FILTER = 417,
    FIRST_P = 418,
    FLOAT_P = 419,
    FOLLOWING = 420,
    FOR = 421,
    FORCE = 422,
    FOREIGN = 423,
    FORWARD = 424,
    FREEZE = 425,
    FROM = 426,
    FULL = 427,
    FUNCTION = 428,
    FUNCTIONS = 429,
    GENERATED = 430,
    GLOB = 431,
    GLOBAL = 432,
    GRANT = 433,
    GRANTED = 434,
    GROUP_P = 435,
    GROUPING = 436,
    GROUPING_ID = 437,
    HANDLER = 438,
    HAVING = 439,
    HEADER_P = 440,
    HOLD = 441,
    HOUR_P = 442,
    HOURS_P = 443,
    IDENTITY_P = 444,
    IF_P = 445,
    IGNORE_P = 446,
    ILIKE = 447,
    IMMEDIATE = 448,
    IMMUTABLE = 449,
    IMPLICIT_P = 450,
    IMPORT_P = 451,
    IN_P = 452,
    INCLUDING = 453,
    INCREMENT = 454,
    INDEX = 455,
    INDEXES = 456,
    INHERIT = 457,
    INHERITS = 458,
    INITIALLY = 459,
    INLINE_P = 460,
    INNER_P = 461,
    INOUT = 462,
    INPUT_P = 463,
    INSENSITIVE = 464,
    INSERT = 465,
    INSTALL = 466,
    INSTEAD = 467,
    INT_P = 468,
    INTEGER = 469,
    INTERSECT = 470,
    INTERVAL = 471,
    INTO = 472,
    INVOKER = 473,
    IS = 474,
    ISNULL = 475,
    ISOLATION = 476,
    JOIN = 477,
    JSON = 478,
    KEY = 479,
    LABEL = 480,
    LANGUAGE = 481,
    LARGE_P = 482,
    LAST_P = 483,
    LATERAL_P = 484,
    LEADING = 485,
    LEAKPROOF = 486,
    LEFT = 487,
    LEVEL = 488,
    LIKE = 489,
    LIMIT = 490,
    LISTEN = 491,
    LOAD = 492,
    LOCAL = 493,
    LOCALTIME = 494,
    LOCALTIMESTAMP = 495,
    LOCATION = 496,
    LOCK_P = 497,
    LOCKED = 498,
    LOGGED = 499,
    MACRO = 500,
    MAP = 501,
    MAPPING = 502,
    MATCH = 503,
    MATERIALIZED = 504,
    MAXVALUE = 505,
    METHOD = 506,
    MICROSECOND_P = 507,
    MICROSECONDS_P = 508,
    MILLISECOND_P = 509,
    MILLISECONDS_P = 510,
    MINUTE_P = 511,
    MINUTES_P = 512,
    MINVALUE = 513,
    MODE = 514,
    MONTH_P = 515,
    MONTHS_P = 516,
    MOVE = 517,
    NAME_P = 518,
    NAMES = 519,
    NATIONAL = 520,
    NATURAL = 521,
    NCHAR = 522,
    NEW = 523,
    NEXT = 524,
    NO = 525,
    NONE = 526,
    NOT = 527,
    NOTHING = 528,
    NOTIFY = 529,
    NOTNULL = 530,
    NOWAIT = 531,
    NULL_P = 532,
    NULLIF = 533,
    NULLS_P = 534,
    NUMERIC = 535,
    OBJECT_P = 536,
    OF = 537,
    OFF = 538,
    OFFSET = 539,
    OIDS = 540,
    OLD = 541,
    ON = 542,
    ONLY = 543,
    OPERATOR = 544,
    OPTION = 545,
    OPTIONS = 546,
    OR = 547,
    ORDER = 548,
    ORDINALITY = 549,
    OUT_P = 550,
    OUTER_P = 551,
    OVER = 552,
    OVERLAPS = 553,
    OVERLAY = 554,
    OVERRIDING = 555,
    OWNED = 556,
    OWNER = 557,
    PARALLEL = 558,
    PARSER = 559,
    PARTIAL = 560,
    PARTITION = 561,
    PASSING = 562,
    PASSWORD = 563,
    PERCENT = 564,
    PLACING = 565,
    PLANS = 566,
    POLICY = 567,
    POSITION = 568,
    PRAGMA_P = 569,
    PRECEDING = 570,
    PRECISION = 571,
    PREPARE = 572,
    PREPARED = 573,
    PRESERVE = 574,
    PRIMARY = 575,
    PRIOR = 576,
    PRIVILEGES = 577,
    PROCEDURAL = 578,
    PROCEDURE = 579,
    PROGRAM = 580,
    PUBLICATION = 581,
    QUALIFY = 582,
    QUOTE = 583,
    RANGE = 584,
    READ_P = 585,
    REAL = 586,
    REASSIGN = 587,
    RECHECK = 588,
    RECURSIVE = 589,
    REF = 590,
    REFERENCES = 591,
    REFERENCING = 592,
    REFRESH = 593,
    REINDEX = 594,
    RELATIVE_P = 595,
    RELEASE = 596,
    RENAME = 597,
    REPEATABLE = 598,
    REPLACE = 599,
    REPLICA = 600,
    RESET = 601,
    RESPECT_P = 602,
    RESTART = 603,
    RESTRICT = 604,
    RETURNING = 605,
    RETURNS = 606,
    REVOKE = 607,
    RIGHT = 608,
    ROLE = 609,
    ROLLBACK = 610,
    ROLLUP = 611,
    ROW = 612,
    ROWS = 613,
    RULE = 614,
    SAMPLE = 615,
    SAVEPOINT = 616,
    SCHEMA = 617,
    SCHEMAS = 618,
    SCROLL = 619,
    SEARCH = 620,
    SECOND_P = 621,
    SECONDS_P = 622,
    SECURITY = 623,
    SELECT = 624,
    SEQUENCE = 625,
    SEQUENCES = 626,
    SERIALIZABLE = 627,
    SERVER = 628,
    SESSION = 629,
    SESSION_USER = 630,
    SET = 631,
    SETOF = 632,
    SETS = 633,
    SHARE = 634,
    SHOW = 635,
    SIMILAR = 636,
    SIMPLE = 637,
    SKIP = 638,
    SMALLINT = 639,
    SNAPSHOT = 640,
    SOME = 641,
    SQL_P = 642,
    STABLE = 643,
    STANDALONE_P = 644,
    START = 645,
    STATEMENT = 646,
    STATISTICS = 647,
    STDIN = 648,
    STDOUT = 649,
    STORAGE = 650,
    STORED = 651,
    STRICT_P = 652,
    STRIP_P = 653,
    STRUCT = 654,
    SUBSCRIPTION = 655,
    SUBSTRING = 656,
    SUMMARIZE = 657,
    SYMMETRIC = 658,
    SYSID = 659,
    SYSTEM_P = 660,
    TABLE = 661,
    TABLES = 662,
    TABLESAMPLE = 663,
    TABLESPACE = 664,
    TEMP = 665,
    TEMPLATE = 666,
    TEMPORARY = 667,
    TEXT_P = 668,
    THEN = 669,
    TIME = 670,
    TIMESTAMP = 671,
    TO = 672,
    TRAILING = 673,
    TRANSACTION = 674,
    TRANSFORM = 675,
    TREAT = 676,
    TRIGGER = 677,
    TRIM = 678,
    TRUE_P = 679,
    TRUNCATE = 680,
    TRUSTED = 681,
    TRY_CAST = 682,
    TYPE_P = 683,
    TYPES_P = 684,
    UNBOUNDED = 685,
    UNCOMMITTED = 686,
    UNENCRYPTED = 687,
    UNION = 688,
    UNIQUE = 689,
    UNKNOWN = 690,
    UNLISTEN = 691,
    UNLOGGED = 692,
    UNTIL = 693,
    UPDATE = 694,
    USER = 695,
    USING = 696,
    VACUUM = 697,
    VALID = 698,
    VALIDATE = 699,
    VALIDATOR = 700,
    VALUE_P = 701,
    VALUES = 702,
    VARCHAR = 703,
    VARIADIC = 704,
    VARYING = 705,
    VERBOSE = 706,
    VERSION_P = 707,
    VIEW = 708,
    VIEWS = 709,
    VIRTUAL = 710,
    VOLATILE = 711,
    WHEN = 712,
    WHERE = 713,
    WHITESPACE_P = 714,
    WINDOW = 715,
    WITH = 716,
    WITHIN = 717,
    WITHOUT = 718,
    WORK = 719,
    WRAPPER = 720,
    WRITE_P = 721,
    XML_P = 722,
    XMLATTRIBUTES = 723,
    XMLCONCAT = 724,
    XMLELEMENT = 725,
    XMLEXISTS = 726,
    XMLFOREST = 727,
    XMLNAMESPACES = 728,
    XMLPARSE = 729,
    XMLPI = 730,
    XMLROOT = 731,
    XMLSERIALIZE = 732,
    XMLTABLE = 733,
    YEAR_P = 734,
    YEARS_P = 735,
    YES_P = 736,
    ZONE = 737,
    NOT_LA = 738,
    NULLS_LA = 739,
    WITH_LA = 740,
    POSTFIXOP = 741,
    UMINUS = 742
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y"

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGOnCreateConflict		oncreateconflict;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGConstrType           constr;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;

#line 826 "third_party/libpg_query/grammar/grammar_out.cpp"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */



#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))

/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  631
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   56718

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  509
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  395
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1917
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3102

#define YYUNDEFTOK  2
#define YYMAXUTOK   742


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   506,     2,   494,     2,     2,
     499,   500,   492,   490,   503,   491,   501,   493,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   508,   502,
     486,   488,   487,   507,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   497,     2,   498,   495,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   504,     2,   505,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   489,   496
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   466,   466,   482,   494,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   538,
       1,    20,    49,    72,    73,    78,    82,    87,    91,    99,
     100,   104,   105,   110,   111,   115,   116,   121,   122,   123,
     124,   125,   130,   138,   142,   147,   148,   153,   157,   162,
     166,   170,   174,   178,   182,   186,   190,   194,   198,   202,
     206,   210,   214,   222,   228,   229,   230,   235,   239,     2,
       7,    14,    24,    25,    32,     6,    47,    48,    52,    53,
      68,    69,    76,    84,    92,   100,   108,   116,   127,   128,
     155,   171,   188,   189,   208,   212,   216,   233,   240,   247,
     257,   258,   261,   273,   284,   292,   297,   302,   307,   312,
     320,   328,   333,   338,   345,   346,   350,   351,   352,   359,
     360,   364,   365,   369,   370,   371,   375,   376,   380,   381,
     391,   404,   405,   408,   417,   428,   429,   430,   433,   434,
     435,   439,   440,   441,   442,   446,   447,   451,   453,   469,
     471,   476,   479,   487,   491,   495,   499,   503,   507,   514,
     519,   526,   527,   531,   536,   540,   544,   552,   559,   560,
     565,   566,   570,   571,   576,   578,   580,   585,   605,   606,
     608,   613,   614,   618,   619,   622,   623,   648,   649,   654,
     659,   663,   664,   668,   669,   673,   674,   675,   676,   677,
     681,   694,   701,   708,   715,   716,   720,   721,   725,   726,
     730,   731,   735,   736,   740,   741,   745,   756,   757,   758,
     759,   763,   764,   769,   770,   771,   780,   786,   795,   796,
     809,   810,   814,   815,   819,   820,   826,   832,   840,   849,
     857,   866,   875,   879,   905,   909,   922,   936,   951,   963,
     979,   985,   990,   996,  1003,  1004,  1012,  1016,  1020,  1026,
    1033,  1038,  1039,  1040,  1041,  1045,  1046,  1058,  1059,  1064,
    1071,  1078,  1085,  1117,  1128,  1141,  1146,  1147,  1150,  1151,
    1154,  1155,  1160,  1161,  1166,  1170,  1176,  1197,  1205,  1218,
    1221,  1225,  1225,  1228,  1229,  1231,  1236,  1243,  1248,  1254,
    1259,  1265,  1271,  1280,  1282,  1285,  1289,  1290,  1291,  1292,
    1293,  1294,  1299,  1319,  1320,  1321,  1322,  1333,  1347,  1348,
    1354,  1359,  1364,  1369,  1374,  1379,  1384,  1389,  1395,  1401,
    1407,  1414,  1436,  1445,  1449,  1457,  1461,  1469,  1481,  1502,
    1506,  1512,  1516,  1529,  1537,  1547,  1549,  1551,  1553,  1555,
    1557,  1562,  1563,  1570,  1579,  1587,  1596,  1607,  1615,  1616,
    1617,  1621,  1621,  1624,  1624,  1627,  1627,  1630,  1630,  1633,
    1633,  1636,  1636,  1639,  1639,  1642,  1642,  1645,  1647,  1649,
    1651,  1653,  1655,  1657,  1659,  1661,  1666,  1671,  1677,  1684,
    1689,  1695,  1701,  1732,  1734,  1736,  1744,  1759,  1761,  1763,
    1765,  1767,  1769,  1771,  1773,  1775,  1777,  1779,  1781,  1783,
    1785,  1787,  1790,  1792,  1794,  1797,  1799,  1801,  1803,  1805,
    1810,  1815,  1822,  1827,  1834,  1839,  1846,  1851,  1859,  1867,
    1875,  1883,  1901,  1909,  1917,  1925,  1933,  1941,  1945,  1949,
    1953,  1961,  1965,  1981,  1989,  1997,  2005,  2013,  2021,  2029,
    2033,  2037,  2041,  2045,  2053,  2061,  2069,  2077,  2097,  2119,
    2130,  2137,  2148,  2162,  2178,  2180,  2182,  2184,  2186,  2188,
    2190,  2192,  2194,  2196,  2198,  2200,  2202,  2204,  2206,  2208,
    2210,  2212,  2214,  2216,  2218,  2222,  2226,  2230,  2244,  2245,
    2246,  2253,  2265,  2280,  2292,  2294,  2306,  2317,  2341,  2352,
    2361,  2365,  2372,  2380,  2388,  2399,  2407,  2435,  2471,  2482,
    2483,  2490,  2496,  2500,  2504,  2508,  2512,  2516,  2520,  2524,
    2528,  2532,  2536,  2540,  2544,  2548,  2552,  2556,  2558,  2560,
    2564,  2573,  2578,  2585,  2600,  2607,  2611,  2615,  2619,  2623,
    2637,  2638,  2642,  2643,  2644,  2648,  2649,  2656,  2657,  2661,
    2662,  2667,  2675,  2677,  2691,  2694,  2721,  2722,  2725,  2726,
    2737,  2743,  2750,  2759,  2776,  2821,  2829,  2837,  2845,  2853,
    2874,  2875,  2878,  2879,  2883,  2893,  2894,  2898,  2899,  2903,
    2904,  2905,  2908,  2909,  2912,  2913,  2914,  2915,  2916,  2917,
    2918,  2919,  2920,  2921,  2922,  2923,  2924,  2927,  2929,  2934,
    2936,  2941,  2943,  2945,  2947,  2949,  2951,  2953,  2955,  2969,
    2971,  2975,  2979,  2986,  2991,  2998,  3003,  3011,  3015,  3021,
    3025,  3034,  3045,  3046,  3050,  3054,  3061,  3062,  3063,  3064,
    3065,  3066,  3067,  3068,  3069,  3070,  3080,  3084,  3091,  3098,
    3099,  3115,  3119,  3124,  3128,  3143,  3148,  3152,  3155,  3158,
    3159,  3160,  3163,  3170,  3180,  3194,  3195,  3199,  3210,  3211,
    3214,  3215,  3218,  3222,  3229,  3233,  3241,  3252,  3253,  3257,
    3258,  3262,  3263,  3266,  3267,  3277,  3278,  3282,  3283,  3287,
    3288,  3291,  3307,  3315,  3323,  3338,  3356,  3357,  3360,  3361,
    3364,  3368,  3369,  3373,  3374,  3377,  3378,  3379,  3389,  3390,
    3401,  3405,  3432,  3434,  3440,  3441,  3444,  3446,  3456,  3459,
    3470,  3474,  3478,  3490,  3494,  3503,  3510,  3548,  3552,  3556,
    3560,  3564,  3568,  3572,  3578,  3579,  3595,  3596,  3597,  3600,
    3601,  3607,  3608,  3609,  3612,  3613,  3614,  3617,  3618,  3619,
    3622,  3623,  3626,  3628,  3633,  3634,  3637,  3645,  3646,  3647,
    3648,  3651,  3652,     7,    14,    22,    11,    24,    37,    54,
      55,    56,    61,     3,    10,    17,    24,    31,    38,    45,
      52,    61,    61,    63,    64,     9,    17,    29,    30,    34,
      35,    36,    41,    42,    43,    48,    52,    56,    60,    64,
      68,    72,    76,    80,    84,    88,    92,    97,   101,   105,
     112,   113,   117,   118,   119,     7,    13,    19,    25,     7,
      21,    36,    56,    57,    84,    85,    86,    87,    88,    89,
      93,    94,    99,   104,   105,   106,   107,   108,   113,   120,
     121,   122,   139,   146,   153,   163,   173,   185,   193,   202,
     220,   221,   225,   226,   230,   239,   262,   276,   283,   288,
     290,   292,   294,   297,   300,   301,   302,   303,   308,   312,
     313,   318,   325,   330,   331,   332,   333,   334,   335,   336,
     337,   343,   344,   348,   353,   360,   367,   374,   386,   387,
     388,   389,   393,   398,   399,   400,   405,   410,   411,   412,
     413,   414,   415,   420,   440,   469,   470,   474,   478,   479,
     480,   484,   488,   496,   497,   502,   503,   504,   508,   516,
     517,   522,   523,   527,   532,   536,   540,   545,   553,   554,
     558,   559,   563,   564,   570,   581,   594,   608,   622,   636,
     650,   673,   677,   684,   688,   696,   701,   708,   718,   719,
     720,   721,   722,   729,   736,   737,   742,   743,     7,    14,
      31,    51,    52,     7,    16,    34,    41,    46,    47,    48,
      49,     9,    16,    26,    33,    44,    45,    50,    51,    52,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      90,    91,    92,    97,    98,   103,   107,   115,   116,   121,
     122,   123,   129,   134,   142,   143,     9,    19,    29,    39,
      49,    59,    69,    79,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     113,   114,   115,   116,   117,   118,   119,   124,   125,   130,
     131,   132,   137,   138,   139,   142,   143,     7,     9,    18,
      27,    36,    45,    54,    63,    72,    85,    87,    93,    94,
      99,   103,   107,   118,   126,   130,   139,   148,   157,   166,
     175,   184,   192,   200,   209,   218,   227,   236,   253,   262,
     271,   280,   290,   303,   318,   327,   335,   350,   358,   368,
     378,   385,   392,   400,   407,   418,   419,   424,   428,   433,
     438,   446,   447,   452,   456,   457,   458,     2,     9,    15,
      21,    28,    35,    45,    46,    47,     6,    15,    25,    35,
      45,    55,    65,    75,    85,    95,   106,   117,   127,   140,
     141,     7,    18,    19,    23,    24,    25,    26,     8,    22,
      36,    48,    56,    70,    71,    72,    73,    74,    87,    88,
      93,    94,    98,    99,     8,    33,    62,    66,    67,    72,
      73,    78,    79,    83,    84,    89,    90,     7,    20,     7,
      21,    25,    32,    43,    44,    50,    51,     8,    21,    34,
      52,    74,    75,    76,    77,    10,    16,    22,    28,    38,
      39,    47,    58,    70,    78,    86,    93,   103,   105,   111,
     115,   119,   134,   141,   142,   143,   147,   148,     5,    11,
       7,    14,    20,    28,    29,     9,    19,    32,    33,     8,
      20,    36,    37,    41,    45,     7,    16,    25,    34,    43,
      52,     7,     8,    21,    27,    34,    40,    47,    57,    61,
      70,    79,    88,    95,    96,   101,   113,   118,   143,   153,
     163,   169,   180,   191,   206,   207,   213,   214,   219,   220,
     226,   227,   231,   232,   237,   239,   245,   246,   250,   251,
     254,   255,   260,     9,    19,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    34,    34,    34,    34,    34,
      34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
      34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
      34,    34,    34,    34,    34,    34,    34,    34,    35,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW",
  "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P",
  "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY",
  "AS", "ASC_P", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN",
  "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT",
  "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION",
  "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED",
  "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION",
  "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P",
  "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P",
  "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_SCHEMA",
  "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE",
  "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC",
  "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED",
  "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS", "DESC_P",
  "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD", "DISTINCT",
  "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ELSE",
  "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "HANDLER", "HAVING",
  "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT",
  "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P",
  "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P",
  "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT",
  "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION",
  "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING",
  "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P",
  "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PLACING", "PLANS", "POLICY", "POSITION", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
  "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING",
  "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW",
  "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL",
  "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT", "SEQUENCE",
  "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNTIL", "UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE",
  "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING",
  "VERBOSE", "VERSION_P", "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'{'", "'}'", "'#'", "'?'",
  "':'", "$accept", "stmtblock", "stmtmulti", "stmt", "CopyStmt",
  "copy_from", "copy_delimiter", "copy_generic_opt_arg_list", "opt_using",
  "opt_as", "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "VariableResetStmt", "generic_reset",
  "reset_rest", "CallStmt", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "simple_select", "with_clause",
  "cte_list", "common_table_expr", "into_clause", "OptTempTableName",
  "opt_table", "all_or_distinct", "distinct_clause", "opt_all_clause",
  "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
  "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
  "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "table_ref", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "func_application", "func_expr", "func_expr_windowless",
  "func_expr_common_subexpr", "within_group_clause", "filter_clause",
  "export_clause", "window_clause", "window_definition_list",
  "window_definition", "over_clause", "window_specification",
  "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
  "frame_extent", "frame_bound", "qualified_row", "row", "dict_arg",
  "dict_arguments", "dict_arguments_opt_comma", "sub_type", "all_Op",
  "MathOp", "qual_Op", "qual_all_Op", "subquery_Op", "any_operator",
  "expr_list", "expr_list_opt_comma", "opt_expr_list_opt_comma",
  "func_arg_list", "func_arg_expr", "type_list", "extract_list",
  "extract_arg", "overlay_list", "overlay_placing", "position_list",
  "substr_list", "substr_from", "substr_for", "trim_list", "in_expr",
  "case_expr", "when_clause_list", "when_clause", "case_default",
  "case_arg", "columnref", "indirection_el", "opt_slice_bound",
  "indirection", "opt_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "qualified_name", "name_list",
  "name_list_opt_comma", "name", "attr_name", "func_name", "AexprConst",
  "Iconst", "Sconst", "ColId", "ColIdOrString", "type_function_name",
  "function_name_token", "type_name_token", "any_name", "attrs",
  "opt_name_list", "param_name", "ColLabel", "ColLabelOrString",
  "PragmaStmt", "CreateAsStmt", "opt_with_data", "create_as_target",
  "VariableShowStmt", "show_or_describe", "var_name", "AlterSeqStmt",
  "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem", "opt_by",
  "SignedIconst", "DeallocateStmt", "CreateStmt",
  "ConstraintAttributeSpec", "def_arg", "OptParenthesizedSeqOptList",
  "generic_option_arg", "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "ExecuteStmt",
  "execute_param_clause", "CreateSchemaStmt", "OptSchemaEltList",
  "schema_stmt", "ExplainStmt", "opt_verbose", "explain_option_arg",
  "ExplainableStmt", "NonReservedWord", "NonReservedWord_or_Sconst",
  "explain_option_list", "analyze_keyword", "opt_boolean_or_string",
  "explain_option_elem", "explain_option_name", "DropStmt",
  "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "CreateTypeStmt", "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "TransactionStmt", "opt_transaction", "RenameStmt",
  "opt_column", "PrepareStmt", "prep_type_clause", "PreparableStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "IndexStmt", "access_method", "access_method_clause",
  "opt_concurrently", "opt_index_name", "opt_reloptions", "opt_unique",
  "ExportStmt", "ImportStmt", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "ViewStmt",
  "opt_check_option", "VariableSetStmt", "set_rest", "generic_set",
  "var_value", "zone_value", "var_list", "CheckPointStmt", "LoadStmt",
  "file_name", "CreateSeqStmt", "OptSeqOptList", "CreateFunctionStmt",
  "macro_alias", "param_list", "AlterObjectSchemaStmt", "UpdateStmt",
  "InsertStmt", "insert_rest", "insert_target", "opt_conf_expr",
  "opt_with_clause", "insert_column_item", "set_clause", "opt_on_conflict",
  "index_elem", "returning_clause", "override_kind", "set_target_list",
  "opt_collate", "opt_class", "insert_column_list", "set_clause_list",
  "set_clause_list_opt_comma", "index_params", "set_target", "AnalyzeStmt",
  "unreserved_keyword", "col_name_keyword", "func_name_keyword",
  "type_name_keyword", "other_keyword", "type_func_name_keyword",
  "reserved_keyword", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,    60,    62,    61,   741,
      43,    45,    42,    47,    37,    94,   742,    91,    93,    40,
      41,    46,    59,    44,   123,   125,    35,    63,    58
};
# endif

#define YYPACT_NINF (-2533)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1846)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    5007,   -66,   819, -2533, -2533,   -66, 37576, -2533,   -66,    81,
    1614, 39496, -2533,  6521,   -66, 42376, 56218,   269,   213,   360,
   42856, 42856, 50506, 42376, 43336,   -66,   295, 50986, -2533,   -66,
   25499, 39976,     7,     9, 43816, 42376,  1145,   474,    42, -2533,
   -2533, -2533, -2533, -2533,   132, -2533,    28,   150,   926,    75,
   -2533, -2533, -2533, -2533, 25019, -2533, -2533, -2533, -2533, -2533,
   -2533,   163, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533,    38, -2533, -2533, -2533, -2533, 44296, 42376, 44776,
   40456, 45256, -2533,   136, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533,   139, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533,   178, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533,   182, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533,   196,  -165, -2533,   184, -2533,
   -2533, -2533, -2533,   153,  1145, 42376,   619,   755,   334, 51466,
   -2533, -2533, 50506, -2533, -2533,   722,   587, -2533, -2533, -2533,
   -2533, -2533, 40936, -2533, -2533, -2533, -2533, -2533,   609, -2533,
   -2533,   501, -2533,    67, -2533, -2533,   521,   487, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533,   600, -2533, 45736, -2533,
   51946, 46201, 46681, -2533,   479, 56219, 23579, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
     163, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,  1007,
   -2533, 42856,  1007, -2533, -2533, -2533, -2533, -2533,   338,   591,
   -2533,   679,   883, -2533, -2533, -2533,   682, -2533, -2533,   900,
   10615, 10615, 52426, 52426,  1007, 52426,   709,    -7, -2533, -2533,
   -2533,     9, -2533,   926,   682, 25980, -2533,   703,  -165, -2533,
   -2533,   233,  1032, 14655, 42376,   731, -2533,   753,   731,   781,
     798, -2533,  5007,   327,   327,  1238,   327,  1092,  1153, -2533,
    1366, -2533,   790, -2533,   827,  1096, -2533,   682, -2533, 42376,
    1159,  1122, 39976,  1173,   816,  1012,  1237,  4066,  1242,  1102,
    1246,  1154,  7080, 14655, 35176, -2533,  -165, -2533, -2533, -2533,
   -2533,   922,   941, -2533, -2533, -2533, -2533,   595,  1156, -2533,
     933,  1411, -2533, -2533,  1001, 47161, 47641, 42376, 42376,  1382,
   -2533, -2533, -2533, -2533,  1011, -2533, -2533, -2533,   176, -2533,
   -2533, -2533, -2533,  1034, -2533,  1034,  1034, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533,  1005,  1005,  1182,  1049, -2533,
   -2533, -2533,  1359, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533,  1058,   532, -2533,  1034, -2533,  1005, -2533,
   -2533, -2533, -2533, -2533, -2533, 55291, -2533, -2533, -2533, -2533,
    -128,   465, -2533, -2533, -2533, -2533,  1064, -2533,  1542, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533,  1085, -2533,  3945,
    1005,    47, -2533, -2533,  1434, -2533,   109,  1436,   186, -2533,
    1439,  1313, 14655, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533,     9, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
     281, -2533, -2533, 32684, -2533, -2533, 56219,  1105, -2533, -2533,
   32684, 15160, 48121,  1576, -2533,  1401, 50506,  1137, -2533, -2533,
   -2533, -2533, -2533, -2533,   771,  1635,   116,  1637, 14655,  1147,
     116,   116,  1155,  1486,   187,   189,   203,   205,  1171,  1174,
     208,   209,   209, -2533,  1175,  1176, -2533,   214,  1177,  1178,
    1667,  1677,   137,  1186,  1187,   532,   116, 14655, -2533,  1188,
     209,  1190,  1197,  1198,  1695,  1205,   250,  1705,  1216,   104,
     123,  1217,  1218, -2533,  1219,   251,   252, 14655, 14655, 14655,
    1575, 14655,  8090, 42376,  1715, -2533,  -165,  1228,  1007, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533,   175,  6036, -2533,
    1269, -2533, -2533, -2533,  1437, 14655, -2533, -2533,  1229,  1517,
   -2533,   253, -2533, -2533, -2533,  -155,  1517, -2533, -2533, -2533,
   -2533, -2533,   283,  1639, 31724, 32204, 42376, -2533, -2533,  -165,
   -2533, -2533, -2533, -2533, -2533, -2533,   452, -2533,   163, 34071,
    1239,  1240,  -165,   731, 42376, 42376,  1703, -2533, -2533, -2533,
   -2533, -2533,   926,   926,  9605,   926,   143,  1100, 11120, 15665,
    1577,  1462,   157,   133,  1582, -2533,  1465,  1092,  1153, 14655,
   -2533,  1523,   753, 39976, 42376, 52906,  1374, 42376, 38056,   789,
     966,  1258,  1343,  1263,    70,  1675, -2533,  1262, -2533,  1350,
   42376, 55291,   272, -2533,  1712,   272,   272,   170,  1716,  1357,
     324,  1514,   562,   430,  2121, -2533,  1262, 39976,   146,   564,
    1262, 42376,  1364,   620,  1262,   121, 15160,   348,   697,   352,
    1056,  1131,   126,   140,   154,   172,   177, 15160,  1209,  1233,
     188,  1248,  1458,  1502,  1509,  1527,  1529,  1541,  1552,   191,
    1555,  1557,  1561,  1581,  1583,   193,  1595,   198,  1603,   227,
     215, 15160,  1607,  1284, -2533, 34071,   -25, -2533, -2533,  1609,
     219, -2533, 30286,  1278, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533,  1370, 50506,  1327,   656,  1638,  1697,
   35176,  1288, 48121, 42376,  1521,  2121,  1524,  1301,  1764,   941,
    1304, -2533, 53386, -2533, -2533, -2533, -2533, -2533, -2533,  1309,
   -2533, -2533, 14655, -2533, -2533, -2533,  1798, -2533, 48121, 48121,
    1034,  1034, -2533, -2533,  1780,  1404,  1407,  1798, -2533,  1798,
   -2533, 50506,  1328,  1329,  1798, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533,  1798,  1413, -2533,  1414,  1415,  1416, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, 48121, -2533, 50506, 50506, -2533, 42376,
   42376, -2533, 42376, 50506,  1335, 56219, 37096, -2533, -2533, -2533,
   -2533,  1068,  1097, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, 35176, -2533,  2077, -2533, -2533, -2533,  1325,   584,
   -2533,   613,  1145, -2533, -2533, 14655,  -165, 14655, -2533, 34071,
    1383, 14655, 14655,  1344,  1798,  1798, -2533,  1438,  1798,  1798,
    5988, 14655, 28863, 14655, 19200, 11625, 14655, 14655,  8595, 14655,
    5988,  1831,  1831, 26940, -2533,  1503, -2533,  1348,  1619,  6072,
    1347, -2533,  1352,  1353,  1341, -2533,  -165,  -165, 14655, -2533,
   14655,  3099,  3099, -2533,   202, 48121, 14655, 14655, 14655, 14655,
   14655, 14655, 14655, 34696,  1442,   124, 50506, 14655, 14655,  1363,
     877, -2533, 14655,  1574, -2533,  1365, 14655,  1448,   996, 14655,
   14655, 14655, 14655, 14655, 14655, 14655, 14655, 14655, -2533, -2533,
   20701,   206,  1688,  1707,  -165,   -45,   502, 10615, 41416,  1700,
    7080, -2533,  -165, 30764,   122,  1700, -2533, -2533, -2533,   254,
   -2533, -2533, -2533, -2533, -2533,  1325, -2533,  1325,  1372, 42376,
     233, 39016, 14655, -2533, -2533,  1371,  1375,  1377,  1662, -2533,
     257,   257,  1376, -2533, 33161,  1662, -2533, -2533, 19691,  1504,
    1658,  1596, -2533, -2533,  1578,  1580, -2533,  1389, 34134, 16170,
   16170, -2533,  1274, 34071,  1299, -2533, -2533, -2533, -2533, -2533,
   -2533,   131, -2533, 42376,   418,  1577,   133,  1385, -2533, -2533,
    1454,  1862,    44, 50506, -2533, 27420,  1234,  1403, 53866, 42376,
    1680,  1641,  1685,  -104, 48121, -2533, -2533, -2533, -2533, 42376,
   50506, 48586, 54346, 35656, 42376, 35176, -2533, -2533, -2533, -2533,
   42376,   946, 42376,  6647, -2533, -2533, -2533,   272, -2533, -2533,
   -2533, -2533, -2533, 50506, 42376, -2533, -2533,   272, 50506, 42376,
     272, -2533,  1282, 42376, 42376, 42376, 42376,  1338, 42376, 42376,
     -24,   -24,  1618, -2533, 12130,    83, -2533, 14655, 14655, -2533,
   14655,  1591, -2533, -2533,   623,  1640,   106,  1471, 42376, 42376,
   50506,  1291, -2533, -2533, -2533, -2533, -2533, -2533, 35176, -2533,
    1428,  1779,  2121, -2533,  1787, 38536,   847,   691,  1480, 12635,
    1894,  1671, -2533, -2533,  1657, 14655,  1445,  1446,    47,   718,
   -2533, -2533,  1450,  1329,  1466,  1469,  1452,  1455,   748, 48121,
    1798,   107,  1456,  1459,  1388,  1346,   534,  1294, -2533,   109,
   -2533,   186, -2533,  1673,   165, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533,   776, 22619, -2533, -2533,  1916,  1007,  1916,
     285, -2533, -2533,  1916, -2533,  1916, -2533, 32684, -2533, 15160,
   -2533, 48121, -2533, -2533, -2533, -2533, -2533,  1461, -2533,  1464,
   14655,    39, -2533, 33223,  1463, 14655,  1467,  1472, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533,  1475,  1793, -2533,
    1477,  1478,  5240, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,  1484,  1468,
   33259,  1485, 19200, 19200,  8090,  2851, -2533, 19200,  1491, -2533,
    1492, 33174,  1493,  1494, 33304, 13140, 14655, 13140, 13140, 33713,
   -2533,  1495, 33792, 42376, -2533, 16675, -2533, -2533, -2533, 14655,
   42376, -2533, 14655,  1497,  6316, -2533, -2533, -2533,   873,  5483,
     502,  4508,  4508,  4508,  5988, -2533, -2533, -2533,  1489, -2533,
   19200, 19200, -2533,  5218,  1694,  8090, -2533, -2533,  1809, -2533,
     256, -2533,  1500, -2533, -2533,  2546, -2533, 28863, 34147, 14655,
     128, -2533, 14655,  1363, 14655,  1584,  4508,  4508,  4508,   274,
     274,   284,   284,   284,   873,   502, -2533, -2533, -2533,  1501,
    1507,  1510,  1855,  1205, 14655, -2533, -2533,   870,   934, 42376,
    2646,  3375,  4427, -2533, -2533, 23099,  1553,   -25,  1575,  1553,
    1798,  3099, -2533,   753, -2533, -2533, -2533, 34071, 42376, -2533,
    1145, -2533, -2533,  1528,  1528, 14655,   995,  1528,  1725,  1726,
    1101,  1101,  1274,  1728, -2533, -2533,  1588, -2533, -2533, -2533,
   14655,  9100,  1305, -2533,  1308, -2533, -2533, -2533, -2533,  1516,
   -2533, -2533,  1777, -2533, -2533, -2533, -2533, 23099,  1563, 50506,
    1585,   -80, 25499, -2533,  1735, -2533, 50506, -2533, -2533,  1525,
    1700,  1543,  1616,  1262, 14655,  1765, -2533,   105,  1537,  1887,
     -90,  1841, 50506, -2533,   246,   292, -2533,   622,  1891,   165,
    1893,   165, 35176, 35176, 35176, -2533, -2533,  1007,   787, -2533,
   -2533,   380,   796, -2533, -2533, -2533, -2533,  1629,   644,  2121,
    1262, -2533, -2533, -2533, -2533, -2533, -2533, -2533,   216,   714,
    1262,  1636, -2533,  1645, -2533,  1659,   807,  1262, -2533, -2533,
      83,    83,    83, 15160, -2533,  1775,  1776,  1579, 34071, 34071,
   34071,  1586, -2533,   153, -2533, 50506, -2533, -2533, -2533,  1591,
   42376,  1590,  2042,   941, -2533,  1738,  1099, -2533, 50506, 42376,
   42376, 42376, 21190, -2533, -2533, -2533,  1597,  1592, -2533,   -23,
    1800,  1811, 42376,  1642,  1263,  2061, -2533,   834, 13645,  1950,
   42376,  1605, -2533, -2533, -2533, -2533,  1798, -2533, -2533,   433,
     433, -2533, 50506, -2533,  1610, -2533,  1611, -2533, -2533, -2533,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, 50506, -2533,
   -2533, 35176, -2533, 36616, -2533, -2533, -2533, -2533,  1007, -2533,
    1007,  1830, 50506, 31244,  1007,  1007, -2533, -2533, -2533, -2533,
   33821, 14655, -2533,  1972, 48121, -2533,  6566, -2533, -2533, -2533,
   14655, -2533, -2533, 14655, -2533, 28863, 14655,  1953, -2533,  2110,
    2110,  6072, 48121, 19200, 19200, 19200, 19200, 19200,   675,  1190,
   19200, 19200, 19200, 19200, 19200, 19200, 19200, 19200, 19200, 20196,
     337, -2533, -2533, 14655, 14655,  1959,  1953, 14655, -2533, 48121,
    1627, -2533,  1628,  1630, 14655, -2533, 48121,  1631,  8090, 33900,
   -2533,  -165, 29351, -2533, 34071, -2533,  3099, 14655,  3198,  3253,
   14655,  1633, 14655,  1963, -2533, -2533,  1643, -2533, -2533, 48121,
   14655,  1648,  2675, 19200, 19200,  4345, -2533,  5155, 14655,  8090,
   -2533,  1618, 14150, -2533,  1838,  1739,  1739,  1739,  1739, -2533,
   -2533, 42376, 42376, 42376, 24059,  1970, 22136, 49066, 49066,  1646,
   -2533,  1405, -2533, 49066, 49546, -2533,  1669, -2533,  -165, 14655,
    1978,    83,  1503,  1978,  1660, -2533, -2533,  1664,   145, -2533,
   -2533, -2533,  1663, -2533,  1528, -2533, -2533, -2533,  1877, -2533,
   -2533, -2533, 42376, -2533, -2533, 14655,  1816, -2533, -2533, -2533,
   -2533,  1721, -2533, -2533,   838,  2082,  1816,   858, -2533,  -165,
   27420,  1563, 14655, 42376, 29380,  2018, -2533, 50506, 50506, 50506,
   -2533, 50506,  1668,  1672,   730,  1681,   992, -2533,  1819,   730,
    2001,   180,  1263,   324,  4105,   472, -2533, -2533, -2533,  1755,
   42376, -2533, 50506, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   35656, 28382, 35176, -2533, 35176, 42376, 42376, 42376, 42376, 42376,
   42376, 42376, 42376, 42376, 42376,  1690,  1691,  1692,  1618, -2533,
   -2533, -2533, -2533,   430, -2533,   153,  1696, 38536,  1145,  1480,
    1697,   595, 50026,   859,  2121,  1698,  2155, -2533,   847, 38536,
   -2533, -2533, -2533,  2113, -2533,   479,   192, -2533, -2533,  1145,
   -2533,  1145, 34071, 50506,  1757, -2533,  1329,  1701, -2533, -2533,
    1329, 48121, -2533, -2533,   165, -2533,   864, -2533, -2533, -2533,
   -2533, 50506,  1702, -2533,  1702, -2533, -2533, 14655, 34071, -2533,
    1704, -2533, 34071, 29416, -2533, 34071,  1959, -2533,  2110,   965,
     965,   965,  2753,  2030,   171,  1709,   965,   965,   965,   361,
     361,   102,   102,   102,  2110,   337, 34071, 34071, -2533, -2533,
    1706, -2533, -2533, -2533, -2533,  1710, -2533,  6223, -2533,  1708,
    1720, 50506, -2533, -2533,   312, 14655, 14655,  5218, -2533, 34221,
   14655, 48121,   875,  5218,   218, 14655,  3353,  3484, 14655, 14655,
    5204, 29445,  1723, 14655, 29543, 27900, -2533, 42376, 42376, 42376,
   42376, -2533, -2533, -2533, 49066, 49546,  1713, 21656, 49066,  1405,
    1724, 42376, -2533,  1807,  1717,  1807, 23099,  1999,  1929, -2533,
   23099,  1929,   902,  1929,  2005,  1807, 26460, -2533,  1807,  1729,
    1936, -2533,   772, 34071,  2175,  2048,  1733, -2533,  2048,  1007,
   -2533, -2533, -2533, 28863, -2533, -2533, -2533, 34071, 10615, -2533,
    1145,  -165,   716, 50506,   -36, -2533,  1749, 50506, -2533,  1816,
   34071, -2533, -2533, 50506,  1743, -2533,  1745,   730, -2533, 50506,
    1785, -2533,   223,  2047,    46, -2533, 14655, -2533,  2133,  2213,
    1819,  1753, 50506, 42376, 19200, -2533,   482,   152, -2533,  2031,
   42376,  1785,  2174, -2533, -2533, -2533,   992, -2533,  2068,  1984,
   -2533,   272, -2533, 14655,   992,  1986,   138, 50506, -2533, -2533,
    2118, -2533, 48121,   165,   165, -2533,  1763,  1766,  1768,  1769,
    1770,  1773,  1778,  1781,  1784,  1786,  1790,  1795,  1797, -2533,
    1799,  1802,  1806,  1808,  1813,  1815,  1818,  1820,  1058,  1821,
   -2533,  1822,  1663,  1823,  1825,  1826,  1827, 54826,  1828,  1829,
    1832,  1833,  1834,  1835,  1068,  1097, -2533, -2533, -2533,   933,
   -2533, -2533, -2533,  1836, -2533,  1824, -2533, -2533, -2533,  1848,
   -2533,  1849, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
      83,  1105,   113, 50506,  1788,  1642,  2240,   683,  2014,  1839,
    1480, -2533, 38536,   857,   637,  1811, -2533,   245,  1642, -2533,
    2199,  1870, -2533,  2045, 50506,  1840, -2533, -2533, -2533, -2533,
   36616,  1702, 34071, -2533, -2533, -2533, 19200,  2170,  1844, 48121,
   -2533, -2533, 14655, -2533, -2533,  5218,  5218, 34221,   899, -2533,
    5218, 14655, 14655,  5218,  5218, 14655, -2533, -2533, 29773, -2533,
   55756, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, 36136,
   49066,  1846, 41896, -2533, -2533, 42376, -2533,  1405, 23099, -2533,
   -2533,   700, -2533, 23099,  2124, -2533, 23099, -2533, 42376,  1850,
   -2533, 42376, -2533, 10110, 14655,  1890,  1007,  1890, -2533,  1847,
    1852, -2533,   -80, -2533, -2533,  2263, 24539,  2219, 14655, -2533,
   -2533,   730, -2533,  2017,  1785,  1858, -2533, -2533, -2533, -2533,
   -2533, -2533, 29877, -2533,    26, 14655, -2533,   794,  2753, -2533,
   -2533, -2533, -2533,  1785,   941, -2533, 42376,  2323,  2211, -2533,
   -2533, 34071, -2533, -2533,  1798,  1798, -2533, -2533,  2291, -2533,
   -2533, -2533, -2533,   933,   357, 28382, 42376, 42376,  1867, -2533,
   -2533,   430,  2246,   912,   847, -2533,  1145, 42376,  2222, 38536,
    2337,  1878, 42376,  1642,   931,   931, -2533,  2022, -2533,  2023,
   -2533, -2533,   345, -2533, 42376, -2533, -2533, 24539, -2533,  3105,
   19200, 48121,   920, -2533, -2533,  5218,  5218,  5218, -2533,  2076,
   -2533, -2533,   929,  2348, -2533, 42376,   -37,   573,  1888,  1896,
   -2533, -2533,  1889, -2533, 14655,  1897, -2533, -2533, 23099,   700,
     935, -2533, 48121, 42376,   936, 48121, -2533,  1898,   -76,  1900,
   -2533,  7585,  1904, -2533, -2533, -2533, -2533, -2533, -2533, 34071,
   34071, 50506,  2063, -2533,  2063, -2533, 10615,  1947, 42376, 14655,
    2333,    74, -2533,   947,    -8, 34071, 42376, -2533, 35176, -2533,
     730,   -70,  1910, 14655, 29939,  2136, -2533, -2533,  2166, -2533,
    2228, -2533, 50506,  1977,   533,  1995, -2533, -2533, -2533, -2533,
    1105,  1007,  1480,  1811,  1870,  1925, 42376,  1145,   847,   479,
   -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533, -2533,
   -2533, -2533, -2533,  2357,  2137,  2359,  1757,   961,  3105,   967,
   -2533,  2373,  1618,  1669, 36136,  1931, -2533,  1933, -2533, -2533,
   -2533, -2533, -2533, 50506,  1108, -2533, 34071, 42376, -2533, -2533,
   -2533, 42376,  2291,   999, -2533, 14655,  1935, 14655, -2533, 17180,
    1932, -2533,  2398, 14655,  1996,  1996,  1145, -2533, 30004, 50506,
   50506, 50506,  1553, 24539, -2533,  2062,   941,   730,  1954,  1003,
   -2533, -2533, -2533, -2533, -2533,  2121, -2533, 30122,  2173,   507,
    2159,  1910, -2533, 14655, -2533,  2019, -2533, -2533, -2533,  2411,
   -2533, -2533, 38536,  1952,  1870,  1811,  1642,  2162, -2533,  2163,
    1955,  1480, -2533, 14655,   446, -2533, -2533, 42376, -2533,  1009,
    1956,  1957, -2533, -2533, -2533,  1958, 17180,  1961, -2533, 50506,
    1960, 34071,  2102, -2533, -2533, -2533,  2333, -2533, -2533,   257,
     257, -2533, -2533, 27420,  2166, 28382, -2533, 35176,  2055,   -70,
    2261, -2533, -2533, -2533, -2533,    49,  2177, -2533,  2178, -2533,
   34071, -2533,  1145, 38536, -2533, -2533, -2533, -2533, -2533, 24539,
    1553,  1493, 17685, 17685,  1967,  1021, -2533,  2461,  2128, -2533,
   -2533,  1974, -2533, -2533, -2533, 41896, 50506,  1528,  1528,  1553,
    2159, -2533, -2533, -2533, -2533, -2533,   495,   495,  2350, -2533,
    2036, -2533,  1870,  1028, -2533, 18695,  2119,   151, 33210, -2533,
   -2533, -2533, -2533, -2533,  1979,  1982, -2533, -2533, -2533,   257,
   -2533, -2533, -2533, -2533, -2533,  2453, -2533,   194, -2533, -2533,
   -2533,  1480,  2443, -2533, -2533, -2533, -2533, -2533, -2533,  2473,
    1528,   730, -2533, -2533, -2533,  1553, 18190,  1983, -2533, -2533,
   -2533, -2533
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
    1274,  1145,     0,  1028,  1027,  1145,     0,  1239,  1145,    68,
     965,     0,   792,     0,  1145,     0,  1274,     0,     0,     0,
       0,     0,     0,     0,     0,  1145,   142,     0,   791,  1145,
       0,     0,  1179,     0,     0,     0,     0,     0,     2,     4,
      11,    35,     9,    31,   109,    96,   147,   108,  1273,   248,
     112,    28,    12,    37,   790,     6,    18,    16,    21,    14,
      22,   986,    20,    17,     7,    32,    30,    29,    34,    25,
      23,    24,    19,    38,    36,    10,    27,    15,    13,     5,
      33,    26,     0,     8,  1144,  1143,  1137,     0,     0,     0,
       0,     0,  1138,   746,  1305,  1306,  1307,  1308,  1309,  1310,
    1311,  1312,  1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,
    1665,  1321,  1322,  1323,  1612,  1613,  1666,  1614,  1615,  1324,
    1325,  1326,  1327,  1328,  1329,  1330,  1331,  1616,  1617,  1332,
    1333,  1334,  1335,  1336,  1618,  1667,  1337,  1338,  1339,  1340,
    1341,  1342,  1668,  1343,  1344,  1345,  1346,  1347,  1348,  1349,
    1350,  1351,  1669,  1352,  1353,  1354,  1670,  1671,  1672,  1673,
    1674,  1355,  1356,  1357,  1358,  1359,  1360,  1361,  1619,  1620,
    1362,  1363,  1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,
    1372,  1373,  1374,  1375,  1376,  1377,  1378,  1379,  1380,  1381,
    1382,  1383,  1384,  1385,  1386,  1387,  1388,  1389,  1621,  1390,
    1391,  1392,  1393,  1394,  1622,  1395,  1396,  1397,  1623,  1398,
    1399,  1400,  1675,  1676,  1401,  1402,  1624,  1678,  1403,  1404,
    1625,  1626,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,
    1679,  1413,  1414,  1415,  1416,  1417,  1418,  1419,  1420,  1421,
    1422,  1423,  1680,  1627,  1424,  1425,  1426,  1427,  1428,  1628,
    1629,  1630,  1429,  1681,  1682,  1430,  1683,  1431,  1432,  1433,
    1434,  1435,  1436,  1437,  1684,  1438,  1685,  1439,  1440,  1441,
    1442,  1443,  1444,  1445,  1446,  1631,  1447,  1448,  1449,  1450,
    1451,  1452,  1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,
    1461,  1462,  1463,  1464,  1632,  1687,  1633,  1465,  1466,  1467,
    1634,  1468,  1469,  1688,  1470,  1635,  1471,  1636,  1472,  1473,
    1474,  1475,  1476,  1477,  1478,  1479,  1480,  1637,  1689,  1481,
    1690,  1638,  1482,  1483,  1484,  1485,  1486,  1487,  1488,  1489,
    1490,  1491,  1492,  1493,  1639,  1494,  1495,  1640,  1496,  1497,
    1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,
    1641,  1508,  1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,
    1517,  1518,  1519,  1520,  1521,  1522,  1523,  1524,  1525,  1526,
    1691,  1527,  1528,  1529,  1642,  1530,  1531,  1532,  1533,  1534,
    1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,  1543,  1544,
    1545,  1692,  1546,  1643,  1547,  1548,  1549,  1693,  1550,  1551,
    1644,  1552,  1553,  1554,  1555,  1556,  1557,  1558,  1559,  1560,
    1561,  1562,  1563,  1564,  1645,  1565,  1646,  1566,  1567,  1568,
    1569,  1695,  1570,  1571,  1572,  1573,  1574,  1647,  1648,  1575,
    1576,  1649,  1577,  1650,  1578,  1579,  1651,  1580,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,  1588,  1589,  1696,  1590,  1591,
    1592,  1593,  1594,  1652,  1653,  1595,  1697,  1596,  1597,  1598,
    1599,  1600,  1601,  1602,  1603,  1604,  1605,  1606,  1607,  1654,
    1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,
    1608,  1609,  1610,  1611,    95,     0,     0,   728,   747,   748,
     756,  1140,    67,     0,     0,     0,     0,     0,     0,     0,
     959,   958,     0,  1195,   964,     0,     0,   746,   750,   827,
    1624,  1631,  1496,  1645,   825,   749,   726,   747,     0,  1053,
    1054,     0,  1062,     0,  1046,  1051,  1047,     0,  1072,  1064,
    1073,  1065,  1045,  1066,  1055,  1044,     0,  1074,     0,  1049,
       0,     0,     0,  1141,   972,  1274,     0,   995,  1016,   993,
    1012,  1009,   996,  1018,   991,  1002,  1000,  1005,   998,   981,
     986,  1004,  1001,   992,  1013,  1011,  1010,  1015,  1006,  1003,
    1019,  1017,   994,  1008,   999,   997,   990,  1014,  1007,     0,
    1238,     0,     0,   745,  1243,  1244,  1241,  1240,   773,  1163,
      91,  1647,  1575,    92,    89,   793,    90,  1142,   141,   139,
       0,   696,  1403,  1441,  1534,  1545,  1647,     0,  1215,  1219,
    1139,  1652,   784,     0,   785,     0,   113,   289,   749,   720,
    1178,     0,  1183,     0,  1510,   117,   120,   765,   118,   109,
       0,     1,  1274,   138,   138,     0,   138,     0,   101,   109,
     104,   108,   249,   789,  1647,  1575,   783,   786,   985,  1303,
       0,     0,     0,  1411,     0,     0,  1411,     0,  1411,     0,
    1411,     0,     0,   688,     0,   689,   729,    85,    86,    40,
      84,     0,   930,   963,   962,   961,   960,   965,  1411,   976,
     760,     0,  1251,  1252,     0,     0,     0,     0,     0,  1190,
     828,   826,  1060,  1061,     0,  1052,  1048,  1050,     0,   757,
    1698,   343,  1699,   372,   350,   372,   372,  1700,  1701,  1702,
    1703,  1704,  1705,  1706,  1707,   339,   339,  1377,   352,  1708,
    1709,  1710,  1411,  1711,  1712,   340,   341,   377,  1713,  1714,
    1715,  1716,  1717,     0,     0,  1718,   372,  1719,   339,  1720,
    1721,   344,  1722,   311,  1723,     0,  1724,   342,   312,  1725,
     380,   380,  1726,  1727,   367,  1728,     0,  1075,   325,   326,
     327,   328,   353,   354,   329,   359,   360,   364,   330,   412,
     339,  1071,   758,   759,  1411,  1067,  1071,  1411,  1071,   722,
    1411,     0,     0,   968,   983,  1020,  1729,  1730,  1731,  1732,
    1733,  1734,  1736,  1735,  1737,  1738,  1739,  1740,  1741,  1742,
    1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,
    1753,  1754,  1755,  1756,  1757,  1758,  1759,  1762,  1760,  1761,
    1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,  1772,
    1773,  1774,  1775,  1777,  1776,  1778,  1779,  1780,  1781,  1782,
    1783,  1784,  1785,  1786,  1787,  1788,  1789,  1790,  1791,  1792,
    1793,  1794,  1795,  1796,  1797,  1798,  1799,  1800,  1801,  1802,
    1803,  1804,  1805,  1806,  1807,  1808,  1809,  1810,  1811,  1034,
       0,  1035,  1025,   989,  1021,  1022,  1274,    66,  1242,  1198,
       0,     0,     0,     0,    93,     0,     0,     0,   731,   733,
     734,   617,   744,   691,     0,  1613,  1614,  1615,   681,     0,
    1616,  1617,  1618,  1667,   545,   532,   541,   546,   533,   535,
     542,  1619,  1620,   482,  1621,  1622,   742,  1623,  1625,  1626,
    1628,  1629,  1630,   537,   539,  1632,  1633,     0,   743,  1635,
    1636,  1477,  1638,  1639,  1641,  1642,   543,  1644,  1646,  1647,
    1648,  1649,  1650,   741,  1651,   544,  1653,     0,     0,     0,
     709,   636,     0,     0,     0,   691,   516,     0,     0,   333,
     334,   355,   356,   335,   361,   362,   336,     0,   703,   413,
     561,   691,   528,   592,   457,     0,   514,   508,   699,   124,
     697,     0,   509,   730,   691,   682,   124,   695,  1218,  1216,
    1222,  1217,     0,     0,     0,     0,     0,   291,   290,   721,
    1177,  1175,  1176,  1174,  1173,  1180,     0,  1182,   986,   631,
     633,     0,   682,   119,     0,     0,     0,    99,    98,     3,
     136,   137,     0,     0,     0,     0,     0,     0,     0,     0,
     233,   163,   164,   166,   230,   234,   242,     0,   105,     0,
     787,     0,   765,     0,     0,  1200,     0,     0,     0,  1160,
    1160,     0,     0,     0,     0,     0,  1131,  1080,  1124,     0,
       0,     0,     0,   808,   821,     0,     0,     0,     0,     0,
     818,     0,     0,   801,   795,   797,  1082,     0,  1160,     0,
    1078,     0,     0,     0,  1084,   746,     0,  1665,  1666,  1667,
    1668,  1669,   545,   532,   541,   546,   542,     0,  1675,  1676,
    1624,  1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,  1631,
    1687,  1688,  1689,  1690,  1691,   543,  1693,  1645,  1695,  1651,
     544,     0,  1697,     0,   520,   639,   147,   637,   766,     0,
     747,   753,   687,     0,   767,  1846,  1847,  1848,  1849,  1850,
    1851,  1852,  1853,  1854,  1855,  1856,  1857,  1858,  1859,  1860,
    1861,  1862,  1863,  1864,  1865,  1866,  1867,  1868,  1869,  1870,
    1871,  1872,  1873,  1874,  1875,  1876,  1877,  1878,  1879,  1880,
    1881,  1882,  1883,  1884,  1885,  1886,  1887,  1888,  1889,  1890,
    1891,  1892,  1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,
    1901,  1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,  1910,
    1911,  1912,  1798,  1913,  1914,  1915,  1916,  1917,   684,   727,
     769,   768,   770,   690,     0,     0,    64,     0,     0,   973,
       0,   761,     0,     0,  1411,  1248,  1411,   930,     0,   930,
       0,  1189,  1192,  1063,  1059,  1057,  1056,  1058,   371,   358,
     366,   365,   636,   348,   347,   346,     0,   345,     0,     0,
     372,   372,   370,   349,   325,     0,     0,     0,   376,     0,
     374,     0,   319,   315,     0,   385,   386,   387,   388,   395,
     396,   393,   394,   389,   390,   383,   384,   391,   392,   381,
     382,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     331,   337,  1069,  1070,     0,  1042,     0,     0,  1037,     0,
       0,  1039,     0,     0,     0,  1274,     0,   802,  1030,  1031,
    1029,     0,     0,   822,  1024,   988,   805,  1033,  1023,  1032,
     987,   982,     0,  1197,    55,  1228,  1227,  1236,   774,     0,
     642,     0,  1274,    94,   794,     0,   512,   636,   481,   680,
       0,     0,     0,     0,     0,     0,   518,   645,     0,     0,
     437,     0,     0,     0,   660,     0,   666,     0,     0,     0,
     438,   417,   418,     0,   708,   717,   635,     0,   516,   631,
       0,   595,   597,     0,     0,   510,   511,   517,     0,   737,
       0,   412,   412,   702,   617,     0,   610,     0,     0,   614,
     615,   616,     0,     0,     0,   694,     0,   625,   627,     0,
       0,   453,   623,     0,   456,     0,     0,     0,     0,   611,
     612,   613,   604,   605,   606,   607,   608,   609,   621,   603,
     434,     0,     0,   564,   515,     0,   433,   700,     0,   251,
       0,   735,   732,     0,   683,   251,  1230,  1234,  1235,     0,
    1229,  1233,  1221,  1220,  1225,  1223,  1226,  1224,     0,  1171,
       0,  1168,   634,   246,   121,   724,     0,     0,   116,   115,
     157,   157,   148,   151,   157,   114,   205,   206,     0,     0,
       0,     0,   239,   237,   731,   744,   193,   167,   192,     0,
       0,   171,     0,   197,   413,   232,   103,   161,   162,   165,
     102,     0,   235,     0,   245,   233,   166,     0,   788,  1304,
    1206,  1268,     0,     0,  1201,     0,     0,     0,     0,     0,
       0,  1411,     0,     0,   314,  1115,  1096,   882,  1159,     0,
       0,     0,     0,     0,     0,     0,  1123,  1120,  1121,  1122,
       0,     0,     0,     0,   806,   807,   820,     0,   811,   812,
     809,   813,   814,     0,     0,   799,   800,     0,     0,     0,
       0,   798,     0,     0,     0,     0,     0,     0,     0,     0,
     147,   147,   147,   526,     0,   145,   146,     0,     0,   685,
     688,    54,   928,   938,     0,     0,     0,     0,     0,     0,
       0,   965,   977,   975,   978,   980,   979,   762,     0,  1077,
       0,     0,  1247,  1245,     0,   927,   901,     0,  1194,     0,
       0,  1411,   917,  1191,     0,     0,     0,     0,  1071,     0,
     369,   368,   320,   316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1076,  1071,
    1068,  1071,   723,     0,  1071,   971,   984,  1026,   803,   823,
     804,   824,    87,     0,    61,    69,    74,    52,     0,    52,
       0,    71,    75,    52,    70,    52,    65,     0,   775,     0,
    1162,     0,  1164,  1161,  1167,  1166,  1165,     0,   692,     0,
       0,   679,   675,     0,     0,     0,     0,     0,   646,   647,
     648,   649,   650,   651,   652,   653,   654,     0,     0,   655,
       0,     0,     0,   602,   610,   614,   615,   616,   611,   612,
     613,   604,   605,   606,   607,   608,   609,   629,     0,     0,
       0,     0,     0,     0,     0,     0,   484,     0,     0,   591,
       0,   631,   665,     0,     0,     0,     0,     0,     0,   631,
     671,     0,     0,     0,   707,     0,   704,   459,   691,     0,
     598,   458,     0,     0,     0,   739,   740,   414,   425,   460,
     461,   429,   430,   431,   435,   772,   771,   701,     0,   693,
       0,     0,   415,   439,   444,     0,   672,   477,     0,   465,
       0,   452,     0,   463,   467,   440,   455,     0,   436,     0,
     694,   626,   628,     0,   624,     0,   426,   427,   428,   419,
     420,   421,   422,   423,   424,   432,   601,   599,   600,     0,
       0,     0,   566,     0,     0,   462,   698,  1403,  1441,     0,
     135,   135,   135,   123,   133,     0,   303,   147,   709,   303,
       0,   412,   292,   765,  1181,  1169,  1170,   632,   725,   764,
    1274,   155,   156,   160,   160,     0,     0,   160,  1642,  1530,
       0,     0,     0,     0,   198,   240,     0,   231,   195,   196,
       0,   194,   731,   199,   730,   200,   203,   204,   172,   241,
     718,   243,     0,   236,   107,   106,   247,     0,  1204,     0,
       0,     0,     0,  1263,  1280,  1202,     0,   691,  1296,  1298,
     251,     0,     0,  1081,     0,  1411,  1098,     0,     0,     0,
       0,     0,     0,   832,     0,   932,   832,  1136,  1411,  1071,
    1411,  1071,  1309,  1378,  1546,   906,  1127,     0,     0,  1094,
    1153,   935,     0,   891,  1117,  1132,  1146,     0,     0,   796,
    1083,   810,   815,  1149,   819,   816,  1257,   817,  1160,     0,
    1079,     0,  1147,     0,  1255,     0,     0,  1085,  1151,  1259,
     145,   145,   145,     0,   638,     0,     0,     0,   640,   641,
     687,     0,    53,     0,   929,     0,    63,    43,    44,    54,
       0,   930,     0,   930,   976,     0,     0,   763,     0,     0,
       0,     0,   314,   920,   918,   951,     0,   925,   919,     0,
       0,   877,     0,   781,     0,     0,  1253,     0,     0,     0,
       0,     0,   338,   351,  1043,   325,     0,   379,   378,   380,
     380,   325,     0,   309,     0,   323,     0,   363,   332,   405,
     406,   407,   408,   409,   410,   411,  1036,  1038,     0,  1040,
      56,     0,    59,     0,    62,    58,    57,    51,     0,    82,
       0,     0,     0,     0,     0,     0,  1237,   643,   140,   483,
       0,     0,   676,     0,     0,   559,     0,   534,   536,   549,
       0,   538,   540,     0,   618,     0,     0,     0,   550,   486,
     487,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   503,
     502,   551,   590,     0,     0,   663,   664,     0,   552,     0,
       0,   670,     0,     0,     0,   557,     0,     0,     0,     0,
     716,   513,   632,   596,   594,   519,   412,     0,     0,     0,
       0,     0,     0,     0,   466,   454,     0,   464,   468,     0,
       0,     0,   448,     0,     0,   446,   478,   442,     0,     0,
     479,     0,     0,   565,   574,   135,   135,   135,   135,   132,
     134,     0,     0,     0,     0,  1530,     0,   275,     0,   254,
     250,   252,   262,   275,   280,   529,   301,   530,   749,     0,
     210,   145,   717,   210,     0,  1231,  1172,     0,     0,   149,
     150,   152,     0,   619,   160,   154,   202,   201,     0,   170,
     238,   168,     0,   244,  1205,     0,  1285,  1269,  1267,  1287,
    1286,     0,   691,  1294,     0,     0,  1285,     0,  1288,  1302,
    1299,  1204,     0,     0,     0,     0,   881,     0,     0,     0,
     832,     0,   940,     0,   947,     0,     0,   932,   913,  1116,
       0,     0,     0,  1090,  1135,  1108,  1100,  1086,  1114,     0,
       0,  1119,     0,  1112,  1129,  1130,  1128,   842,   867,  1133,
       0,     0,     0,   878,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   147,   143,
     144,   521,   686,   801,   939,     0,     0,   927,     0,  1194,
     974,   965,     0,     0,  1248,   930,     0,   905,   901,   926,
     899,   898,   900,     0,   782,   972,     0,   776,  1193,     0,
    1254,     0,  1250,     0,  1188,   357,   322,     0,   375,   373,
     321,     0,   317,   324,  1071,    88,     0,    47,    83,    72,
      77,     0,    81,    79,    78,    73,    76,     0,   678,   674,
       0,   531,   644,     0,   630,   658,   657,   485,   494,   498,
     499,   500,   659,     0,     0,     0,   495,   496,   497,   488,
     489,   490,   491,   492,   493,   501,   668,   667,   661,   662,
       0,   554,   555,   556,   669,     0,   706,   631,   711,   713,
       0,     0,   593,   738,   416,     0,     0,   445,   673,   469,
       0,     0,     0,   441,   618,     0,     0,     0,     0,     0,
     450,     0,     0,     0,     0,     0,   527,     0,     0,     0,
       0,   126,   125,   131,   275,   280,     0,   109,   112,     0,
     262,     0,   274,   189,   273,   189,   255,     0,   286,   284,
       0,   286,     0,   286,     0,   189,     0,   276,   189,   273,
       0,   293,   721,   302,     0,   227,     0,   705,   227,     0,
     122,   158,   159,     0,   153,   169,   719,  1203,     0,  1199,
       0,  1275,     0,     0,  1272,  1262,     0,     0,  1297,  1285,
    1276,  1154,   832,     0,     0,  1097,     0,   949,   893,   941,
     924,   908,     0,     0,     0,   833,     0,   966,     0,     0,
     914,     0,     0,     0,     0,   894,     0,     0,   853,     0,
       0,   924,     0,   931,   849,   850,     0,  1089,  1109,     0,
    1105,     0,  1134,     0,     0,     0,     0,     0,  1092,  1104,
       0,  1087,     0,  1071,  1071,  1095,   757,  1698,  1699,  1700,
    1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,  1824,
    1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,  1833,  1718,
     839,  1719,  1477,  1720,  1721,  1722,  1723,     0,  1724,   312,
    1725,  1726,  1727,  1728,   604,   605,   942,   836,   838,     0,
     837,   934,   834,   758,   835,   937,   892,  1150,  1258,     0,
    1148,     0,  1256,  1157,  1155,  1152,  1260,   524,   525,   522,
     145,    66,    46,     0,     0,   781,     0,     0,  1411,     0,
    1194,  1246,   927,     0,   957,   877,   952,     0,   781,   779,
       0,  1214,  1249,     0,     0,     0,   318,   310,  1041,    60,
       0,    80,   677,   547,   558,   656,     0,     0,     0,     0,
     553,   548,   714,   715,   710,   475,   473,   470,     0,   471,
     449,     0,     0,   447,   443,     0,   480,   560,     0,   563,
     577,   572,   573,   130,   129,   128,   127,   261,   259,     0,
     264,   271,   182,   188,   260,     0,   258,   253,     0,   285,
     281,     0,   282,     0,     0,   283,     0,   256,     0,   271,
     257,     0,   300,     0,     0,   568,   521,   568,  1232,     0,
    1284,  1264,     0,  1265,  1295,     0,     0,     0,     0,  1289,
    1261,   945,  1099,     0,   924,     0,   832,   910,   909,   912,
     907,   911,     0,   967,     0,     0,   851,     0,   858,   896,
     897,   895,   852,   924,   930,   854,     0,     0,     0,  1101,
    1091,  1088,  1093,  1102,     0,     0,  1103,  1106,   308,  1118,
    1111,  1833,  1841,     0,     0,     0,     0,     0,     0,    42,
      49,   801,     0,     0,   901,   778,     0,     0,     0,   927,
       0,     0,     0,   781,     0,     0,   829,     0,   874,     0,
     969,   780,     0,  1207,     0,  1186,  1187,     0,    48,   504,
       0,     0,     0,   712,   472,   476,   474,   451,   562,   579,
     576,   296,     0,   299,   263,     0,     0,   177,   184,     0,
     187,   181,     0,   265,     0,     0,   267,   269,     0,     0,
       0,   304,     0,     0,     0,   726,   208,  1353,  1625,  1529,
     209,     0,   213,   207,   211,   216,   218,   217,   219,   215,
     226,     0,   229,   736,   229,   620,     0,     0,     0,     0,
    1291,  1291,  1300,     0,     0,  1277,     0,   832,     0,   923,
     946,   863,   841,     0,     0,     0,   848,   855,   956,   857,
       0,  1110,     0,  1126,     0,     0,   936,  1158,  1156,   523,
      66,     0,  1194,   877,  1214,     0,     0,     0,   901,   972,
     777,   890,   883,   884,   885,   886,   887,   888,   889,   904,
     903,   875,   876,     0,     0,     0,  1188,     0,   505,     0,
     506,     0,   147,   301,     0,     0,   295,     0,   175,   173,
     176,   178,   174,     0,     0,   272,   288,     0,   268,   266,
     277,     0,   308,     0,   279,     0,     0,     0,   220,   214,
     567,   569,     0,     0,   180,   180,     0,  1271,     0,     0,
    1293,  1293,   303,     0,  1279,     0,   930,   948,   922,     0,
     915,   861,   860,   862,   866,     0,   864,     0,   880,     0,
     873,   841,   307,     0,  1113,     0,   943,    41,    45,     0,
     831,  1208,   927,     0,  1214,   877,   781,     0,  1211,     0,
       0,  1194,   507,     0,   582,   294,   297,     0,   270,     0,
       0,     0,   305,   306,   278,     0,     0,     0,   212,     0,
       0,   228,     0,   111,   110,  1266,  1291,  1290,  1292,   157,
     157,  1270,  1301,     0,   956,     0,   902,     0,     0,   863,
       0,   856,   953,   954,   955,     0,   869,   859,   870,  1107,
    1125,   944,     0,   927,  1209,   830,   970,  1212,  1213,     0,
     303,   578,     0,     0,     0,     0,   185,     0,   191,   287,
     222,     0,   221,   570,   571,   182,  1293,   160,   160,   303,
     873,   921,   916,   840,   865,   879,     0,     0,     0,   871,
       0,   872,  1214,     0,  1184,  1612,  1354,  1582,     0,   580,
     583,   581,   575,   298,     0,     0,   183,   223,   179,   157,
    1282,  1281,  1278,   832,   845,     0,   844,     0,   933,   868,
    1210,  1194,     0,   587,   586,   585,   589,   588,   186,     0,
     160,   950,   843,   847,   846,   303,     0,     0,  1283,  1185,
     584,   190
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2533, -2533, -2533,  1853,    64, -2533, -2533, -2533, -2533,  -553,
     525, -2399, -2533,   468, -2533, -2533, -2533, -2533,  -114, -1780,
   -2533,    80, -2533, -2533,    85,     8,  1267,   -35,     3,    17,
      23,    61,  1476,  1506, -2533, -1437,   782, -2533, -2533, -1822,
    -623,   -31, -2533,   658, -1430, -1788,  -515,   998,  1473,  1479,
    -399,  -418, -2533,  -537, -2533, -1340, -2533, -2533,   653,  1038,
   -1337, -1326, -2533,   346, -2533,  -464,  -396, -2533, -2533, -2533,
   -2533, -2533,    94,  -299,  -501,  1022, -2533,  1482, -2533, -2533,
   -2533, -2533, -1744, -1298, -2533,   652, -2072,   374, -1991, -1893,
     129,   117,  -919,  -268,    21,   381,  -358, -2533, -2533,  -356,
   -1775, -2452,  -373,  -372, -2533, -2533, -2533,  -477, -1185,  -721,
   -2533, -2533,   181,   296, -2533, -2533, -2533,   888,  1412, -2533,
   -2533,  2372,  2548, -2533,  -581,  2562,  -154,  -714,  1185, -1068,
    1189, -1083, -1077,  -740,  1191,  1192, -1309,  3557, -1631,  -867,
       0, -2533, -1837, -1618, -2533, -2533, -2533,  -134, -2533,  -445,
   -2533,  -440, -2533, -2533, -2533,  -488, -2182, -2533,  1116,   802,
   -2533, -2533, -2533, -1312, -2533,  4064,   707, -2533, -1724,  -945,
    -601,  -929,  -806, -1074, -1214, -2533, -2533, -2533, -2533, -2533,
   -2533, -1728, -1785,  -487,   761, -2533, -2533,   874, -2533, -2533,
   -2533,  -621,   976,  -586,  -914,   767, -2533,   118,  1951, -1399,
   -2533,   735, -1994, -2533, -2533,   396, -2533,  1554,  -481,  -996,
     449, -1069,     6, -2533,  -685,   179,  1899,  1760, -2174, -2533,
   -2533,  -498, -2274,  -987, -2533,  -655, -2533,    87,    88, -2325,
   -1440,    89, -2533,   932,    90,  -654, -1043,  -844, -1058, -2533,
      66,    91,     5, -1846, -2486,  -382, -2533,  -484, -2533,  -137,
   -2533,  -435, -2533,  -367,  -443,  -474, -2355, -1005, -2533,  1519,
    -177, -2533,   680, -2533, -2176, -2533, -2533,   666, -2533, -1022,
   -2533, -1896,   294,  -423, -2228, -2188, -1849,  -670,   358,  -430,
     333, -1816,  -671, -2533,   692, -2533,  -416, -2533,  -656, -1584,
      92, -2208,    93,   616, -2533, -2533,  -455, -2533,  -486,  -483,
   -2533, -2533,    27,  -855,  1275, -2533,    95, -2533, -2533,  1286,
    -751, -2533,  1340,    97,    98, -2533, -2533,   365, -2533,  1052,
   -2533,   353,  -603,   695, -2533,    99,  1074,   100,  -984,   101,
   -2533,   765,   103,  1152, -2533, -2533, -2533,    10, -2533,  -272,
   -2533, -2533, -2191, -2533, -2533, -2533,    11,  1562,   408, -2533,
      13, -2532,   108,   672, -2533,   953, -2533,   673,   110,   112,
      63,    14,   339,   114, -2533, -2533,   115,    33,    36, -2533,
   -2533, -2533, -2533,   168,   412, -2533,  -306, -1952,   -54, -2533,
   -2531, -2331, -2533, -2533,  -371, -2459, -1793,  1169,    -6, -2533,
   -2533, -2533,  -526, -2533, -2173
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    37,    38,    39,   547,  1959,  2731,  2306,  2732,  2028,
    1953,  1323,  2024,  1642,  1576,  1324,   495,  1656,  2307,   669,
    1643,   548,   593,   594,   549,   550,   956,    45,    46,    47,
     613,   625,   626,  1429,  1813,  2141,  1022,   600,   601,  1947,
     637,  1566,  1462,  1463,  1833,  2169,  1489,  1490,  1031,  1032,
    2778,  2983,  2779,  2780,  2643,  2644,  3066,  1477,  1481,  1482,
    1853,  1843,  1468,  2425,  2802,  2803,  2804,  2805,  2806,  2807,
    2808,   957,  2665,  2914,  1485,  1486,  1034,  1035,  1036,  1494,
    1863,    49,    50,  1816,  2149,  2150,  2151,  2152,  2402,  2403,
    2418,  2414,  2650,  2786,  2153,  2154,  2771,  2772,  2886,  2421,
    2160,  2790,  2791,  2843,  1618,   756,  1894,  1330,  1263,   758,
     958,   759,  1243,   959,  1247,   761,   960,   961,   962,   764,
     963,   964,   965,   767,  1239,   966,   967,  1258,  1282,  1283,
    1284,  1285,  1286,  1287,  1288,  1289,  1290,  1009,  1715,   969,
     970,   971,  2156,   972,  1423,  1802,  2134,  2812,  2910,  2911,
    2386,  2631,  2769,  2882,  3024,  3059,  3060,   973,   974,  1371,
    1372,  1373,  1799,  1418,  1419,   975,  2547,  1421,  1708,  1010,
    1730,  1367,  1126,  1127,  1331,  1687,  1688,  1711,  2057,  1718,
    1723,  2085,  2086,  1731,  1767,   976,  1671,  1672,  2043,  1340,
     977,   665,  1133,   666,  1336,  1761,   986,   978,   979,   980,
    1364,  1365,  2100,  2359,  2360,  1736,  1859,   617,  1455,  2782,
     779,  1208,   981,   982,   983,   984,  1012,   619,  1128,   487,
     770,  2988,  1221,  1016,  1129,  1905,  1757,   551,   552,  2287,
    1228,   553,    54,   607,   554,  1592,  1547,  1325,  1075,  1537,
    1316,   555,   556,  2214,  2551,  2936,  2238,  3078,  2483,  2484,
    2933,  2934,  2217,  1906,  3006,  3007,  2284,  1529,  3001,  1973,
    2869,  1912,  1893,  2485,  1981,  2829,  2584,  1907,  2465,  1974,
    2929,  1603,  1975,  2930,  2686,  1976,  1573,  1596,  2218,  3008,
    1913,  1574,  2213,  2552,  1517,  1977,  2940,  1978,   505,  2469,
     557,   783,   558,  1219,  1583,    60,   649,  1317,   559,  1318,
    1319,   870,    61,  1326,   872,   873,   561,   540,   541,   776,
    1295,   542,   771,   562,   563,  2225,  2226,  2227,  1908,  1056,
    2944,  1909,  1057,  1058,  2229,   564,    86,   565,  1520,   566,
     883,  1663,   567,  1005,   622,  1006,  1008,   568,  2756,  2595,
    1232,  1604,  1985,   506,    70,    71,   569,  1046,  2186,  1868,
     570,  2753,   571,   608,   609,  1327,  1442,  1328,   572,   573,
     586,   574,  1593,   575,   688,  1600,   576,   577,   578,  1874,
    1502,  2677,    82,  2193,  1878,  2196,  2822,  2439,  2191,  2197,
    2920,  2989,  2194,  1879,  1880,  2823,  1881,    83,   517,   489,
     490,   773,  1211,  1131,  1212
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     488,   630,  1216,  1074,   681,    57,   484,  1370,    43,  1209,
      69,    72,   485,    73,    77,   638,  1551,  1037,  1320,  1456,
     875,  1217,  1011,    48,  1254,  1298,  1516,  1301,  1806,  1315,
    1550,  1834,   999,    80,  1837,  1609,    81,  1260,   612,    48,
    1707,  1376,   775,   560,  2163,  1213,  2170,  1562,  1526,  2175,
    2219,   640,   616,  2121,  1076,  1499,  1080,  1424,  1084,   784,
     778,   757,   646,   869,    40,   641,  1522,  2549,  2554,  1613,
    1432,  2148,  1745,  1746,  2399,  1329,  2212,  2588,  2576,  2574,
      41,  2059,  2060,  2198,   587,    42,  2080,    51,    52,    53,
      55,    56,    58,    59,  1555,    62,   628,    63,    64,    65,
      66,    67,  2585,    68,  2358,   876,  2264,  1292,    74,  -380,
      75,   659,    76,  2062,    78,    79,   892,  2063,  2255,  2256,
    2257,  -372,  1030,  2148,  1240,  1241,  -754,  -729,  -380,  2108,
    2109, -1670,   -97,   492,  -751,  -751,  1033,  1819,  1962, -1817,
   -1817,  -754,  -377,  1855, -1677, -1671,  -377,   892,  1441,  2919,
    -100,  1587,  2273, -1818, -1818,  1252,  1858,  2405,   583, -1672,
     650,  1870,  1484,  2417,   993,  2690,  1759, -1819, -1819,  1292,
    1759,  3046,  2729,  2263,  1507,   633,   694, -1673,  2041,   620,
     583,  1304, -1674, -1686,   892, -1820, -1820, -1694,  1313,  -755,
   -1821, -1821, -1670, -1677, -1671,  1313, -1686,  2157, -1692,   584,
     584, -1824, -1824, -1694, -1833, -1833, -1839, -1839, -1672,  2794,
   -1673, -1841, -1841, -1674,  -339,  2832,  2312,  2314,  1535,  -352,
   -1696,  1538,  1539,  1518,  -755,  1292,  1260,   -97, -1844, -1844,
    2746,  -602,  -752,  -752,  1553,  1796,  1000,   -50,  -602,  2846,
   -1843, -1843,  1797,   634,  2445,  -100,  1292,  -622,   651,  2157,
    2735,  2675,   493,  2705,  -622, -1692, -1696,  -367,   583,   583,
    2415,  1234,  2280,  2750,  1682,  2924,     3,     4,   635,   635,
    1683,  2701,  2888,  1510,  1945,  2724,  1307,  1957,  1540,  1680,
    1560,   892,  1381,   580,  2215,  1385,  1436,  1307,   583,  1386,
    2921,  1561,   892,  1518,  1026,  1385,  1831,  2487,  2877,  1386,
    2348,  2589,  2906,  2607,  2247,  1235,  1466,  1313,  2431,  1313,
    1313,  3093,  1803,  1606,  1527,  2458,  3084,  1394,  1026,  1240,
    1241,   635,  2951,  1385,   598,  2189,  2931,  1394,  -801,  2326,
    -313,  2324,   663,  -801,  2647,  1255,   664,  1891,  2651,  2426,
    1534,  2903,   663,  2687,  1871,  1252,  1433,   875,  2062,  1396,
    1366,  1891,  2063,    84,   875,  1469,  1020,  1256,  2349,  1396,
    2190, -1812, -1812,  2723,  2457, -1814, -1814,  2747,  1028,  2488,
    1377,  1257,  2062,  2432,  2142,  2143,  2063,  1313,  1213,   579,
    1313,  1313,  2748,  1832,   769,  2932,  2434,  1396,  2113,  2740,
    1321,  2212,  1028,  2212,  2741,  1892,  1293,  2593,    85,  1434,
    1437,  1470,  2398,  1001,  2417,  1002,  2873,  2405,  1669,  2209,
     994,  1722,  1467,    26,  2874,  2114,  2688,  1029,  2860,   -97,
    1541,  2216,  3014,  -224,   581,  1512,  1434,   599,  1542,  2702,
    1946,  2925,  2328,  2329,  2330,  2331,  2332,  -100,  1497,  2336,
    2337,  2338,  2339,  2340,  2341,  2342,  2343,  2344,  2345,  2844,
      31,  2947,  2489,  2608,  1804,  3036,  2827,  2889,  1293,  1021,
     514,   636,  2590,  2676,   544,  1707,  3085,  -313,   875,   875,
     582,  3094,   589,   695,   631,  2837,  1525,   652,  1564,  1659,
    1236,   995,   -97,   627,   627,  2572,  1886,  1716,  3047,  2691,
    1944,    33,  2376,  2377,   886,  2601,  1670,  2680,  2950,   727,
    -100,  2637,   671,  1565,  1855,    34,   621,  1528,   623,  3041,
    1472,   630,  2165,  1385,  1293,  3025,  2178,  1386,  1343,  1967,
    3080,  1438,  1495,  1958,  2173,  2833,  2157,  1760,  2157,    35,
    2276,  2123,   772,  2115,  1551,  1293,  1496,   655,  2116,  1513,
     874,  2605,  2010,  1872,   632,  1394,   667,   668,  2011,  2013,
    1294,  2549,  2554,  1451,  2730,  3074,  2009,  2031,  2853,  1598,
    3053,  1607,  2032,  1554,  2749,  1209,  1238,  1255,    48,  1525,
    1473,   663,  1616,   871,  1617,   664,  2783,  1396,   642,  1622,
     494,  2787,  2201,  2875,  2789,  1944,  1255,  1237,  -602,  1256,
    2990,   769,  1798,   -97,   488,   488,  1623,  2078,  1250,  1251,
    3015,  1844,  2699,  1257,  -622,  2005,  2681,  1684,  1256,  1038,
    2264,  -100,  1297,  2033,   648,  -372,   640,   488,  2763,   663,
    -754,  -729,  1259,   664,  1817, -1670,  1639,  1641,  2714,  2715,
     641,  3016,   -97,  2248,   -97,  -754,  -377,    57, -1677, -1671,
      43,  1366,    69,    72,   878,    73,    77,  2220,  1004,  2774,
    -100,  2956,  -100, -1672,  2679,    48,  1130,   488,  1210,  1676,
    1677,  2949,  2148,  1690,  1691,    80,  2148,  1644,    81,  1610,
    1611, -1673,   670,  1045,  1380,  2700, -1674, -1686,   677,  3002,
    2117, -1694,  2955,  -755,  1003,  1013, -1670, -1677, -1671,  1300,
   -1686,  2118, -1692,  1921,  1861,   662,    40, -1694,  2387,  2388,
    2389,  2390, -1672,  1924, -1673,  3069,  1927, -1674,  1242,  2669,
   -1813, -1813,    41,  1246, -1696,  1668,  2898,    42,  -755,    51,
      52,    53,    55,    56,    58,    59,  1359,    62,   769,    63,
      64,    65,    66,    67,  1667,    68,  1366,  2097,  1756,   772,
      74,  1674,    75,  1707,    76,  1589,    78,    79,  2728, -1692,
   -1696,  -367,  1430,  1820,  1720,  1668,  1213,  2733,   877,  2221,
     584,   879,  1311,  1312,  2574,  3075,  1414,  1415,  1416,  1417,
    3020,   757,   496,  1311,  1312,  3022,   488,  1743,  1209,  1417,
     875,  1305,  1377,   990,  1306,  1545,  2744,   689,  2157,  2026,
    1273,  1274,  2157,  1987,  1854,  1854,  2407,  2363,   775,  1630,
    2025,  1862,  2773,  1668,  3023,  1634,  1527,  2333,  1527,  1546,
    2296,  1668,  3003,  1213,  -801,  -801,  2300,  1628,  1631,  1636,
    2223,  2549,  2554,   869,  2101,  2741,   880,  2073,  2074,  2075,
    2076,  2077,  2078,   497,   760,  2745,  2166,   881,  1439,  2820,
    2830,  1048,  1982,  2698,  3076,  1716,  1716,  1049,  2500,  2461,
    1716,  2845,  1313,  2075,  2076,  2077,  2078,  1994,  1588,  1370,
     692,  1551,  1313,  2471,  1527,  1313,  1518,   874,  2241,  2258,
    1911,  3077,  2408,  3082,   874,  1130,   772,  1519,  2016,  1919,
    2017,  2242,  2890,  2019,  1385,  2012,  2014,  2015,  1527,  3004,
    3095,  1545,   488,  1716,  1716,   682,  1255,  1244,  1762,    48,
    1277,  1278,  2707,  1883,  2148,  2372,  2409,   769,  1747,  2148,
    2712,  2474,  2148,  1051,  3100,  1546,  1394,   630,  1256,  1253,
    2820,   488,  2410,   693,  1549,  1966,  1556,   696,  1255,  2173,
    1920,  2891,  2411,  1209,  2462,  2004,  2006,  1940,  1941,  1942,
     697,   488,   488,   488,  2249,   488,   488,  2334,  1396,  1930,
    1256,  1291,  1449,  1050,  1937,  1450,   596,  2335,  1527,  1313,
    2861,   691,   614,  2199,  1259,   698,  2412,   683,  2222,   488,
    2223,  1048,  1313,   891,  2281,  2759,  2062,  1049,   782,  2288,
    2063,  2927,  1559, -1846, -1846, -1846,   647,  2784,   874,   874,
    1577,   781,  1412,  1413,  1414,  1415,  1416,  1417,  2224,  1528,
    2463,  1528,  2464,  1693,  1991,   500,  2246,   501,  2742,  1768,
    1694,  2862,   583,  1695,  1696,  1697,  2672,  1577,   488,    87,
    2863,  2157,   488,   488,  2467,  1458,  1459,  2945,  1465,   673,
    2157,   674,   504,   488,  1588,  2157,  1769,  1895,  2157,   641,
     641,   760,   641,  1518,  2148,  1922,  1780,  2773,  2468,  2864,
    1925,  1527,  1314,  2413,  1521,   772,   684,  1528,  2157,  1314,
      26,  1525,  1578,  1525,  1045,  2646,  2835,  2892,   769, -1815,
   -1815,  2478,  1638,   627,  2408,  2657,  2250,   892,  2660,    92,
    1130,  1528,   491,  1050,  1658,    26,  2820,  1659,   543,  2737,
     882,  1130,   685,  1244,   769,   769,  2030,    31,  1552,   597,
    2034,  1640,  2035,   610,   885,  2176,   892,  1051,  2409,  1579,
     892,  1253,  2776,  1660,  2479,  1130,  1661,  2777,   875,  1525,
    2865,  1707,    31,  1954,  2653,  2091,  1955,  1048,   686,  2878,
    2480,   875,  2866,  1049,  2411,  2164,  1579,  1379,    33,  2157,
     769,  2785,  2003,  1525, -1816, -1816,  1382,  2991,  2231,  1770,
    2233,  1528,    34,  1370,  1771,  2177,  2177,  2618,  1052,  1772,
    1431,   884,  1053,    33,  2111,   675,  2498,   676,  2308,  2254,
    2157,  1440,  1781,  1314,  1314,   687,    35,    34,   760,  1048,
    2491,    88,  2820,   886,  2037,  1049,  2455,   887,  1782,    89,
      36,   992,  1054,  1783,  2161,   998,  1716,  1716,  1716,  1716,
    1716,    35,  1007,  1716,  1716,  1716,  1716,  1716,  1716,  1716,
    1716,  1716,  1716,  1525,  1210,    36,   772,  2490,  1995,  2499,
    2571,  1661, -1822, -1822,  1582,    90,    26,  3091,  2481,  1584,
    1784,   769,  1585,  1586,  1014,  2482,   488,  1051,  2090,  1050,
    2092,  2093,   772,   772,  1528,  3054, -1823, -1823,  2001,  3070,
    3071,  2002,  1015,  1026,  2069,  2413,  1716,  1716,  1027,  1048,
    1055, -1825, -1825,    31,  3072,  1049,  2157,    44,  1337,   663,
      36,  -729,    91,   664,   988,   989,  2020,   991,  2441,  2021,
    2135,  1017,  2136,    44,  2172,  2298,  2299,  2239,   772,  1039,
    2240,  1050,  1053,  2269,  1024,    26,  2243,    44,  1018,  2244,
     874,  1773,  3098,   629,    33,  2157,  1525,  1048,  1979,  1040,
    1980,  2297,  1774,  1049,  -146,   639,  1210,  1041,    34,  -146,
    3099,    44,  1054,  2867,  1469,  1047,  2868,  1028,    48,   488,
    1043,   488,    31,   871,  2290,   488,   488,  1659,  2442,  1044,
    1662,  2443,    35,  1664,  2137,   488,  2138,   488,   488,   488,
     488,   488,   488,   488,  1059,    48,    36,   760,  2446,  2580,
     769,  2447,  1955,  1048,  2599,  1665,  1644,  2600,  1666,  1049,
    1470,  1050,   488,    33,   488,  2619,  1029,  1785,  1661,   772,
     488,   488,   488,   488,   488,   488,   488,  1210,  -146,  1060,
    1055,   488,   488,  1051,  1077,  2762,   488,  2550,  1081,  2764,
     488,  2157,  1661,   488,   488,   488,   488,   488,   488,   488,
     488,   488,  2852,  2173,   488,  1955,  1023,  1806,  1025,  1050,
    2880,   488,  1214,  1661,  1130,    36,   762,  1210,  1218,  2883,
    1471,  2682,  2884,   684,  1220,  2900,  2904,  -146,  2901,  2901,
    1215,  1678,  2498,   583,  1078,  1051,   488,  2922,  1053,  1222,
    2923, -1846, -1846, -1846,  1223,  2073,  2074,  2075,  2076,  2077,
    2078,  2961,   488,   627,  2923,   769,  1231,  2962,   496,   685,
    1661, -1826, -1826,   488,   488,  1050,  1233,  1004,  1079,  1472,
    1668,  1698,  1699,  1700,  1238,  1701,  1702,  1703,  1704,  1705,
    1706, -1196,  2652,  2354,  2655,  1895,  1082,   875,  1245,  2974,
    1053,  2407,  2901,  2996,  1242,  2272,  2997,   769,   772,  3026,
    1873,  1248,  3027,   633,    26, -1827, -1827,  1210,   760,  1210,
    2304,  3063, -1828, -1828,  2901,  1051,  1689,  -147,  3081,   497,
    1083,  2923,  -147,  1267,  1268,  2234,  2454,  2236,  2456,  1473,
   -1829, -1829, -1830, -1830,   760,   760,  1055,  2879,  1246,  1265,
    1266,    31,   687,  2598, -1831, -1831,  1313,  1249,  1130,  3037,
    3038,   488,   488,  1261,   488, -1832, -1832,  2320, -1834, -1834,
   -1835, -1835,  2422,  1051, -1836, -1836,  1882,  2408,  1668,  1262,
    1053,   634,  1210,  1965,  1264,  2327,  1296,  2555,  1299,  1911,
     760,  1302,    33,  1130, -1837, -1837, -1838, -1838,  1055,   488,
    1303,  -147,  1273,  1274,  1322,  1983,    34,  1716, -1840, -1840,
    1054,  2409,  2350,   772,  1332,  2577, -1842, -1842,  1821,  2355,
   -1845, -1845,  1567,  1568,  1928,  1267,  1268,  2410,  1053,  1051,
      35,  1856,  1857,   762,  1333,  2570,  1335,  2411,   874,  3090,
    -343,   654,  -350,   657,    36,   661,  1341,  2710,  1275,  1276,
    -147,   874,  1343,  1130,  1342,   772,  -198,  -198,  1929,   635,
    1277,  1278,  -202,  -202,   488,  -201,  -201,  1445,  1447,   488,
    1344,  2412,  -340,  1345,    36,  1347,  -224,  -225,  1055,   630,
    1935,   760,  -341,  2173,  1053,  1348,  1349,  1351,  2850,  1352,
    1269,  1270,  1271,  1272,  1273,  1274,  1353,  1354,  1275,  1276,
    -344,   500,  1384,   501,  1355,  1385,   488,   488,   488,  1386,
    -342,   488,  1277,  1278,  1936,  1356,  1357,  1358,  1359,   488,
     488,   488,   488,  1363,  1375,   503,  1055,  1378,   504,   488,
     630,  1422,  1427,   488,  1428,  1425,   488,  1394,  1443,  1716,
    1453,  1457,  1452,  1027, -1846,  2308,  1029,  1493,  1491,  1632,
    1505,  1633,  2719,  2720,   488,   488,  1498,  1523,  2413,   488,
    1524,    44,  1525,  1530,  2546,  1531,  -109,  1532,  1536,  1396,
     762,   516,  1543,   488,  1544,   516,   488,  1548,   488,  2887,
    -109,  1558,  1055,   516,  1563,  -109,  1570,  1571,  1575,  1588,
    1580,   496,  1581,  1591,   516,   516,  1594,  2887,   488,   636,
    1595,  1213,  1597,  1599,  1277,  1278,  1313,   892,  1605,   488,
     760,  1313,    44,   629, -1196,  2155,  1254,  1612,   769,  1614,
    1668,   485,  1615,  1314,  2597,  1620,  1621,  2029,  1657,   488,
    1624,  1625,  1626,  1627,  -109,  1635,  1314,   630,  1662,  2110,
    1670,  1664,  1385,  1675,   488,   488,  1737,  1735,   516,  1742,
    1739,  1776,   497,    48,  -109,  1740,  1370,  1758,  1741,  1639,
    1641,   488,  1765,  1665,  1777,  1779,  1666,  2155,  1800,  1801,
   -1846,  1815,  1822,   485,  1828,  1829,  1830,   634,   488,  1835,
     639,  2550,  1846,  1845,  1847,  1866, -1846,  1848,  2471,  1849,
     769, -1846,  1850,  1716,  2472,  1867,  1210,  1210,  1210,    44,
    1869,  2971,  1884,  -109,  1888,   486,   498,  2473,   769,  1890,
     515,   635,  -109,  1889,   515,   760,  1952,  1279,  1280,   585,
     585,   588,   515,   595,  1960,  1956,   595,  1968, -1846,   595,
     618,  1969,  1988,   515,   515,   769,  2474,  1130,  2475,  1970,
    1551,  1984,   769,  1989,  1990,  1992,  1993,  1996,  1997,   762,
     763,  1998,  1999,   595,  2027,  2000,  2007,   760,  1887,  2008,
    2018,  2038,  2039,  2045,  2050,   769,   772,  2047,  1896,  2055,
    1899,  2107,  2048,  1910,  2696,  2049,   499,  2051,  2052,  1914,
    2112,  1916,   488,  1405,  2054,  2058,   618,   515,   618,   618,
     618,  2081,  2082,  1923,  2088,  2095,  2087,  2105,  1926,  2119,
    2129,  2128,  1931,  1932,  1933,  1934,  2131,  1938,  1939,  2132,
    2133,  2159,  2168,  -203,  -204,  1210,  2179,   874,  3021,  2182,
    2183,  2185,  2195,  2476,   500,  2718,   501,  2180,  2200,  1639,
    1641,  2202,  2188,  2203,  2838,   488,  2207,  2205,   772,  2208,
    1313,  2211,   502,  2230,   488,  2232,  2245,   488,   503,   672,
     488,   504,  -109,  2251,  2259,  2260,   772,   488,   488,   488,
     488,   488,  2252,   630,   488,   488,   488,   488,   488,   488,
     488,   488,   488,   488,   875, -1846,  2253,   488,   488,  2261,
    2268,   488,  2271,   772,  2262,  2282,  2237,   769,   488,  2267,
     772,  2477,   488,  1061,   630,  2279,  2478,  2278,  2283,  2289,
    2382,   488,  2293,  2286,   488,  2295,   488,  2311,  2302,  2303,
     762,   630,  1062,   772,   488,  2319,   663,   488,   488,  1017,
     664,  2062,   488,   488,  2084,  2083,   488,  2351,  2352,  1645,
    2353,  2356,   670,  2368,  2370,  2385,   762,   762,   488,  2479,
     488,  2396,  2371,    44,  2155,  2140,  2155,   769,  2374,  2406,
     485,  2550,   485,   488,  2420,  2480,  1061,   763,  2424,  1061,
    2429,  1338,  2433,  1063,  2430,  2435,  2438,  2440,  2444,   997,
    2453,  2459,  2460,  2928,  1646,  1062,  2486, -1846,  1062,   488,
    2466,  1346,   762,  2502,  1412,  1413,  1414,  1415,  1416,  1417,
    2567,  2568,  2569,  2583,  2587,  2573,   488,  2582,  2594,  2596,
    1647,  2606,  1314,  1042,  2603,  1955,  2610,  2309,  2609,  2310,
    2611,  2612,  2639,  2315,  2316,  2642,  2645,   769,  1648,  1368,
    2613,  2648,  1649,  2627,  2640,  2649,  1063,  2656,  2661,  1063,
    2662,  2663,  2664,  2666,  1210,  2553,  1210,  2678,  1210,  1225,
    1227,  1229,  1230,  2683,  1650,  2684,  2685,  1651,  2546,  2689,
    2693,  2694,  2695,  2481,  1064,  2703,  2994,  2706,  2708,  2964,
    2482,  2709,  1652,  2713,  -751,  2726,  2727, -1812,   760, -1813,
   -1814, -1815,   516,   762, -1816,  1582,  2575,  1632,  2736, -1817,
    1584,  2998, -1818,  1585,  1586, -1819,  2738, -1820,  2734,   639,
     639, -1821,   639,  2494,   763,   772, -1822,  2591, -1823,  2592,
   -1825,   516,   516, -1826,  2975,  1065,  2977, -1827,  2751, -1828,
    1313,   488,  2725,  1066, -1829,  2902, -1830,  1064,  2902, -1831,
    1064, -1832, -1834, -1835, -1836,  1067, -1837, -1838, -1839, -1840,
   -1841,  2752,  2754, -1842, -1843, -1844, -1845,  -752,  2739,  2757,
     760,  2760,  2928,  2761,  2942,  2775,  2788,  2815,   769,  2793,
    2811,  2818,  2824,  2826,  1653,  2816,  1068,  2828,   760,   488,
     488,  2840,  1654,  2841,   488,   772,  2842,  2849,  1065,   488,
    2851,  1065,   488,   488,  2856,  2857,  1066,   488,  2858,  1066,
    2871,  2872,  2881,   769,   516,   760,  2885,  2893,  1067,  2895,
    2913,  1067,   760,  2916,   618,  2894,  2897,  2905,   679,  2907,
     488,   680,   762,  1070,   488,  1655,  2155,  2909,  2919,  2935,
    2155,   515,   485,  2702,  2939,   760,   485,  2941,  2943,  1068,
    2548,  2987,  1068,  2946,  2952,  1071,  2957,  2958,  2959,  2963,
    2967,  2285,   488,  2968,  2976,  2979,  2980,  2982,  2993,   680,
     515,   515,  2995,  3000,   670,  1073,  3005,  3011,  2671,  3012,
    2673,  3013,  3017,  3018,  3019,   769,  3028,  3029,  3030,  2630,
     488,  3032,  3035,  3045,  3048,  3050,  1070,  3062,   488,  1070,
    3064,  3065,  3046,   763,  3067,  3047,  3083,  3092,  3096,  3088,
     585,  3089,  3097,  3101,  2265,  1019,  2758,   488,  1071,  2305,
    1454,  1071,  1435,  2171,  1865,  2970,   772,  2984,  3068,   985,
     985,   595,   595,  2181,   595,  1488,  1842,   762,  1073,  2428,
    1487,  1073,  3031,  2978,   618,  2915,  1492,  1864,  2546,  2184,
    2400,  2899,  2667,   515,  2638,  2395,  2966,  2965,  2972,  2654,
    2973,  2553,  1679,  2814,  3033,  3061,  1681,   760,  1685,  1686,
    3034,  1805,  2103,  2174,  2126,  2042,  1951,  2124,   618,   762,
    1448,   618,   987,  2162,  1384,  3043,  2670,  1385,  2427,  3009,
    2836,  1386,  2716,  3079,  3044,  3051,  3073,  1515,  2870,  2235,
    2210,   769,    44,  2586,  3042,  2470,  3049,  2556,  3040,  2206,
    2270,  1637,  1629,  1915,   618,   618,   618,   618,  1608,  1394,
    2501,  2743,  2228,  2505,   874,  2167, -1846,   760,  1501,    44,
     488,  1506,  1824,   772,  2960,  1500,   488,   769,  2668,  2449,
    2036,  2674,  2448,  2581,  1533,   488,   488,  2992,  2817,   488,
    1826,  1396,  3039,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   488,   763,  1557,     0,     0,   769,  2155,
       0,   769,   488,     0,     0,   485, -1571,   488,  2155,     0,
     488,     0,  2451,  2155,   485,     0,  2155,   488,   488,   485,
     763,   763,   485,     0,     0,     0,  1766,   760,     0,     0,
     488,     0,   488,     0,     0,     0,  2155,     0,     0,  2503,
       0,     0,   485,  1384,     0,     0,  1385,     0,     0,   488,
    1386,  2120,     0,     0,  2557,  2558,  2559,  2560,  2561,  2562,
    2563,  2564,  2565,  2566,     0,     0,   763,     0,     0,     0,
       0,     0,     0,  1374,     0,     0,     0,     0,  1394,  2553,
       0,     0, -1846,     0,     0, -1846,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1846,     0,
       0, -1571,     0, -1846,  2854,     0,     0,     0,     0,     0,
    1396,   488,     0,     0,   488,   772,     0,  2155,     0,     0,
       0,   891,     0,   485,  2062,     0,   630,     0,  2063,    44,
       0,  2064,  2065,  2066,   516,   516,     0,  1590,   488,  1314,
   -1846,     0,   488,     0,     0,  1334,   772,     0,  2155,   772,
       0,     0,     0, -1571,   485,   488,     0,   763,   760,     0,
       0,     0,     0,     0,     0,     0,     0, -1571,     0,     0,
     488,     0, -1571,   488,     0,     0,     0, -1571,     0,     0,
    2375,     0,  1210,     0,     0,     0, -1571,   488,     0,     0,
   -1571,     0,     0,   760,     0,  1405,     0,     0,     0,     0,
       0,   769,     0,     0,     0,  2813,     0,     0,     0,     0,
       0, -1846,   515,     0,     0,     0,     0,     0,     0,   891,
     762, -1571,  2062,     0,    44,  2954,  2063, -1846,     0,  2064,
    2065,  2066, -1846,     0,     0,     0,     0,     0,   488,     0,
       0, -1571,     0,     0,  2155,     0,     0,     0,     0,     0,
     485,     0,     0,     0,     0,   618,     0,     0,     0,   488,
       0,   488,     0,   488,  2548,   760,     0,   488,     0, -1846,
     765,     0,     0,   515,   515,     0,     0,   488,     0,     0,
       0,     0,  2697,  2155,  2985,     0,   763, -1846,     0,   485,
   -1571,     0,   762, -1571,     0,     0,     0,   488,     0, -1571,
       0,     0,   618,   618,  1504,     0,   618,  1514,     0,     0,
     762,     0,     0,     0,     0,     0,     0,   488,     0,   618,
       0,     0,     0,     0,  1405,     0,     0,     0,     0,     0,
     488,     0,  2068, -1571,     0,     0,   618,   762,     0,     0,
     618,  1368,  1814,     0,   762,     0,     0,     0,     0,  2553,
       0,  1210,     0,     0,     0,     0, -1571,     0,     0,     0,
       0,     0,     0,  1823,     0,  1825,     0,   762,     0,     0,
       0,     0,     0,   488,     0,     0,   488,   488,     0,  2155,
    3052,   760,     0,     0,     0,   485,     0,     0,     0, -1846,
    2948,   763,  1368,     0,     0,     0,  1412,  1413,  1414,  1415,
    1416,  1417,  2069,     0,     0,     0,     0,  1860,  2067,   488,
    1766,     0,  2140,     0,     0,     0, -1846,   760,     0,   516,
     516,     0,   516,     0,     0,     0,  2130,     0,     0,     0,
    2068,     0,     0,   763,     0,     0,     0,     0,     0, -1571,
       0,     0,  2147,     0,     0,     0,   766, -1571,   760,     0,
     488,   760,     0,     0,     0,     0,     0,    44,     0,     0,
     768,     0,     0,     0, -1571,     0, -1571, -1571,     0,     0,
       0,     0,     0,   891,  1572,     0,  2062,   765,     0,     0,
    2063,     0,   618,  2064,  2065,  2066,     0,     0,     0,   762,
       0,  1602,  1961,  1963,  2147,     0,     0,     0,     0,   629,
    2069,     0,     0, -1571,     0,     0, -1571, -1571, -1571,     0,
       0,     0,     0,     0,     0,  2839,     0,     0, -1846,     0,
    1619,     0,     0,     0,     0,  1412,  1413,  1414,  1415,  1416,
    1417,     0,     0,     0,  2548,  2847,  2848,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   762,
       0,  2859,     0,     0,     0,   680,   680,     0,   515,   515,
       0,   515,   680,     0,     0,     0,   891,     0,     0,  2062,
    1265,  1266,     0,  2063,     0,     0,  2064,  2065,  2066,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2365,     0,     0,     0,     0,     0,  2070,
    2071,  2072,     0,  2073,  2074,  2075,  2076,  2077,  2078,     0,
       0,  1709,     0,     0,   765,     0,     0,     0,     0,   762,
       0,   891,  1734,     0,  2062,     0,     0,  2917,  2063,   516,
       0,  2064,  2065,  2066,     0,     0,     0,     0,     0,   516,
       0,   516,     0,     0,   516,     0,  1267,  1268,  2366,     0,
     516,   760,   516,   766,     0,   680,     0,     0,     0,     0,
       0,     0,     0,     0,   516,     0,     0,   768,     0,   516,
       0,     0,     0,   516,   516,   516,   516,     0,   516,   516,
       0,     0,     0,     0, -1846,     0,   985,   618,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2070,  2071,  2072,
       0,  2073,  2074,  2075,  2076,  2077,  2078,     0,   618,     0,
     618,  1269,  1270,  1271,  1272,  1273,  1274,     0,     0,  1275,
    1276,   891,     0,  2139,  2062,  1368,     0,     0,  2063,     0,
       0,  2064,  2065,  2066,     0, -1573,     0,     0,     0,     0,
       0,     0,     0,     0,   763,     0,     0,     0,  2621,     0,
     762,     0,   618,     0,  2069,     0,  1368,     0,     0,     0,
       0,     0,  1875,     0,  1877,     0,     0,  1514,   515,     0,
       0,  2394,     0,  2397,     0,     0,     0,  2068,   515,  1897,
     515,  1901,     0,   515,     0,   762,     0,     0,     0,   515,
     766,   515,     0,   765,     0,     0,     0,     0,     0,     0,
       0,     0,   680,   515,   768,     0,     0,   680,   515,     0,
       0,     0,   515,   515,   515,   515,   763,   515,   515,     0,
       0,     0,     0,     0,     0,  1277,  1278,     0,     0,     0,
   -1573,     0,  2068,     0,   763,     0,     0,   618,   618,  1964,
       0,     0,     0,     0,     0,     0,     0,  2069,     0,     0,
       0,     0,   891,   516,  1972,  2062,     0,   762,     0,  2063,
    1374,   763,  2064,  2065,  2066,     0,     0,     0,   763,     0,
       0,     0,     0,     0,  2266,     0,     0,     0,     0,  2622,
       0,     0, -1573,  2274,  2275,  2277,     0,     0,     0,     0,
       0,   763,     0,     0,     0,    44, -1573,     0,     0,     0,
       0, -1573,  2069,     0,  2294,     0, -1573,     0,     0,     0,
       0,     0,     0,     0,     0, -1573,    44,     0,    44, -1573,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2068,     0,     0,     0,     0,     0,  1279,  1280,
       0,     0,     0,     0,     0,     0,     0,     0,   516,     0,
   -1573,  2070,  2071,  2072,   765,  2073,  2074,  2075,  2076,  2077,
    2078,     0,     0,     0,     0,     0,     0,     0,     0,   766,
   -1573,     0,     0,   762,     0,     0,     0,     0,     0,     0,
     765,   765,     0,   768,     0,     0,     0,     0,     0,     0,
       0,     0,   515,     0,     0,     0,     0,     0,     0,   515,
       0,     0,  2069,     0,     0,     0,     0,     0,     0,   762,
       0,     0,     0,   763,     0,     0,     0,     0,     0, -1573,
       0,     0, -1573,     0,     0,     0,   765,     0, -1573,     0,
       0,     0,     0,  2147,     0,     0,  1709,  2147,     0,     0,
     762,     0,     0,   762,  2070,  2071,  2072,     0,  2073,  2074,
    2075,  2076,  2077,  2078,     0,  2391,  2392,  2393,     0,     0,
       0,     0, -1573,  2068,     0,     0,     0,    44,   618,    44,
       0,     0,     0,   763,  2158,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1573,     0,   515,     0,     0,
       0,     0,     0,     0,     0,     0,  2436,     0,     0,  2070,
    2071,  2072,   516,  2073,  2074,  2075,  2076,  2077,  2078,     0,
       0,     0,     0,     0,     0,     0,     0,   765,     0,     0,
       0,     0,     0,     0,     0,     0,  2158,     0,  2187,     0,
     766,  2192,     0,  2069,     0,  1877,     0,     0,     0,     0,
       0,  2140,     0,   763,   768,     0,     0,     0,     0,     0,
       0,  1572,     0,     0,     0,     0,   766,   766,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1573,     0,
     768,   768,     0,     0,     0,     0, -1573,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2579,     0,     0,     0,
       0,     0,     0, -1573,     0, -1573, -1573,     0,     0,  2070,
    2071,  2072,   766,  2073,  2074,  2075,  2076,  2077,  2078,     0,
      44,     0,     0,     0,  1572,     0,   768,     0,     0,   618,
       0,     0,     0,     0,     0,     0,     0,  1572,   618,   618,
     618,     0, -1573,     0,     0, -1573, -1573, -1573,     0,     0,
       0,   515,     0,   762,     0,     0,   765,     0,     0,   618,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2301,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   763,  2147,     0,   680,     0,     0,
    2147,     0,     0,  2147,     0,     0,     0,     0,     0,     0,
       0,  1572,  1572,   766,     0,     0,     0,     0,     0,     0,
       0,  2633,  2634,  2635,  2636,     0,     0,   768,     0,   763,
       0,     0,     0,     0,  1709,     0,     0,     0,     0,     0,
       0,     0,     0,   516,     0,     0,     0,     0,     0,     0,
    2070,  2071,  2072,     0,  2073,  2074,  2075,  2076,  2077,  2078,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     516,   765,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,     0,   516,   516,   516,   516,   516,
     516,   516,   516,   516,   516,     0,     0,     0,     0,     0,
       0,   763,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   765,  2704,     0,     0,     0,     0,     0,
     618,   618,   618,   486,     0,  2158,  2404,  2404,     0,     0,
       0,     0,  2404,  2419,     0,  2147,  1265,  1266,     0,     0,
       0,     0,   766,     0,     0,     0,     0,     0,  1368,     0,
       0,     0,     0,     0,     0,     0,   768,     0,     0,     0,
       0,   618,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1048,     0,     0,     0,     0,     0,  1049,     0,  1877,
       0,     0,   515,     0,  1061,     0,  1572,  1514,  1572,     0,
    1602,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1062,    44,     0,     0,     0,     0,   515,
       0,  2504,  1267,  1268,     0,     0,     0,   763,     0,     0,
       0,     0,     0,  1061,   515,   515,   515,   515,   515,   515,
     515,   515,   515,   515,     0,     0,     0,   968,   968,     0,
       0,  2641,  1062,     0,     0,     0,  1972,   766,     0,     0,
       0,   618,     0,   763,  1063,     0,  2659,     0,  1514,     0,
       0,   768,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,  1602,     0,     0,     0,     0,  1269,  1270,  1271,
    1272,  1273,  1274,  1050,   763,  1275,  1276,   763,     0,   766,
    1572,     0,     0,  1063,  2492,     0,     0,     0,     0,  1125,
    1132,     0,  2493,   768,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   516,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2614,     0,     0,     0,     0,  1064,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
    2494,     0,     0,     0,  2632,     0,   618,   618,   618,   618,
       0,  2855,     0,  2404,  2419,     0,  2404,  2404,     0,     0,
     515,     0,     0,     0,  1064,  2158,     0,     0,  2876,  2158,
       0,  1277,  1278,     0,     0,   515,  1065,     0,     0,     0,
       0,     0,     0,     0,  1066,     0,     0,     0,     0,     0,
       0,     0,  1709,     0,     0,     0,  1067,   985,     0,     0,
       0,     0,  2192,     0,   765,     0,  1877,     0,     0,     0,
       0,     0,  1514,  1384,     0,  1065,  1385,  1051,  1572,     0,
    1386,     0,     0,  1066,     0,     0,     0,  1068,     0,     0,
       0,   680,   515,     0,     0,  1067,     0,  2495,     0,   618,
    2926,     0,     0,     0,     0,     0,     0,     0,  1394,     0,
       0,     0,     0,     0,     0, -1846,  2717,     0,     0,     0,
       0,     0,     0,     0,     0,   516,  1068,   763,  1069,     0,
    2953,     0,  1053,     0,  1070,     0,   765,     0,  2792,     0,
    1396,  2795,     0,     0,  1279,  1280,     0, -1587,     0,     0,
       0,     0,     0,     0,   765,     0,  1071,     0,  1125,     0,
       0,     0,  1072,     0,  1281,     0,     0,     0,     0,     0,
       0,     0,     0,  1070,     0,  1339,  1073,     0,     0,     0,
       0,   765,     0,     0,     0,     0,   516,     0,   765,     0,
       0,     0,  1572,     0,     0,  1071,     0,     0,     0,     0,
       0,  1972,     0,     0,  1350,     0,   516,   516,     0,     0,
    2378,   765,     0,  2755,     0,  1073,     0,  2496,     0,     0,
    2497,     0,   516,     0,  1360,  1361,  1362,     0,     0,  1369,
    1055,     0,     0,     0,     0,     0,  1384,     0,     0,  1385,
     766, -1846, -1587,  1386,     0,     0, -1846, -1846, -1846,  2770,
       0,     0,  1426,     0,   768,   516,     0, -1846,   486,  2404,
       0,  2781, -1846,     0,   515,     0,     0,  2158,     0,     0,
       0,  1394,  2158,  2795,     0,  2158,     0,   515,  1395,     0,
     515,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1587,  2821,     0,     0,   516, -1846,
       0,  1464,     0,  1396,     0,  1478,  1483,     0, -1587,     0,
       0,     0,   766, -1587,     0,     0,     0,     0, -1587,     0,
       0,     0,     0,     0,  1525,   515,   768, -1587,     0,     0,
     766, -1587,     0,   765,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   768,   515,   515,     0,     0,     0,
       0,     0,     0,     0,  1405,     0,   618,   766,  1514,     0,
       0,   515, -1587,  1125,   766,     0,     0,     0,     0,     0,
       0,   768,     0,   618,  1125,     0,  2821,   516,   768,     0,
       0,  2792, -1587,     0,     0,     0,     0,   766,     0,     0,
       0,     0,     0,   765,   515,     0,     0,     0,  1125,     0,
       0,   768,     0,     0,  1397,     0,     0,  2158,     0,     0,
       0,     0,   515,     0,     0,     0,     0,     0,     0,     0,
    1398,     0,     0,     0,     0,  1399,     0,     0,     0,     0,
    2912, -1587,     0,     0, -1587,   985,     0,   515,     0,     0,
   -1587,     0,     0,     0,     0,   618, -1846,  2792,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   680,  1402,   765,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1587,   618,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1587,     0,     0,
       0,     0,     0,   486,     0,     0,     0,     0,     0,   766,
       0,     0,  2969,     0,     0,     0,   515,  1405,     0,     0,
     515,     0,     0,   768,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   680,   680,
     680,     0,  2821,     0,     0,     0,     0,     0, -1846,     0,
       0,     0,     0,  2140,     0,  1412,  1413,  1414,  1415,  1416,
    1417,     0,     0,     0,     0,     0,     0,     0,     0,   766,
       0,  1514,     0,     0,     0,     0,     0,     0,     0,     0,
   -1587,     0,     0,   768,     0,     0,   515,     0, -1587,     0,
       0,     0,     0,     0,   765,     0,     0,     0,  2912,     0,
       0,     0,     0,     0,     0, -1587,     0, -1587, -1587,  1407,
       0,     0,  1877,     0,     0,     0,     0,     0,  1673,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1692,   765,
    1710,     0,  1514,  1721,  1724,  1729,  1732,     0,  2821,   766,
       0,     0,     0,     0, -1587,     0,     0, -1587, -1587, -1587,
       0,     0,     0,   768,  2781,   680,     0,  1744,     0,     0,
       0,     0,     0,  1748,  1749,  1750,  1751,  1752,  1753,  1754,
       0,     0,     0,     0,  1763,  1764,     0,     0,     0,  1775,
       0,     0,     0,  1778,     0,     0,  1786,  1787,  1788,  1789,
    1790,  1791,  1792,  1793,  1794,     0,     0,  1795,     0,     0,
       0,   765,     0,     0,   968,     0,     0,  1125,     0,     0,
       0,  1408,     0,     0, -1846, -1846, -1846,     0,  1412,  1413,
    1414,  1415,  1416,  1417,     0,     0,     0,   -39,     0,  1827,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
       0,     0,  1420,     0,     0,     0,  1361,  1362,     2,     0,
       3,     4,     0,     0,     0,     0,     0,     0,     0,     0,
     766,     0,     0,     0,     0,     0,     5,     0,     0,     0,
       0,     0,     0,     0,   768,     6,     0,     0,     0,     0,
       0,     0,     0,  1420,     0,     0,     0,     7,     0,     0,
       0,     0,     0,     0,     0,   766,     0,     0,     8,     0,
       0,     0,     0,     0,     0,     0,     0,   765,     0,   768,
       9,     0,    10,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      11,  1125,     0,     0,  1948,  1949,     0,  1950,     0,     0,
       0,     0,     0,   765,    12,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,     0,     0,     0,     0,     0,
      14,     0,     0,     0,     0,     0,  1125,   766,    15,     0,
      16,    17,     0,  1384,   765,     0,  1385,   765,     0,     0,
    1386,   768,     0,     0,    18,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1420,
       0,     0,     0,     0,     0,     0,  1420,     0,  1394,     0,
       0,     0,     0,    19,     0, -1846,     0,     0,     0,     0,
       0,     0,  1384,     0,     0,  1385,  1125,     0,    20,  1386,
       0,     0,     0,     0,     0,     0,  1384,  2040,     0,  1385,
    1396,     0,  2046,  1386,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    21,     0,     0,  1394,  1384,     0,
       0,  1385,     0,     0, -1846,  1386,  1387,  1388,  1389,  1390,
    1391,  1394,     0,     0,     0,     0,     0,     0, -1846,     0,
       0,  2061,     0,   766,     0,  1392,     0,     0,     0,  1396,
       0,     0,  1729,  1394,  1729,  1729,     0,   768,     0,     0,
    1395,     0,  2099,  1396,     0,     0,  2102,     0,     0,  2104,
    2379,     0,     0,     0,     0,     0,     0,     0,     0,   766,
       0,     0,     0,     0,     0,  1396,     0,     0,     0,     0,
       0,    22,     0,   768,    23,     0,     0,     0,     0,     0,
       0, -1846,     0,     0,     0,     0,  2122,     0,     0,  2125,
     766,  2127,     0,   766,     0,     0,     0, -1846,     0,  2625,
       0,     0, -1846,    24,   768,     0,     0,   768,     0,     0,
       0,     0,    25,     0,     0,     0,     0,   765,     0,     0,
       0,     0,     0,     0,     0,     0,    26,     0,     0,     0,
   -1846,     0,     0,    27,     0,     0,     0,    28,     0, -1846,
       0,     0,  1464,     0, -1846,     0, -1846,    29,     0,     0,
       0, -1846,     0,  1420,     0,     0,     0,  1483,  1793,    30,
   -1846,     0,     0,    31,  1420, -1846,  1397,     0,  1717,     0,
       0,     0,     0,     0,  1420,  1420,  1420,     0,     0,     0,
       0,     0,  1398,  1420,     0,     0,     0,  1399, -1846,     0,
       0,  2204,     0,     0,  1405,     0,     0,     0,     0,    32,
       0,     0, -1846,     0,    33,     0,     0,     0,     0,  1400,
    1401,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,     0,  1402,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1420,  1384,    35,  1405,  1385,     0,     0,     0,  1386,     0,
    1125,  1389,  1390,  1391,     0,     0,    36,  1405,     0,   -39,
       0,     0,  1403,     0,     0,  1404,     0,     0,  1392,     0,
       0,     0,     0,     0,     0,     0,  1394,     0,  1420,  1405,
       0,     0,  1406,  1395,     0,     0, -1846,     0,     0,     0,
       0,     0,  1420,   766,     0,  2292,     0,  1420,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   768,  1396,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1846,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2318, -1846,
       0,     0,     0,     0,     0,     0,     0,  2322,     0,     0,
    2323,     0,     0,  2325,     0,     0,     0,     0,     0,     0,
       0,  1407,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1846,     0,
    2346,  2347,     0,     0,  1827,  1412,  1413,  1414,  1415,  1416,
    1417,     0,     0,     0,     0,  2357,     0,     0,     0,  1397,
       0,     0,     0,     0,  2364,     0,     0,  2367,     0,  2369,
       0,     0,     0,     0,     0,  1398,     0,  2373,     0,     0,
    1399,     0,     0,     0,     0,  2380,  2381, -1846,     0,  2384,
       0,     0,     0,     0,  1412,  1413,  1414,  1415,  1416,  1417,
       0, -1846,  1400,  1401,     0,     0,     0,     0,  1412,  1413,
    1414,  1415,  1416,  1417,     0,     0,  2423,  1402,     0,     0,
       0,     0,     0,  1408,     0,     0,  1409,  1410,  1411,     0,
    1412,  1413,  1414,  1415,  1416,  1417,     0,  1420,     0,     0,
       0,     0,  2437,  2053,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1403,  1420,     0,  1404,  2450,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1405,     0,  1420,  1406,  1717,  1717,     0,  2079,
       0,  1717,     0,     0,     0,  1420,     0,     0,  1420,     0,
       0,     0,     0,  1420,     0,     0,  1420,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1420,     0,
       0,     0,  1420,  1420,  1420,  1420,  1420,  1420,  1420,     0,
       0,     0,     0,     0,  1717,  1717,     0,  1420,  1420,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1420,
       0,     0,  1420,     0,     0,     0,     0,     0,     0,     0,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
       0,     0,     0,     0,  1407,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2602,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1420,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2615,  2616,     0,     0,     0,  2617,     0,     0,
       0,     0,  2620,     0,     0,  2623,  2624,     0,     0,     0,
    2628,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1408,     0,     0,  1409,
    1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   968,  1384,     0,     0,  1385,
       0,     0,     0,  1386,     0,     0,  1389,  1390,  1391,     0,
       0,     0,  1420,  1420,  1420,     0,     0,     0,     0,     0,
       0,     0,     0,  2692,     0,     0,     0,     0,     0,     0,
       0,  1394,     0,     0,     0,     0,     0,     0,  1395,  1383,
       0,     0,     0,     0,  1384,     0,     0,  1385,     0,     0,
    2711,  1386,  1387,  1388,  1389,  1390,  1391,     0,     0,     0,
       0,     0,     0,  1396,     0,     0,     0,     0,     0,     0,
       0,  1392,     0,     0,  1393,     0,     0,     0,     0,  1394,
    1384,     0,     0,  1385,     0,     0,  1395,  1386,  1387,  1388,
    1389,  1390,  1391,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1420,     0,     0,  1392,     0,     0,
    1420,  1396,     0,     0,     0,  1394,     0,     0,     0,     0,
       0,     0,  1395,  2079,  2079,  1420,     0,  1717,  1717,  1717,
    1717,  1717,     0,     0,  1717,  1717,  1717,  1717,  1717,  1717,
    1717,  1717,  1717,  1717,  2079,     0,     0,  1396,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1420,  1397,     0,  1420,     0,  1420,  2099,
       0,     0,  2079,  2079,     0,     0,     0,     0,  2765,  2766,
    1398,     0,  2767,     0,     0,  1399,  1420,  1717,  1717,  1420,
       0,  1420,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1400,  1401,     0,
       0,     0,  1397,     0,     0,     0,     0,     0,     0,     0,
    2809,  2810,  1402,     0,     0,     0,     0,     0,  1398,     0,
       0,  1384,     0,  1399,  1385,  2825,     0,     0,  1386,  1387,
    1388,  1389,  1390,  1391,     0,     0,     0,     0,  1397,     0,
       0,     0,  2834,     0,     0,  1400,  1401,     0,  1392,     0,
    1403,  2361,     0,  1404,  1398,     0,  1394,     0,  1420,  1399,
    1402,     0,     0,  1395,     0,     0,     0,  1405,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1400,  1401,     0,     0,     0,     0,     0,  1396,     0,
       0,     0,     0,     0,     0,     0,  1402,     0,  1403,     0,
       0,  1404,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1384,  1405,     0,  1385,  1406,     0,
       0,  1386,  1387,  1388,  1389,  1390,  1391,     0,     0,     0,
       0,  2896,     0,     0,  1403,     0,     0,  1404,     0,     0,
       0,  1392,     0,     0,     0,     0,  1420,     0,  1369,  1394,
       0,  1405,     0,     0,  1406,     0,  1395,     0,     0,  1407,
       0,     0,     0,   968,     0,     0,  2918,     0,     0,     0,
       0,     0,  1420,     0,     0,     0,  1420,  1420,     0,  1420,
    2937,  1396,  2079,  2079,  2079,  2079,  2079,     0,     0,  1397,
    2079,  2079,  2079,  2079,  2079,  2079,  2079,  2079,  2079,  2079,
    1420,  1420,     0,     0,     0,  1398,     0,  1407,     0,     0,
    1399,  1420,     0,     0,     0,     0,     0,     0,  1420,     0,
       0,  1420,     0,  1420,     0,     0,     0,  1420,     0,     0,
    2079,  2079,  1400,  1401,  1420,  1420,     0,     0,  1420,     0,
       0,     0,     0,  1407,     0,     0,     0,  1402,     0,     0,
       0,     0,     0,     0,     0,     0,  2809,     0,     0,     0,
    2981,  1408,     0,     0,  1409,  1410,  1411,     0,  1412,  1413,
    1414,  1415,  1416,  1417,     0,     0,     0,  1420,     0,     0,
       0,     0,  1397,     0,     0,  1403,     0,     0,  1404,     0,
    3010,  1420,     0,     0,     0,     0,     0,     0,  1398,     0,
       0,     0,  1405,  1399,  1420,  1406,     0,     0,     0,  1408,
       0,     0,  1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,
    1416,  1417,     0,  2809,     0,  1400,  1401,     0,  1717,     0,
       0,     0,     0,     0,   518,     0,     0,     0,     0,     0,
    1402,     0,     0,     0,     0,  1408,     0,     0,  1409,  1410,
    1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,
       0,     0,  1738,     0,  1384,     0,     0,  1385,     0,  3058,
    3058,  1386,  1387,  1388,  1389,  1390,  1391,     0,  1403,     0,
       0,  1404,     0,     0,     0,     0,     0,   519,     0,     0,
       0,  1392,     0,     0,  1407,  1405,     0,     0,  1406,  1394,
       0,     0,  3058,   520,     0,     0,  1395,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1396,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3058,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1420,   521,     0,     0,
    1717,     0,  1048,     0,     0,     0,     0,   522,  1049,  1420,
    1420,  1420,     0,     0,  1420,  1061,     0,  1420,  1420,   523,
       0,     0,  1420,     0,   524,     0,     0,  1407,     0,     0,
       0,     0,     0,     0,  1062,     0,  1408,     0,     0,  1409,
    1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,     0,
       0,   525,     0,  1738,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1397,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1063,  1420,     0,  1398,     0,
       0,     0,  2079,  1399,     0,     0,   526,     0,     0,     0,
     527,     0,     0,     0,     0,  1420,     0,     0,     0,     0,
       0,     0,     0,     0,  1050,  1400,  1401,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1408,
    1402,     0,  1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,
    1416,  1417,     0,     0,     0,     0,  2106,     0,     0,     0,
       0,     0,     0,  2079,  1717,     0,     0,     0,     0,  1420,
    1420,  1420,     0,   528,     0,     0,     0,     0,  1403,     0,
       0,  1404,     0,     0,     0,     0,  1064,   529,     0,     0,
       0,     0,     0,     0,     0,  1405,     0,     0,  1406,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1420,  1420,     0,     0,     0,     0,     0,
     530,     0,     0,   531,     0,     0,     0,     0,     0,  1420,
       0,   532,     0,     0,   533,     0,     0,  1065,  1420,     0,
       0,     0,     0,     0,     0,  1066,     0,     0,     0,     0,
       0,     0,     0,   534,     0,     0,     0,  1067,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   535,     0,     0,
       0,     0,     0,     0,   536,     0,     0,     0,  1051,     0,
       0,     0,  2079,   537,     0,     0,     0,  1407,  1068,   538,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1420,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   539,     0,     0,     0,     0,     0,
       0,     0,  1420,     0,     0,     0,     0,     0,     0,  1917,
       0,     0,     0,  1053,     0,  1070,     0,     0,     0,     0,
       0,  1420,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1071,     0,     0,
       0,     0,     0,  1918,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1073,     0,     0,
       0,     0,     0,     0,     0,  1420,     0,     0,     0,  1408,
       0,     0,  1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,
    1416,  1417,     0,     0,     0,     0,  2321,     0,     0,     0,
       0,     0,     0,     0,  1420,     0,     0,     0,     0,     0,
       0,     0,     0,  1085,   888,   583,   889,   890,   891,   892,
     893,  1055,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,  1086,
     102,   103,   104,     0,     0,     0,     0,   894,     0,     0,
     105,   106,  1420,   107,   108,   109,  1087,   111,   112,   113,
     114,   895,  1088,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,  1089,     0,   136,   137,
     138,   139,   140,   141,  1090,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,  1091,   153,   154,   155,
    1092,  1093,  1094,  1095,   908,   909,  1096,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,   913,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,  1097,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
    1098,     0,  1099,   214,   215,  1100,  1101,   218,     0,   219,
       0,   918,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,  1102,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,  1103,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,  1104,
    1105,   255,  1106,   257,   258,   259,   260,   261,   262,     0,
       0,   263,  1107,   265,  1108,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,  1109,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,  1110,   926,   297,   298,
     299,   300,   927,   301,   302,  1111,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,  1112,   319,  1113,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,  1114,   371,   372,   373,   935,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1115,   392,   393,   394,   395,
     396,  1116,   398,   399,   937,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,  1117,
     415,   938,   417,     0,   418,   419,     0,   420,  1118,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,  1119,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
    1120,     0,   448,   449,   450,   451,   452,   453,   946,  1121,
     455,  1122,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   947,     0,     0,     0,     0,     0,     0,
     948,   949,  1123,     0,     0,     0,     0,   951,     0,   952,
    1124,     0,     0,     0,   953,     0,   954,   955,    93,   888,
     583,   889,   890,   891,   892,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   894,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   895,   116,   896,   897,
       0,   119,   120,   121,   122,   123,   124,   898,   899,   125,
     126,   900,   901,   129,     0,   130,   131,   132,   133,   902,
       0,   903,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   904,   905,   906,   907,   908,
     909,   910,   161,   162,   163,   164,   165,   166,   167,   911,
     912,   170,   913,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   717,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   914,   199,   200,
     201,   202,   203,   915,   916,   205,     0,   206,   207,   917,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   918,   919,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   920,   921,
       0,   922,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   923,   924,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     925,   295,   926,   297,   298,   299,   300,   927,   301,   302,
     303,   304,   928,   929,   306,   930,   308,   309,   310,     0,
     311,   312,     0,     0,   931,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   932,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   933,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   934,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   935,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    26,   386,   387,   388,   389,   390,
     936,   392,   393,   394,   395,   396,   397,   398,   399,   937,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   938,   417,     0,   418,
     419,    31,   420,   421,   422,   423,   424,   425,   426,     0,
     939,   940,     0,     0,   429,   430,   941,   432,   942,   943,
     434,   435,   944,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   945,     0,   448,   449,   450,
     451,   452,   611,   946,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,    34,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   947,     0,
      35,     0,     0,     0,     0,   948,   949,     0,     0,     0,
       0,     0,   951,     0,   952,  2908,     0,     0,     0,   953,
       0,   954,   955,    93,   888,   583,   889,   890,   891,   892,
     893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   894,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   895,   116,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,   903,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     904,   905,   906,   907,   908,   909,   910,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,   913,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   918,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,   295,   926,   297,   298,
     299,   300,   927,   301,   302,   303,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   935,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    26,
     386,   387,   388,   389,   390,   936,   392,   393,   394,   395,
     396,   397,   398,   399,   937,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   938,   417,     0,   418,   419,    31,   420,   421,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,   944,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     945,     0,   448,   449,   450,   451,   452,   611,   946,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,    34,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   947,     0,    35,     0,     0,     0,     0,
     948,   949,     0,     0,     0,     0,     0,   951,     0,   952,
       0,     0,     0,     0,   953,     0,   954,   955,    93,   888,
     583,   889,   890,   891,   892,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   894,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   895,   116,   896,   897,
    1725,   119,   120,   121,   122,   123,   124,   898,   899,   125,
     126,   900,   901,   129,     0,   130,   131,   132,   133,   902,
       0,   903,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   904,   905,   906,   907,   908,
     909,   910,   161,   162,   163,   164,   165,   166,   167,   911,
     912,   170,   913,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   717,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   914,   199,   200,
     201,   202,   203,   915,   916,   205,     0,   206,   207,   917,
     209,     0,   210,     0,   211,   212,  1726,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   918,   919,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   920,   921,
       0,   922,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,  1727,   263,   264,   265,   266,
       0,   267,   268,   269,   923,   924,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     925,   295,   926,   297,   298,   299,   300,   927,   301,   302,
     303,   304,   928,   929,   306,   930,   308,   309,   310,     0,
     311,   312,     0,     0,   931,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   932,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   933,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   934,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   935,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     936,   392,   393,   394,   395,   396,   397,   398,   399,   937,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   938,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     939,   940,     0,  1728,   429,   430,   941,   432,   942,   943,
     434,   435,   944,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   945,     0,   448,   449,   450,
     451,   452,   453,   946,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   947,     0,
       0,     0,     0,     0,     0,   948,   949,     0,     0,     0,
       0,     0,   951,     0,   952,     0,     0,     0,     0,   953,
       0,   954,   955,    93,   888,   583,   889,   890,   891,   892,
     893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,  -608,
     102,   103,   104,     0,     0,     0,  -608,   894,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   895,   116,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,   903,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     904,   905,   906,   907,   908,   909,   910,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,   913,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   918,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,   295,   926,   297,   298,
     299,   300,   927,   301,   302,   303,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   935,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   936,   392,   393,   394,   395,
     396,   397,   398,   399,   937,   401,  -608,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   938,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,   944,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     945,     0,   448,   449,   450,   451,   452,   453,   946,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   947,     0,     0,     0,     0,     0,     0,
     948,   949,     0,     0,     0,     0,     0,   951,     0,   952,
       0,     0,     0,     0,   953,     0,   954,   955,    93,   888,
     583,   889,   890,   891,   892,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,  1460,   102,   103,   104,     0,     0,
       0,     0,   894,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   895,   116,   896,   897,
       0,   119,   120,   121,   122,   123,   124,   898,   899,   125,
     126,   900,   901,   129,     0,   130,   131,   132,   133,   902,
       0,   903,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   904,   905,   906,   907,   908,
     909,   910,   161,   162,   163,   164,   165,   166,   167,   911,
     912,   170,   913,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   717,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   914,   199,   200,
     201,   202,   203,   915,   916,   205,     0,   206,   207,   917,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   918,   919,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   920,   921,
       0,   922,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   923,   924,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     925,   295,   926,   297,   298,   299,   300,   927,   301,   302,
     303,   304,   928,   929,   306,   930,   308,   309,   310,     0,
     311,   312,     0,     0,   931,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   932,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   933,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   934,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   935,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     936,   392,   393,   394,   395,   396,   397,   398,   399,   937,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   938,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     939,   940,     0,     0,   429,   430,   941,   432,   942,   943,
     434,   435,   944,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   945,     0,   448,   449,   450,
     451,   452,   453,   946,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   947,     0,
       0,     0,     0,     0,     0,   948,   949,  1461,     0,     0,
       0,     0,   951,     0,   952,     0,     0,     0,     0,   953,
       0,   954,   955,    93,   888,   583,   889,   890,   891,   892,
     893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,  2796,
     102,   103,   104,     0,     0,     0,     0,   894,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   895,   116,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,   903,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,  2797,   155,
     904,   905,   906,   907,   908,   909,   910,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,   913,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,  2798,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,   295,   926,   297,   298,
     299,   300,   927,   301,   302,   303,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,  2799,   935,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   936,   392,   393,   394,   395,
     396,   397,   398,   399,   937,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   938,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,   944,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     945,     0,   448,   449,   450,   451,   452,   453,   946,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   947,     0,     0,     0,     0,     0,     0,
     948,   949,  2800,     0,     0,     0,     0,   951,     0,  2801,
       0,     0,     0,     0,   953,     0,   954,   955,    93,   888,
     583,   889,   890,   891,   892,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   894,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   895,   116,   896,   897,
       0,   119,   120,   121,   122,   123,   124,   898,   899,   125,
     126,   900,   901,   129,     0,   130,   131,   132,   133,   902,
       0,   903,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   904,   905,   906,   907,   908,
     909,   910,   161,   162,   163,   164,   165,   166,   167,   911,
     912,   170,   913,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   717,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   914,   199,   200,
     201,   202,   203,   915,   916,   205,     0,   206,   207,   917,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   918,   919,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   920,   921,
       0,   922,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   923,   924,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     925,   295,   926,   297,   298,   299,   300,   927,   301,   302,
     303,   304,   928,   929,   306,   930,   308,   309,   310,     0,
     311,   312,     0,     0,   931,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   932,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   933,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   934,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   935,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     936,   392,   393,   394,   395,   396,   397,   398,   399,   937,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   938,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     939,   940,     0,     0,   429,   430,   941,   432,   942,   943,
     434,   435,   944,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   945,     0,   448,   449,   450,
     451,   452,   453,   946,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   947,     0,
       0,     0,     0,     0,     0,   948,   949,   950,     0,     0,
       0,     0,   951,     0,   952,     0,     0,     0,     0,   953,
       0,   954,   955,    93,  1474,   583,   889,   890,   891,  1475,
     893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,  1476,
     102,   103,   104,     0,     0,     0,     0,   894,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   895,   116,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,   903,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     904,   905,   906,   907,   908,   909,   910,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,   913,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   918,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,   295,   926,   297,   298,
     299,   300,   927,   301,   302,   303,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   935,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   936,   392,   393,   394,   395,
     396,   397,   398,   399,   937,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   938,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,   944,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     945,     0,   448,   449,   450,   451,   452,   453,   946,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   947,     0,     0,     0,     0,     0,     0,
     948,   949,     0,     0,     0,     0,     0,   951,     0,   952,
       0,     0,     0,     0,   953,     0,   954,   955,    93,   888,
     583,   889,   890,   891,   892,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   894,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   895,   116,   896,   897,
       0,   119,   120,   121,   122,   123,   124,   898,   899,   125,
     126,   900,   901,   129,     0,   130,   131,   132,   133,   902,
       0,   903,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   904,   905,   906,   907,   908,
     909,   910,   161,   162,   163,   164,   165,   166,   167,   911,
     912,   170,   913,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   717,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   914,   199,   200,
     201,   202,   203,   915,   916,   205,     0,   206,   207,   917,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   918,   919,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   920,   921,
       0,   922,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   923,   924,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     925,   295,   926,   297,   298,   299,   300,   927,   301,   302,
     303,   304,   928,   929,   306,   930,   308,   309,   310,     0,
     311,   312,     0,     0,   931,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   932,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   933,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   934,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   935,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     936,   392,   393,   394,   395,   396,   397,   398,   399,   937,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   938,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     939,   940,     0,     0,   429,   430,   941,   432,   942,   943,
     434,   435,   944,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   945,     0,   448,   449,   450,
     451,   452,   453,   946,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   947,     0,
       0,     0,     0,     0,     0,   948,   949,     0,     0,     0,
       0,     0,   951,     0,   952,  1719,     0,     0,     0,   953,
       0,   954,   955,  1085,   888,   583,   889,   890,   891,   892,
     893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   894,     0,     0,
     105,   106,     0,   107,   108,   109,  1087,   111,   112,   113,
     114,   895,  1088,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,  1089,     0,   136,   137,
     138,   139,   140,   141,  1090,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,  1091,   153,   154,   155,
    1092,  1093,  1094,  1095,   908,   909,  1096,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,   913,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
    1098,     0,  1099,   214,   215,  1100,  1101,   218,     0,   219,
       0,   918,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,  1102,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,  1103,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,  1104,
    1105,   255,  1106,   257,   258,   259,   260,   261,   262,     0,
       0,   263,  1107,   265,  1108,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,  1109,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,  1110,   926,   297,   298,
     299,   300,   927,   301,   302,  1111,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,  1112,   319,  1113,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,  1114,   371,   372,   373,   935,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1115,   392,   393,   394,   395,
     396,  1116,   398,   399,   937,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,  1117,
     415,   938,   417,     0,   418,   419,     0,   420,  1118,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,  1119,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
    1120,     0,   448,   449,   450,   451,   452,   453,   946,  1943,
     455,  1122,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   947,     0,     0,     0,     0,     0,     0,
     948,   949,     0,     0,     0,     0,     0,   951,     0,   952,
       0,     0,     0,     0,   953,     0,   954,   955,  1085,   888,
     583,   889,   890,   891,   892,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   894,     0,     0,   105,   106,     0,   107,   108,
     109,  1087,   111,   112,   113,   114,   895,  1088,   896,   897,
       0,   119,   120,   121,   122,   123,   124,   898,   899,   125,
     126,   900,   901,   129,     0,   130,   131,   132,   133,   902,
       0,  1089,     0,   136,   137,   138,   139,   140,   141,  1090,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,  1091,   153,   154,   155,  1092,  1093,  1094,  1095,   908,
     909,  1096,   161,   162,   163,   164,   165,   166,   167,   911,
     912,   170,   913,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   717,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   914,   199,   200,
     201,   202,   203,   915,   916,   205,     0,   206,   207,   917,
     209,     0,   210,     0,   211,  1098,     0,  1099,   214,   215,
    1100,  1101,   218,     0,   219,     0,   918,   919,   222,     0,
     223,   224,   225,   226,   227,   228,   229,  1102,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,  1103,   243,   244,   245,   246,   247,   248,   920,   921,
       0,   922,     0,   252,  1104,  1105,   255,  1106,   257,   258,
     259,   260,   261,   262,     0,     0,   263,  1107,   265,  1108,
       0,   267,   268,   269,   923,   924,   270,   271,   272,   273,
     274,  1109,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     925,  1110,   926,   297,   298,   299,   300,   927,   301,   302,
    1111,   304,   928,   929,   306,   930,   308,   309,   310,     0,
     311,   312,     0,     0,   931,   314,   315,     0,     0,   316,
     317,  1112,   319,  1113,   932,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   933,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   934,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,  1114,   371,
     372,   373,   935,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
    1115,   392,   393,   394,   395,   396,  1116,   398,   399,   937,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,  1117,   415,   938,   417,     0,   418,
     419,     0,   420,  1118,   422,   423,   424,   425,   426,     0,
     939,   940,     0,     0,   429,   430,   941,   432,   942,   943,
     434,   435,  1119,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,  1120,     0,   448,   449,   450,
     451,   452,   453,   946,     0,   455,  1122,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   947,     0,
       0,     0,     0,     0,     0,   948,   949,     0,     0,     0,
       0,     0,   951,     0,   952,  1986,     0,     0,     0,   953,
       0,   954,   955,    93,   888,   583,   889,   890,   891,   892,
     893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   894,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   895,   116,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,   903,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     904,   905,   906,   907,   908,   909,   910,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,   913,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
     212,  1726,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   918,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,   295,   926,   297,   298,
     299,   300,   927,   301,   302,   303,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   935,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   936,   392,   393,   394,   395,
     396,   397,   398,   399,   937,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   938,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,   944,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     945,     0,   448,   449,   450,   451,   452,   453,   946,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   947,     0,     0,     0,     0,     0,     0,
     948,   949,     0,     0,     0,     0,     0,   951,     0,   952,
       0,     0,     0,     0,   953,     0,   954,   955,    93,   888,
     583,   889,   890,   891,   892,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   894,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   895,   116,   896,   897,
       0,   119,   120,   121,   122,   123,   124,   898,   899,   125,
     126,   900,   901,   129,     0,   130,   131,   132,   133,   902,
       0,   903,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   904,   905,   906,   907,   908,
     909,   910,   161,   162,   163,   164,   165,   166,   167,   911,
     912,   170,   913,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   717,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   914,   199,   200,
     201,   202,   203,   915,   916,   205,     0,   206,   207,   917,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   918,   919,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   920,   921,
       0,   922,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   923,   924,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     925,   295,   926,   297,   298,   299,   300,   927,   301,   302,
     303,   304,   928,   929,   306,   930,   308,   309,   310,     0,
     311,   312,     0,     0,   931,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   932,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   933,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   934,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   935,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     936,   392,   393,   394,   395,   396,   397,   398,   399,   937,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   938,   417,     0,   418,
     419,  2291,   420,   421,   422,   423,   424,   425,   426,     0,
     939,   940,     0,     0,   429,   430,   941,   432,   942,   943,
     434,   435,   944,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   945,     0,   448,   449,   450,
     451,   452,   453,   946,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   947,     0,
       0,     0,     0,     0,     0,   948,   949,     0,     0,     0,
       0,     0,   951,     0,   952,     0,     0,     0,     0,   953,
       0,   954,   955,    93,   888,   583,   889,   890,   891,   892,
     893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   894,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   895,   116,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,   903,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     904,   905,   906,   907,   908,   909,   910,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,   913,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   918,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,   295,   926,   297,   298,
     299,   300,   927,   301,   302,   303,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   935,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   936,   392,   393,   394,   395,
     396,   397,   398,   399,   937,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   938,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,   944,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     945,     0,   448,   449,   450,   451,   452,   453,   946,     0,
     455,   456,   457,   458,   459,   460,   461,     0,  2383,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   947,     0,     0,     0,     0,     0,     0,
     948,   949,     0,     0,     0,     0,     0,   951,     0,   952,
       0,     0,     0,     0,   953,     0,   954,   955,    93,   888,
     583,   889,   890,   891,   892,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   894,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   895,   116,   896,   897,
       0,   119,   120,   121,   122,   123,   124,   898,   899,   125,
     126,   900,   901,   129,     0,   130,   131,   132,   133,   902,
       0,   903,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   904,   905,   906,   907,   908,
     909,   910,   161,   162,   163,   164,   165,   166,   167,   911,
     912,   170,   913,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   717,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   914,   199,   200,
     201,   202,   203,   915,   916,   205,     0,   206,   207,   917,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   918,   919,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   920,   921,
       0,   922,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   923,   924,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     925,   295,   926,   297,   298,   299,   300,   927,   301,   302,
     303,   304,   928,   929,   306,   930,   308,   309,   310,     0,
     311,   312,     0,     0,   931,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   932,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   933,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   934,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   935,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     936,   392,   393,   394,   395,   396,   397,   398,   399,   937,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   938,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     939,   940,     0,     0,   429,   430,   941,   432,   942,   943,
     434,   435,   944,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   945,     0,   448,   449,   450,
     451,   452,   453,   946,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   947,     0,
       0,     0,     0,     0,     0,   948,   949,     0,     0,     0,
       0,     0,   951,     0,   952,     0,     0,     0,     0,   953,
       0,   954,   955,  1085,   888,   583,   889,   890,   891,   892,
     893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   894,     0,     0,
     105,   106,     0,   107,   108,   109,  1087,   111,   112,   113,
     114,   895,  1088,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,  1089,     0,   136,   137,
     138,   139,   140,   141,  1090,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,  1091,   153,   154,   155,
    1092,  1093,  1094,  1095,   908,   909,  1096,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,   913,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
    1098,     0,  1099,   214,   215,  1100,  1101,   218,     0,   219,
       0,   918,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,  1102,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,  1103,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,  1104,
    1105,   255,  1106,   257,   258,   259,   260,   261,   262,     0,
       0,   263,  1107,   265,  1108,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,  1109,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,  1110,   926,   297,   298,
     299,   300,   927,   301,   302,  1111,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,  1112,   319,  1113,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,  1114,   371,   372,   373,   935,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1115,   392,   393,   394,   395,
     396,  1116,   398,   399,   937,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,  1117,
     415,   938,   417,     0,   418,   419,     0,   420,  1118,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,  1119,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
    1120,     0,   448,   449,   450,   451,   452,   453,   946,     0,
     455,  1122,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   947,     0,     0,     0,     0,     0,     0,
     948,   949,     0,     0,     0,     0,     0,   951,     0,   952,
       0,     0,     0,     0,   953,     0,   954,   955,    93,   888,
     583,   889,   890,   891,   892,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   894,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   895,   116,   896,   897,
       0,   119,   120,   121,   122,   123,   124,   898,   899,   125,
     126,   900,   901,   129,     0,   130,   131,   132,   133,   902,
       0,   903,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   904,   905,   906,   907,   908,
     909,   910,   161,   162,   163,   164,   165,   166,   167,   911,
     912,   170,   913,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   717,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   914,   199,   200,
     201,   202,   203,   915,   916,   205,     0,   206,   207,   917,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   918,   919,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   920,   921,
       0,   922,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   923,   924,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     925,   295,   926,   297,   298,   299,   300,   927,   301,   302,
     303,   304,   928,   929,   306,   930,   308,   309,   310,     0,
     311,   312,     0,     0,   931,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   932,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   933,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   934,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   935,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     936,   392,   393,   394,   395,   396,   397,   398,   399,   937,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   938,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     939,   940,     0,     0,   429,   430,   941,   432,   942,   943,
     434,   435,   944,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   945,     0,   448,   449,   450,
     451,   452,   453,   946,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   947,     0,
       0,     0,     0,     0,     0,  1479,  1480,     0,     0,     0,
       0,     0,   951,     0,   952,     0,     0,     0,     0,   953,
       0,   954,   955,    93,  1852,   583,   889,   890,   891,   892,
     893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   894,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   895,   116,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,   903,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     904,   905,   906,   907,   908,   909,   910,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,   913,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   918,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,   295,   926,   297,   298,
     299,   300,   927,   301,   302,   303,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   935,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   936,   392,   393,   394,   395,
     396,   397,   398,   399,   937,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   938,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,   944,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     945,     0,   448,   449,   450,   451,   452,   453,   946,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   947,     0,     0,     0,     0,     0,     0,
     948,   949,     0,     0,     0,     0,     0,   951,     0,   952,
       0,     0,     0,     0,   953,     0,   954,   955,    93,   888,
     583,   889,   890,   891,   892,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   894,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   895,   116,   896,   897,
       0,   119,   120,   121,   122,   123,   124,   898,   899,   125,
     126,   900,   901,   129,     0,   130,   131,   132,   133,   902,
       0,   903,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   904,   905,   906,   907,   908,
     909,   910,   161,   162,   163,   164,   165,   166,   167,   911,
     912,   170,   913,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   717,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   914,   199,   200,
     201,   202,   203,   915,   916,   205,     0,   206,   207,   917,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   918,   919,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   920,   921,
       0,   922,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   923,   924,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     925,   295,   926,   297,   298,   299,   300,   927,   301,   302,
     303,   304,   928,   929,   306,   930,   308,   309,   310,     0,
     311,   312,     0,     0,   931,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   932,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   933,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   934,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   935,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     936,   392,   393,   394,   395,   396,   397,   398,   399,   937,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   938,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     939,   940,     0,     0,   429,   430,   941,   432,   942,   943,
     434,   435,   944,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   945,     0,   448,   449,   450,
     451,   452,   453,   946,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   947,     0,
       0,     0,     0,     0,     0,   948,   949,     0,     0,     0,
       0,     0,   951,     0,  2098,     0,     0,     0,     0,   953,
       0,   954,   955,    93,   888,   583,   889,   890,   891,   892,
     893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   894,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   895,   116,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,   903,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,  2797,   155,
     904,   905,   906,   907,   908,   909,   910,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,   913,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,  2798,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,   295,   926,   297,   298,
     299,   300,   927,   301,   302,   303,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,  2799,   935,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   936,   392,   393,   394,   395,
     396,   397,   398,   399,   937,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   938,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,   944,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     945,     0,   448,   449,   450,   451,   452,   453,   946,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   947,     0,     0,     0,     0,     0,     0,
     948,   949,     0,     0,     0,     0,     0,   951,     0,  2801,
       0,     0,     0,     0,   953,     0,   954,   955,    93,   888,
     583,   889,   890,   891,   892,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   894,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,  3055,   895,   116,   896,   897,
       0,   119,   120,   121,   122,   123,   124,   898,   899,   125,
     126,   900,   901,   129,     0,   130,   131,   132,   133,   902,
       0,   903,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,  3056,   904,   905,   906,   907,   908,
     909,   910,   161,   162,   163,   164,   165,   166,   167,   911,
     912,   170,   913,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   717,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   914,   199,   200,
     201,   202,   203,   915,   916,   205,     0,   206,   207,   917,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   918,   919,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   920,   921,
       0,   922,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   923,   924,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     925,   295,   926,   297,   298,   299,   300,   927,   301,   302,
     303,   304,   928,   929,   306,   930,   308,   309,   310,     0,
     311,   312,     0,     0,   931,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   932,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   933,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   934,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   935,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     936,   392,   393,   394,   395,   396,   397,   398,   399,   937,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   938,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     939,   940,     0,     0,   429,   430,   941,   432,   942,   943,
     434,   435,   944,   437,   438,  3057,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   945,     0,   448,   449,   450,
     451,   452,   453,   946,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   947,     0,
       0,     0,     0,     0,     0,   948,   949,     0,     0,     0,
       0,     0,   951,     0,   952,     0,     0,     0,     0,   953,
       0,   954,   955,    93,   888,   583,   889,   890,   891,   892,
     893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   894,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   895,   116,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,   903,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,  3056,
     904,   905,   906,   907,   908,   909,   910,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,   913,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   918,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,   295,   926,   297,   298,
     299,   300,   927,   301,   302,   303,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   935,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   936,   392,   393,   394,   395,
     396,   397,   398,   399,   937,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   938,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,   944,   437,   438,
    3057,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     945,     0,   448,   449,   450,   451,   452,   453,   946,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   947,     0,     0,     0,     0,     0,     0,
     948,   949,     0,     0,     0,     0,     0,   951,     0,   952,
       0,     0,     0,     0,   953,     0,   954,   955,    93,   888,
     583,   889,   890,   891,   892,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   894,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113, -1846,   895,   116,   896,   897,
       0,   119,   120,   121,   122,   123,   124,   898,   899,   125,
     126,   900,   901,   129,     0,   130,   131,   132,   133,   902,
       0,   903,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,  3056,   904,   905,   906,   907,   908,
     909,   910,   161,   162,   163,   164,   165,   166,   167,   911,
     912,   170,   913,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   717,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   914,   199,   200,
     201,   202,   203,   915,   916,   205,     0,   206,   207,   917,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216, -1846,   218,     0,   219,     0,   918,   919,   222,     0,
     223,   224,   225,   226,   227,   228,   229, -1846,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   920,   921,
       0,   922,     0,   252,     0,     0,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265, -1846,
       0,   267,   268,   269,   923,   924,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     925,   295,   926,   297,   298,   299,   300,     0,   301,   302,
       0,   304,   928,   929,   306,   930,   308,   309,   310,     0,
     311,   312,     0,     0,   931,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   932,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   933,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   934,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   935,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     936,   392,   393,   394,   395,   396, -1846,   398,   399,   937,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   938,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     939,   940,     0,     0,   429,   430,   941,   432,   942,   943,
     434,   435,   944,   437,   438,  3057,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   945,     0,   448,   449,   450,
     451,   452,   453,   946,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483, -1846,     0,
       0,     0,     0,     0,     0,   948,   949,     0,     0,     0,
       0,     0,   951,     0,   952,     0,     0,     0,     0,   953,
       0,   954,   955,    93,   888,   583,   889,   890,   891,   892,
     893,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   895,   116,   896,   897,     0,   119,   120,   121,   122,
     123,   124,   898,   899,   125,   126,   900,   901,   129,     0,
     130,   131,   132,   133,   902,     0,   903,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     904,   905,   906,   907,   908,   909,   910,   161,   162,   163,
     164,   165,   166,   167,   911,   912,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   914,   199,   200,   201,   202,   203,   915,   916,
     205,     0,   206,   207,   917,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   918,   919,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   920,   921,     0,   922,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   923,
     924,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   925,   295,   926,   297,   298,
     299,   300,     0,   301,   302,   303,   304,   928,   929,   306,
     930,   308,   309,   310,     0,   311,   312,     0,     0,   931,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   932,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   933,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   934,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   936,   392,   393,   394,   395,
     396,   397,   398,   399,   937,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   938,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   939,   940,     0,     0,   429,
     430,   941,   432,   942,   943,   434,   435,   944,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     945,     0,   448,   449,   450,   451,   452,   453,   946,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,     0,
    1712,  1713,     0,     0,    93,   888,   583,   889,   890,  1714,
     892,   893,     0,     0,     0,     0,   954,   955,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,   110,   111,   112,
     113,   114,   895,   116,   896,   897,     0,   119,   120,   121,
     122,   123,   124,   898,   899,   125,   126,   900,   901,   129,
       0,   130,   131,   132,   133,   902,     0,   903,     0,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   904,   905,   906,   907,   908,   909,   910,   161,   162,
     163,   164,   165,   166,   167,   911,   912,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   717,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   914,   199,   200,   201,   202,   203,   915,
     916,   205,     0,   206,   207,   917,   209,     0,   210,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   918,   919,   222,     0,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,   242,   243,   244,
     245,   246,   247,   248,   920,   921,     0,   922,     0,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
       0,     0,   263,   264,   265,   266,     0,   267,   268,   269,
     923,   924,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   925,   295,   926,   297,
     298,   299,   300,     0,   301,   302,   303,   304,   928,   929,
     306,   930,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   317,   318,   319,   320,
     932,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   933,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   934,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,   370,   371,   372,   373,  1838,  1839,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   936,   392,   393,   394,
     395,   396,   397,   398,   399,   937,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   938,   417,     0,   418,   419,     0,   420,   421,
     422,   423,   424,   425,   426,     0,   939,   940,     0,     0,
     429,   430,   941,   432,   942,   943,   434,   435,   944,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,   945,     0,   448,   449,   450,   451,   452,   453,   946,
       0,   455,   456,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     0,     0,     0,     0,     0,     0,
       0,  1840,  1841,     0,     0,     0,     0,     0,     0,     0,
    1714,     0,     0,     0,     0,     0,     0,   954,   955,    93,
     888,   583,   889,   890,   891,   892,   893,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113,   114,   895,   116,   896,
     897,     0,   119,   120,   121,   122,   123,   124,   898,   899,
     125,   126,   900,   901,   129,     0,   130,   131,   132,   133,
     902,     0,   903,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   904,   905,   906,   907,
     908,   909,   910,   161,   162,   163,   164,   165,   166,   167,
     911,   912,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   717,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   914,   199,
     200,   201,   202,   203,   915,   916,   205,     0,   206,   207,
     917,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   918,   919,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   920,
     921,     0,   922,     0,   252,     0,   254,   255,   256,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   923,   924,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   925,   295,   926,   297,   298,   299,   300,     0,   301,
     302,   303,   304,   928,   929,   306,   930,   308,   309,   310,
       0,   311,   312,     0,     0,   931,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   932,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   933,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   934,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   936,   392,   393,   394,   395,   396,   397,   398,   399,
     937,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   938,   417,     0,
     418,   419,     0,   420,   421,   422,   423,   424,   425,   426,
       0,   939,   940,     0,     0,   429,   430,   941,   432,   942,
     943,   434,   435,   944,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   945,     0,   448,   449,
     450,   451,   452,   453,   946,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     0,
       0,     0,     0,     0,     0,     0,  1712,  1713,     0,     0,
       0,     0,     0,     0,     0,  1714,     0,     0,     0,     0,
       0,     0,   954,   955,    93,   888,   583,   889,   890,   891,
     892,   893,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,   894,     0,
       0,   105,   106,     0,   107,   108,   109,   110,   111,   112,
     113,     0,   895,   116,   896,   897,     0,   119,   120,   121,
     122,   123,   124,   898,   899,   125,   126,   900,   901,   129,
       0,   130,   131,   132,   133,   902,     0,   903,     0,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   904,   905,   906,   907,   908,   909,   910,   161,   162,
     163,   164,   165,   166,   167,   911,   912,   170,   913,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   717,   186,   187,
       0,   188,   189,   190,     0,   191,     0,   193,     0,   194,
     195,   196,   197,   914,   199,   200,   201,   202,   203,   915,
     916,   205,     0,   206,   207,   917,   209,     0,   210,     0,
     211,   212,     0,   213,   214,   215,   216,     0,   218,     0,
     219,     0,   918,   919,   222,     0,   223,   224,   225,   226,
     227,   228,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,   242,   243,   244,
     245,   246,   247,   248,   920,   921,     0,   922,     0,   252,
       0,     0,   255,   256,   257,   258,   259,   260,   261,   262,
       0,     0,   263,   264,   265,     0,     0,   267,   268,   269,
     923,   924,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   925,   295,   926,   297,
     298,   299,   300,     0,   301,   302,     0,   304,   928,   929,
     306,   930,   308,   309,   310,     0,   311,   312,     0,     0,
     931,   314,   315,     0,     0,   316,   317,   318,   319,   320,
     932,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   933,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   934,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,   370,   371,   372,   373,   935,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   936,   392,   393,   394,
     395,   396,     0,   398,   399,   937,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   938,   417,     0,   418,   419,     0,   420,   421,
     422,   423,   424,   425,   426,     0,   939,   940,     0,     0,
     429,   430,   941,   432,   942,   943,   434,   435,   944,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,   945,     0,   448,   449,   450,   451,   452,   453,   946,
       0,   455,   456,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     0,     0,     0,     0,     0,     0,
       0,   948,   949,   699,     0,     0,     0,     0,   951,     0,
     952,     0,     0,     0,     0,   953,     0,   954,   955,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,   700,   111,   112,   113,
       0,   701,   702,   703,   704,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   705,   706,   129,     0,
     130,   131,   132,   133,     0,     0,   707,     0,   136,   137,
     138,   139,   140,   141,   708,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   709,   153,   154,   155,
     710,   711,   712,   713,     0,     0,   714,   161,   162,   163,
     164,   165,   166,   167,   715,   716,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   717,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,     0,   199,   200,   201,   202,   203,     0,     0,
     205,     0,   206,   207,   718,   209,     0,   210,     0,   211,
     719,     0,   720,   214,   215,     0,   721,   218,     0,   219,
       0,     0,     0,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   723,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   724,     0,   244,   245,
     246,   247,   248,   725,   726,     0,   727,     0,   252,   728,
     729,   255,   730,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   731,   265,   732,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   733,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   734,   735,   736,   297,   298,
     299,     0,     0,   301,   302,   737,   304,     0,     0,   306,
     738,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,   739,   319,   740,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,     0,   335,   336,     0,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   741,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   742,   371,   372,   373,   743,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   744,   392,   745,   394,   395,
     396,   746,   398,   399,   747,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   748,
     415,     0,   417,     0,   418,   419,     0,   420,   749,   422,
     423,   424,   425,   426,     0,   750,   751,     0,     0,   429,
     430,     0,   432,     0,     0,   434,   435,   752,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     753,     0,   448,   449,   450,   451,   452,     0,   754,     0,
     455,   755,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,     0,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   480,
     481,   482,   483,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
    -928,     0,     0,  -928,  2401,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,  -275,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,  -275,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,  -275,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,  -275,   257,
     258,   259,   260,   261,   262,     0,     0,   263,  -275,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,  -275,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,  -275,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,  -275,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    93,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1017,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,   899,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     902,     0,   903,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   904,   905,   906,   907,
     908,   909,   910,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   915,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,  2144,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   923,   924,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,   304,     0,   929,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   615,   313,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   932,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   933,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   370,
     371,   372,   373,   374,  2145,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    26,   386,   387,   388,   389,
     390,   936,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   938,   417,     0,
     418,   419,    31,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   941,   432,   942,
       0,   434,   435,   944,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   945,     0,   448,   449,
     450,   451,   452,   611,   454,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,    34,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     0,
       0,    35,   785,  1307,   583,     0,     0,     0,   892,     0,
       0,     0,     0,     0,     0,  2146,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   786,   111,   112,   113,   787,
     788,   789,   790,   791,     0,   119,   120,   121,   122,   123,
     124,     0,     0,   125,   126,   792,   793,   129,     0,   130,
     131,   132,   133,   794,     0,   795,     0,   136,   137,   138,
     139,   140,   141,   796,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   797,   153,   154,   155,   798,
     799,   800,   801,     0,     0,   802,   161,   162,   163,   164,
     165,   166,   167,   803,   804,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   805,   199,   200,   201,   202,   203,   806,  1308,   205,
       0,   206,   207,   807,   209,     0,   210,     0,   211,   808,
       0,   809,   214,   215,   810,   811,   218,     0,   219,     0,
     812,   813,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   814,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   815,   816,   244,   245,   246,
     247,   248,   817,   818,     0,   819,     0,   252,   820,   821,
     255,   822,   257,   258,   259,   260,   261,   262,     0,     0,
     263,   823,   265,   824,     0,   267,   268,   269,     0,     0,
     270,   271,   272,   273,   274,   825,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   826,   827,   828,   297,   298,   299,
     829,     0,   301,   302,   830,   304,     0,   831,   306,   832,
     308,   309,   310,     0,   311,   312,  1309,     0,   313,   314,
     315,     0,     0,   316,   833,   834,   319,   835,   836,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   837,   335,   336,   838,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     839,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,   840,   371,   372,   373,   841,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   842,   392,   843,   394,   395,   396,
     844,   398,   399,   845,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   846,   415,
     847,   417,     0,   418,   419,     0,   420,   848,   422,   423,
     424,   425,   426,     0,   849,   850,     0,     0,   429,   430,
     851,   432,   852,  1310,   434,   435,   853,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,   854,
       0,   448,   449,   450,   451,   452,  1202,   856,     0,   455,
     857,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   858,   859,   860,
     861,   862,   863,   864,   865,   866,   867,   868,   480,   481,
     482,   483,    93,     0,   508,     0,     0,     0,     0,  1311,
    1312,  2022,     0,     0,     0,     0,     0,     0,  2023,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,   899,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   902,     0,   903,     0,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   904,
     905,   906,   907,   908,   909,   910,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   915,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,  2144,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   923,   924,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,     0,   301,   302,   303,   304,     0,   929,   306,   307,
     308,   309,   310,     0,   311,   312,     0,   615,   313,   314,
     315,     0,     0,   316,   317,   318,   319,   320,   932,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   933,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,   370,   371,   372,   373,   374,  2145,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   936,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     938,   417,     0,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     941,   432,   942,     0,   434,   435,   944,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,   945,
       0,   448,   449,   450,   451,   452,   611,   454,     0,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   785,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2146,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     3,     4,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   786,   111,   112,   113,   787,
     788,   789,   790,   791,     0,   119,   120,   121,   122,   123,
     124,     0,     0,   125,   126,   792,   793,   129,     0,   130,
     131,   132,   133,   794,     0,   795,     0,   136,   137,   138,
     139,   140,   141,   796,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   797,   153,   154,   155,   798,
     799,   800,   801,     0,     0,   802,   161,   162,   163,   164,
     165,   166,   167,   803,   804,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   805,   199,   200,   201,   202,   203,   806,     0,   205,
       0,   206,   207,   807,   209,     0,   210,     0,   211,   808,
       0,   809,   214,   215,   810,   811,   218,     0,   219,     0,
     812,   813,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   814,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   815,   816,   244,   245,   246,
     247,   248,   817,   818,     0,   819,     0,   252,   820,   821,
     255,   822,   257,   258,   259,   260,   261,   262,     0,     0,
     263,   823,   265,   824,     0,   267,   268,   269,     0,     0,
     270,   271,   272,   273,   274,   825,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   826,   827,   828,   297,   298,   299,
     829,     0,   301,   302,   830,   304,     0,   831,   306,   832,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   833,   834,   319,   835,   836,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   837,   335,   336,   838,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     839,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,   840,   371,   372,   373,   841,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    26,   386,
     387,   388,   389,   390,   842,   392,   843,   394,   395,   396,
     844,   398,   399,   845,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   846,   415,
     847,   417,     0,   418,   419,    31,   420,   848,   422,   423,
     424,   425,   426,     0,   849,   850,     0,     0,   429,   430,
     851,   432,   852,     0,   434,   435,   853,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,   854,
       0,   448,   449,   450,   451,   452,   855,   856,     0,   455,
     857,   457,   458,   459,   460,   461,     0,     0,   462,     0,
      34,   463,   464,   465,   466,   467,   468,   858,   859,   860,
     861,   862,   863,   864,   865,   866,   867,   868,   480,   481,
     482,   483,    93,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,   899,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   902,     0,   903,     0,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   904,
     905,   906,   907,   908,   909,   910,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   915,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,     0,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   923,   924,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,     0,   301,   302,   303,   304,     0,   929,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,   318,   319,   320,   932,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   933,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,   370,   371,   372,   373,   374,  2145,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   936,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     938,   417,     0,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     941,   432,   942,     0,   434,   435,   944,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,   945,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    93,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,   899,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   902,     0,   903,     0,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   904,
     905,   906,   907,   908,   909,   910,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   915,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,     0,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   923,   924,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,     0,   301,   302,   303,   304,     0,   929,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,   318,   319,   320,   932,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   933,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   936,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     938,   417,     0,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     941,   432,   942,     0,   434,   435,   944,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,   945,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   507,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2819,     0,
      94,    95,    96,    97,    98,    99,   100,   101,   643,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,     0,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   134,     0,     0,     0,   136,   137,   138,
     139,   140,   141,     0,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,     0,   153,   154,   155,     0,
       0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,     0,
       0,     0,   214,   215,   510,     0,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,     0,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,     0,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
     255,     0,   257,   258,   259,   260,   261,   262,     0,     0,
     263,     0,   265,     0,     0,   267,   268,   269,     0,     0,
     270,   271,   272,   273,   274,   511,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,     0,   296,   297,   298,   299,
     300,     0,   301,   302,     0,   304,     0,   305,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,     0,   319,     0,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    26,   386,
     387,   388,   389,   390,     0,   392,   393,   394,   395,   396,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   513,   415,
     416,   417,     0,   418,   419,    31,   420,     0,   422,   423,
     424,   425,   426,     0,   644,   428,     0,     0,   645,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,   452,   611,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
      34,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   507,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,     0,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   134,     0,     0,     0,   136,   137,   138,
     139,   140,   141,     0,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,     0,   153,   154,   155,     0,
       0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,     0,
       0,     0,   214,   215,   510,     0,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,     0,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,     0,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
     255,     0,   257,   258,   259,   260,   261,   262,     0,     0,
     263,     0,   265,     0,     0,   267,   268,   269,     0,     0,
     270,   271,   272,   273,   274,   511,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,     0,   296,   297,   298,   299,
     300,     0,   301,   302,     0,   304,     0,   305,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,     0,   319,     0,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    26,   386,
     387,   388,   389,   390,     0,   392,   393,   394,   395,   396,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   513,   415,
     416,   417,     0,   418,   419,    31,   420,     0,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,   452,   611,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
      34,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     0,   507,    35,   508,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   510,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   511,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   513,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   507,     0,   508,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   996,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   510,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   511,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   513,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   507,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2658,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   510,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   511,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   513,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   507,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1733,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   510,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   511,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   513,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   507,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1876,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   510,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   511,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   513,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     0,     0,  2506,  1307,   583,     0,     0,
    1693,   892,     0,     0,     0,     0,     0,  1694,     0,  2630,
    1695,  1696,  1697,    94,    95,    96,    97,    98,    99,   100,
     101,  1135,   102,   103,   104,  1136,  1137,  1138,  1139,  1140,
    1141,  1142,   105,   106,  1143,   107,   108,   109,  2507,   111,
     112,   113,     0,   701,  2508,   703,   704,  1144,   119,   120,
     121,   122,   123,   124,  1145,  1146,   125,   126,   705,   706,
     129,  1147,   130,   131,   132,   133,     0,  1148,  2509,  1149,
     136,   137,   138,   139,   140,   141,  2510,   143,   144,   145,
    1150,   146,   147,   148,   149,   150,   151,  1151,  2511,   153,
     154,   155,  2512,  2513,  2514,  2515,  1152,  1153,  2516,   161,
     162,   163,   164,   165,   166,   167,   715,   716,   170,  1154,
     171,  1155,   172,   173,   174,   175,   176,   177,  1156,   178,
     179,   180,   181,   182,  1157,  1158,   183,   184,   717,   186,
     187,  1159,   188,   189,   190,  1160,   191,   192,   193,  1161,
     194,   195,   196,   197,     0,   199,   200,   201,   202,   203,
       0,  1162,   205,  1163,   206,   207,   718,   209,  1164,   210,
    1165,   211,  2517,  1166,  2518,   214,   215,  2519,  2520,   218,
    1167,   219,  1168,     0,     0,   222,  1169,   223,   224,   225,
     226,   227,   228,   229,  2521,   231,   232,   233,   234,  1170,
     235,   236,   237,   238,   239,   240,  1171,   241,  2522,     0,
     244,   245,   246,   247,   248,   725,   726,  1172,   727,  1173,
     252,  2523,  2524,   255,  2525,   257,   258,   259,   260,   261,
     262,  1174,  1175,   263,  2526,   265,  2527,  1176,   267,   268,
     269,  1177,  1178,   270,   271,   272,   273,   274,  2528,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   734,  2529,   736,
     297,   298,   299,  2530,  1179,   301,   302,  2531,   304,  1180,
       0,   306,   738,   308,   309,   310,  1181,   311,   312,  1182,
    1183,  2532,   314,   315,  1184,  1185,   316,     0,  2533,   319,
    2534,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1186,   332,   333,     0,   335,   336,     0,   338,
     339,   340,  1187,   341,   342,   343,   344,   345,   346,  1188,
     347,   348,   349,   741,   351,   352,   353,   354,  1189,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,  1190,   368,   369,  2535,   371,   372,   373,   743,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,  1191,   386,   387,   388,   389,   390,  2536,   392,  2537,
     394,   395,   396,  2538,   398,   399,   747,   401,  1192,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,  2539,   415,     0,   417,  1193,   418,   419,  1194,   420,
    2540,   422,   423,   424,   425,   426,  1195,   750,   751,  1196,
    1197,   429,   430,     0,   432,     0,  1198,   434,   435,  2541,
     437,   438,   439,   440,   441,  1199,  1200,   442,   443,   444,
     445,   446,  2542,  1201,   448,   449,   450,   451,   452,     0,
     754,  1203,   455,  2543,   457,   458,   459,   460,   461,  1204,
    1205,   462,  1206,  1207,   463,   464,   465,   466,   467,   468,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   480,   481,   482,   483,     0,   507,     0,  1698,  1699,
    1700,  1693,  2544,  2545,  1703,  1704,  1705,  1706,  1694,     0,
       0,  1695,  1696,  1697,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,     0,
     111,   112,   113,   114,   115,     0,   117,   118,     0,   119,
     120,   121,   122,   123,   124,     0,     0,   125,   126,   127,
     128,   129,     0,   130,   131,   132,   133,   134,     0,     0,
       0,   136,   137,   138,   139,   140,   141,     0,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,     0,
     153,   154,   155,     0,     0,     0,     0,     0,     0,     0,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
       0,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   185,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,     0,   205,     0,   206,   207,   208,   209,     0,
     210,     0,   211,     0,     0,     0,   214,   215,   510,     0,
     218,     0,   219,     0,   220,   221,   222,     0,   223,   224,
     225,   226,   227,   228,   229,     0,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,   255,     0,   257,   258,   259,   260,
     261,   262,     0,     0,   263,     0,   265,     0,     0,   267,
     268,   269,     0,     0,   270,   271,   272,   273,   274,   511,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,     0,
     296,   297,   298,   299,   300,     0,   301,   302,     0,   304,
       0,   305,   306,   307,   308,   309,   310,     0,   311,   312,
       0,     0,   313,   314,   315,     0,     0,   316,   317,     0,
     319,     0,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,     0,   392,
     393,   394,   395,   396,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   513,   415,   416,   417,     0,   418,   419,     0,
     420,     0,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     0,     0,     0,  1698,
    1699,  1700,     0,  1701,  1702,  1703,  1704,  1705,  1706,  1384,
       0,     0,  1385,     0,     0,     0,  1386,  1387,  1388,  1389,
    1390,  1391,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1392,     0,  1384,     0,
       0,  1385,     0,     0,  1394,  1386,  1387,  1388,  1389,  1390,
    1391,  1395,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1392,     0,     0,     0,     0,
       0,     0,     0,  1394,  1384,     0,  1396,  1385,     0,     0,
    1395,  1386,  1387,  1388,  1389,  1390,  1391,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1392,     0,  1384,     0,  1396,  1385,     0,     0,  1394,
    1386,  1387,  1388,  1389,  1390,  1391,  1395,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1392,     0,     0,     0,     0,     0,     0,     0,  1394,     0,
       0,  1396,     0,     0,     0,  1395,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1396,     0,     0,     0,     0,     0,     0,  1397,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1398,     0,     0,     0,     0,  1399,     0,
       0,  1384,     0,     0,  1385,     0,  1397,     0,  1386,  1387,
    1388,  1389,  1390,  1391,     0,     0,     0,     0,     0,     0,
    1400,  1401,  1398,     0,     0,     0,     0,  1399,  1392,     0,
       0,     0,     0,     0,     0,  1402,  1394,     0,     0,     0,
       0,     0,  1397,  1395,     0,     0,     0,     0,     0,  1400,
    1401,     0,     0,     0,     0,     0,     0,     0,  1398,     0,
       0,     0,     0,  1399,  1402,     0,     0,     0,  1396,     0,
       0,  1397,     0,  1403,     0,     0,  1404,     0,     0,     0,
       0,     0,     0,     0,     0,  1400,  1401,  1398,     0,     0,
    1405,     0,  1399,  1406,     0,     0,     0,     0,     0,     0,
    1402,     0,  1403,     0,     0,  1404,     0,     0,     0,     0,
       0,     0,     0,     0,  1400,  1401,     0,     0,     0,  1405,
       0,     0,  1406,     0,     0,     0,     0,     0,     0,  1402,
       0,     0,     0,     0,     0,     0,     0,     0,  1403,     0,
       0,  1404,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1405,     0,     0,  1406,     0,
       0,     0,     0,     0,     0,     0,     0,  1403,     0,  1397,
    1404,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1407,     0,  1405,  1398,     0,  1406,     0,     0,
    1399,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1407,  1400,  1401,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1402,     0,     0,
       0,  1384,     0,     0,  1385,     0,     0,     0,  1386,  1387,
    1388,  1389,  1390,  1391,     0,     0,     0,  1407,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1392,     0,
       0,     0,     0,     0,     0,  1403,  1394,     0,  1404,     0,
       0,     0,     0,  1395,     0,     0,  1407,     0,     0,     0,
       0,     0,  1405,     0,  1408,  1406,     0,  1409,  1410,  1411,
       0,  1412,  1413,  1414,  1415,  1416,  1417,     0,  1396,     0,
       0,  2362,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1408,     0,     0,  1409,  1410,  1411,     0,
    1412,  1413,  1414,  1415,  1416,  1417,     0,     0,     0,     0,
    2452,     0,     0,     0,     0,  1384,     0,     0,  1385,     0,
       0,     0,  1386,  1387,  1388,  1389,  1390,  1391,     0,  1408,
       0,     0,  1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,
    1416,  1417,  1392,     0,     0,     0,  2604,     0,     0,     0,
    1394,     0,     0,     0,  1407,     0,     0,  1395,  1408,     0,
       0,  1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,
    1417,     0,     0,     0,     0,  2626,     0,  1384,     0,  1397,
    1385,     0,  1396,     0,  1386,  1387,  1388,  1389,  1390,  1391,
       0,     0,     0,     0,     0,  1398,     0,     0,     0,     0,
    1399,     0,     0,     0,  1392,     0,     0,     0,     0,     0,
       0,     0,  1394,     0,     0,     0,     0,     0,     0,  1395,
       0,     0,  1400,  1401,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1402,     0,     0,
       0,     0,  1384,     0,  1396,  1385,     0,     0,     0,  1386,
    1387,  1388,  1389,  1390,  1391,     0,  1408,     0,     0,  1409,
    1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,  1392,
       0,     0,     0,  2629,     0,  1403,     0,  1394,  1404,     0,
       0,     0,     0,  1397,  1395,     0,     0,     0,     0,     0,
       0,     0,  1405,     0,     0,  1406,     0,     0,     0,  1398,
       0,     0,     0,     0,  1399,     0,     0,     0,     0,  1396,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1400,  1401,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1402,     0,     0,     0,  1397,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1384,  1398,     0,  1385,     0,     0,  1399,  1386,  1387,  1388,
    1389,  1390,  1391,     0,     0,     0,     0,     0,     0,  1403,
       0,     0,  1404,     0,  1407,     0,     0,  1392,  1400,  1401,
       0,     0,     0,     0,     0,  1394,  1405,     0,     0,  1406,
       0,     0,  1395,  1402,     0,     0,     0,     0,     0,     0,
    1397,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1398,  1396,     0,     0,
       0,  1399,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1403,     0,     0,  1404,     0,     0,     0,     0,     0,
       0,     0,     0,  1400,  1401,     0,     0,     0,  1405,     0,
       0,  1406,     0,     0,     0,     0,     0,     0,  1402,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1408,     0,  1407,  1409,
    1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,     0,
       0,     0,     0,  2768,     0,     0,  1403,     0,     0,  1404,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1405,  1384,     0,  1406,  1385,  1397,     0,
       0,  1386,  1387,  1388,  1389,  1390,  1391,     0,     0,     0,
       0,     0,     0,     0,  1398,     0,     0,     0,     0,  1399,
    1407,  1392,     0,     0,     0,     0,     0,     0,     0,  1394,
       0,     0,     0,     0,     0,     0,  1395,     0,     0,     0,
       0,  1400,  1401,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1402,     0,     0,     0,
    1408,  1396,     0,  1409,  1410,  1411,     0,  1412,  1413,  1414,
    1415,  1416,  1417,     0,     0,     0,     0,  2831,     0,     0,
       0,     0,     0,     0,     0,  1407,     0,     0,     0,     0,
       0,     0,     0,     0,  1403,     0,     0,  1404,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1405,     0,     0,  1406,     0,     0,     0,     0,     0,
       0,     0,  1408,     0,     0,  1409,  1410,  1411,     0,  1412,
    1413,  1414,  1415,  1416,  1417,     0,     0,     0,     0,  2938,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1397,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1398,     0,
       0,     0,     0,  1399,     0,     0,     0,  1408,     0,     0,
    1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,
       0,     0,     0,  1407,  2986,  1400,  1401,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1402,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1403,     0,
       0,  1404,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1405,     0,     0,  1406,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1408,     0,     0,  1409,  1410,
    1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,
       0,     0,  2999,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1407,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1134,     0,  1408,
       0,     0,  1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,
    1416,  1417,     0,     0,  1569,    94,    95,    96,    97,    98,
      99,   100,   101,  1135,   102,   103,   104,  1136,  1137,  1138,
    1139,  1140,  1141,  1142,   105,   106,  1143,   107,   108,   109,
     786,   111,   112,   113,   787,   788,   789,   790,   791,  1144,
     119,   120,   121,   122,   123,   124,  1145,  1146,   125,   126,
     792,   793,   129,  1147,   130,   131,   132,   133,   794,  1148,
     795,  1149,   136,   137,   138,   139,   140,   141,   796,   143,
     144,   145,  1150,   146,   147,   148,   149,   150,   151,  1151,
     797,   153,   154,   155,   798,   799,   800,   801,  1152,  1153,
     802,   161,   162,   163,   164,   165,   166,   167,   803,   804,
     170,  1154,   171,  1155,   172,   173,   174,   175,   176,   177,
    1156,   178,   179,   180,   181,   182,  1157,  1158,   183,   184,
     185,   186,   187,  1159,   188,   189,   190,  1160,   191,   192,
     193,  1161,   194,   195,   196,   197,   805,   199,   200,   201,
     202,   203,   806,  1162,   205,  1163,   206,   207,   807,   209,
    1164,   210,  1165,   211,   808,  1166,   809,   214,   215,   810,
     811,   218,  1167,   219,  1168,   812,   813,   222,  1169,   223,
     224,   225,   226,   227,   228,   229,   814,   231,   232,   233,
     234,  1170,   235,   236,   237,   238,   239,   240,  1171,   241,
     815,   816,   244,   245,   246,   247,   248,   817,   818,  1172,
     819,  1173,   252,   820,   821,   255,   822,   257,   258,   259,
     260,   261,   262,  1174,  1175,   263,   823,   265,   824,  1176,
     267,   268,   269,  1177,  1178,   270,   271,   272,   273,   274,
     825,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   826,
     827,   828,   297,   298,   299,   829,  1179,   301,   302,   830,
     304,  1180,   831,   306,   832,   308,   309,   310,  1181,   311,
     312,  1182,  1183,   313,   314,   315,  1184,  1185,   316,   833,
     834,   319,   835,   836,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,  1186,   332,   333,   837,   335,   336,
     838,   338,   339,   340,  1187,   341,   342,   343,   344,   345,
     346,  1188,   347,   348,   349,   839,   351,   352,   353,   354,
    1189,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,  1190,   368,   369,   840,   371,   372,
     373,   841,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,  1191,   386,   387,   388,   389,   390,   842,
     392,   843,   394,   395,   396,   844,   398,   399,   845,   401,
    1192,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   846,   415,   847,   417,  1193,   418,   419,
    1194,   420,   848,   422,   423,   424,   425,   426,  1195,   849,
     850,  1196,  1197,   429,   430,   851,   432,   852,  1198,   434,
     435,   853,   437,   438,   439,   440,   441,  1199,  1200,   442,
     443,   444,   445,   446,   854,  1201,   448,   449,   450,   451,
     452,  1202,   856,  1203,   455,   857,   457,   458,   459,   460,
     461,  1204,  1205,   462,  1206,  1207,   463,   464,   465,   466,
     467,   468,   858,   859,   860,   861,   862,   863,   864,   865,
     866,   867,   868,   480,   481,   482,   483,   507,     0,     0,
       0,     0,     0,     0,     0,     0,  1818,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
       0,   111,   112,   113,   114,   115,     0,   117,   118,     0,
     119,   120,   121,   122,   123,   124,     0,     0,   125,   126,
     127,   128,   129,     0,   130,   131,   132,   133,   134,     0,
       0,     0,   136,   137,   138,   139,   140,   141,     0,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   153,   154,   155,     0,     0,     0,     0,     0,     0,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   510,
       0,   218,     0,   219,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   228,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,   262,     0,     0,   263,     0,   265,     0,     0,
     267,   268,   269,     0,     0,   270,   271,   272,   273,   274,
     511,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
       0,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,     0,
     392,   393,   394,   395,   396,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   513,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,     0,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   785,  1307,   583,
       0,     0,     0,   892,     0,     0,  2313,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
     786,   111,   112,   113,   787,   788,   789,   790,   791,     0,
     119,   120,   121,   122,   123,   124,     0,     0,   125,   126,
     792,   793,   129,     0,   130,   131,   132,   133,   794,     0,
     795,     0,   136,   137,   138,   139,   140,   141,   796,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     797,   153,   154,   155,   798,   799,   800,   801,     0,     0,
     802,   161,   162,   163,   164,   165,   166,   167,   803,   804,
     170,  1444,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   805,   199,   200,   201,
     202,   203,   806,  1308,   205,     0,   206,   207,   807,   209,
       0,   210,     0,   211,   808,     0,   809,   214,   215,   810,
     811,   218,     0,   219,     0,   812,   813,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   814,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     815,   816,   244,   245,   246,   247,   248,   817,   818,     0,
     819,     0,   252,   820,   821,   255,   822,   257,   258,   259,
     260,   261,   262,     0,     0,   263,   823,   265,   824,     0,
     267,   268,   269,     0,     0,   270,   271,   272,   273,   274,
     825,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   826,
     827,   828,   297,   298,   299,   829,     0,   301,   302,   830,
     304,     0,   831,   306,   832,   308,   309,   310,     0,   311,
     312,  1309,     0,   313,   314,   315,     0,     0,   316,   833,
     834,   319,   835,   836,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   837,   335,   336,
     838,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   839,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,   840,   371,   372,
     373,   841,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   842,
     392,   843,   394,   395,   396,   844,   398,   399,   845,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   846,   415,   847,   417,     0,   418,   419,
       0,   420,   848,   422,   423,   424,   425,   426,     0,   849,
     850,     0,     0,   429,   430,   851,   432,   852,  1310,   434,
     435,   853,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,   854,     0,   448,   449,   450,   451,
     452,  1202,   856,     0,   455,   857,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   858,   859,   860,   861,   862,   863,   864,   865,
     866,   867,   868,   480,   481,   482,   483,   785,  1307,   583,
       0,     0,     0,   892,  1311,  1312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
     786,   111,   112,   113,   787,   788,   789,   790,   791,     0,
     119,   120,   121,   122,   123,   124,     0,     0,   125,   126,
     792,   793,   129,     0,   130,   131,   132,   133,   794,     0,
     795,     0,   136,   137,   138,   139,   140,   141,   796,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     797,   153,   154,   155,   798,   799,   800,   801,     0,     0,
     802,   161,   162,   163,   164,   165,   166,   167,   803,   804,
     170,  1446,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   805,   199,   200,   201,
     202,   203,   806,  1308,   205,     0,   206,   207,   807,   209,
       0,   210,     0,   211,   808,     0,   809,   214,   215,   810,
     811,   218,     0,   219,     0,   812,   813,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   814,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     815,   816,   244,   245,   246,   247,   248,   817,   818,     0,
     819,     0,   252,   820,   821,   255,   822,   257,   258,   259,
     260,   261,   262,     0,     0,   263,   823,   265,   824,     0,
     267,   268,   269,     0,     0,   270,   271,   272,   273,   274,
     825,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   826,
     827,   828,   297,   298,   299,   829,     0,   301,   302,   830,
     304,     0,   831,   306,   832,   308,   309,   310,     0,   311,
     312,  1309,     0,   313,   314,   315,     0,     0,   316,   833,
     834,   319,   835,   836,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   837,   335,   336,
     838,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   839,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,   840,   371,   372,
     373,   841,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   842,
     392,   843,   394,   395,   396,   844,   398,   399,   845,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   846,   415,   847,   417,     0,   418,   419,
       0,   420,   848,   422,   423,   424,   425,   426,     0,   849,
     850,     0,     0,   429,   430,   851,   432,   852,  1310,   434,
     435,   853,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,   854,     0,   448,   449,   450,   451,
     452,  1202,   856,     0,   455,   857,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   858,   859,   860,   861,   862,   863,   864,   865,
     866,   867,   868,   480,   481,   482,   483,   785,  1307,   583,
       0,     0,     0,   892,  1311,  1312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
     786,   111,   112,   113,   787,   788,   789,   790,   791,     0,
     119,   120,   121,   122,   123,   124,     0,     0,   125,   126,
     792,   793,   129,     0,   130,   131,   132,   133,   794,     0,
     795,     0,   136,   137,   138,   139,   140,   141,   796,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     797,   153,   154,   155,   798,   799,   800,   801,     0,     0,
     802,   161,   162,   163,   164,   165,   166,   167,   803,   804,
     170,     0,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   805,   199,   200,   201,
     202,   203,   806,  1308,   205,     0,   206,   207,   807,   209,
       0,   210,     0,   211,   808,     0,   809,   214,   215,   810,
     811,   218,     0,   219,     0,   812,   813,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   814,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     815,   816,   244,   245,   246,   247,   248,   817,   818,     0,
     819,     0,   252,   820,   821,   255,   822,   257,   258,   259,
     260,   261,   262,     0,     0,   263,   823,   265,   824,     0,
     267,   268,   269,     0,     0,   270,   271,   272,   273,   274,
     825,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   826,
     827,   828,   297,   298,   299,   829,     0,   301,   302,   830,
     304,     0,   831,   306,   832,   308,   309,   310,     0,   311,
     312,  1309,     0,   313,   314,   315,     0,     0,   316,   833,
     834,   319,   835,   836,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   837,   335,   336,
     838,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   839,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,   840,   371,   372,
     373,   841,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   842,
     392,   843,   394,   395,   396,   844,   398,   399,   845,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   846,   415,   847,   417,     0,   418,   419,
       0,   420,   848,   422,   423,   424,   425,   426,     0,   849,
     850,     0,     0,   429,   430,   851,   432,   852,  1310,   434,
     435,   853,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,   854,     0,   448,   449,   450,   451,
     452,  1202,   856,     0,   455,   857,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   858,   859,   860,   861,   862,   863,   864,   865,
     866,   867,   868,   480,   481,   482,   483,     0,     0,  1384,
       0,     0,  1385,     0,  1311,  1312,  1386,  1387,  1388,  1389,
    1390,  1391,  1384,     0,     0,  1385,     0,     0,     0,  1386,
    1387,  1388,  1389,  1390,  1391,     0,  1392,     0,     0,     0,
    1831,     0,     0,     0,  1394,     0,     0,     0,     0,  1392,
       0,  1395,     0,     0,     0,     0,     0,  1394,  1384,     0,
       0,  1385,     0,     0,  1395,  1386,  1387,  1388,  1389,  1390,
    1391,  1384,     0,     0,  1385,     0,  1396,     0,  1386,  1387,
    1388,  1389,  1390,  1391,     0,  1392,     0,     0,     0,  1396,
       0,     0,     0,  1394,     0,     0,     0,     0,  1392,     0,
    1395,  2044,     0,     0,     0,     0,  1394,  1384,     0,     0,
    1385,     0,     0,  1395,  1386,  1387,  1388,  1389,  1390,  1391,
       0,     0,     0,     0,     0,  1396,     0,  1832,     0,     0,
       0,     0,     0,     0,  1392,     0,     0,     0,  1396,     0,
       0,     0,  1394,     0,     0,     0,     0,     0,     0,  1395,
       0,     0,  1384,     0,     0,  1385,     0,     0,     0,  1386,
    1387,  1388,  1389,  1390,  1391,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1396,     0,     0,  1397,     0,  1392,
    2083,     0,  2089,     0,     0,  2084,     0,  1394,     0,     0,
    1397,     0,     0,  1398,  1395,     0,     0,     0,  1399,     0,
       0,     0,     0,     0,     0,     0,  1398,     0,     0,     0,
       0,  1399,     0,     0,     0,  3086,     0,     0,     0,  1396,
    1400,  1401,     0,     0,     0,     0,  1397,     0,     0,     0,
       0,     0,     0,  1400,  1401,  1402,     0,     0,     0,  1397,
       0,     0,  1398,     0,     0,     0,     0,  1399,  1402,     0,
       0,     0,     0,     0,     0,  1398,     0,     0,     0,     0,
    1399,     0,     0,     0,     0,     0,     0,     0,     0,  1400,
    1401,     0,     0,  1403,     0,  1397,  1404,     0,     0,     0,
       0,     0,  1400,  1401,  1402,     0,  1403,     0,     0,  1404,
    1405,  1398,     0,  1406,     0,     0,  1399,  1402,     0,     0,
       0,     0,     0,  1405,     0,     0,  1406,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1400,  1401,
    1397,     0,  1403,     0,     0,  1404,     0,     0,     0,     0,
       0,     0,     0,  1402,     0,  1403,  1398,     0,  1404,  1405,
       0,  1399,  1406,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1405,     0,     0,  1406,     0,     0,     0,     0,
       0,     0,     0,  1400,  1401,  3087,     0,     0,     0,     0,
       0,  1403,     0,     0,  1404,     0,     0,     0,  1402,     0,
       0,     0,  1407,     0,     0,     0,     0,     0,  1405,     0,
       0,  1406,     0,     0,     0,  1407,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2056,
       0,     0,     0,     0,     0,     0,  1403,     0,     0,  1404,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1407,     0,  1405,     0,     0,  1406,     0,     0,     0,
       0,     0,  1836,     0,  1407,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1407,     0,     0,     0,  1408,     0,     0,  1409,  1410,  1411,
       0,  1412,  1413,  1414,  1415,  1416,  1417,  1408,     0,     0,
    1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1407,     0,     0,     0,     0,
       0,     0,     0,  1408,     0,     0,  1409,  1410,  1411,     0,
    1412,  1413,  1414,  1415,  1416,  1417,  1408,     0,     0,  1409,
    1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,     0,
       0,  1384,     0,     0,  1385,     0,     0,     0,  1386,  1387,
    1388,  1389,  1390,  1391,     0,     0,     0,     0,     0,     0,
       0,     0,  1408,     0,     0,  1409,  1410,  1411,  1392,  1412,
    1413,  1414,  1415,  1416,  1417,     0,  1394,     0,     0,     0,
       0,     0,     0,  1395,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1408,  1396,     0,
    1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,
    1384,     0,     0,  1385,     0,     0,     0,  1386,  1387,  1388,
    1389,  1390,  1391,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1392,     0,  1384,
    2096,     0,  1385,     0,     0,  1394,  1386,  1387,  1388,  1389,
    1390,  1391,  1395,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1392,     0,     0,     0,
       0,     0,     0,     0,  1394,     0,     0,  1396,     0,     0,
       0,  1395,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2094,     0,     0,     0,     0,  1397,
       0,     0,     0,     0,     0,     0,  1396,     0,     0,     0,
       0,     0,     0,     0,     0,  1398,     0,     0,  1384,     0,
    1399,  1385,     0,     0,     0,  1386,  1387,  1388,  1389,  1390,
    1391,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1400,  1401,     0,  1392,     0,     0,  2361,     0,
       0,     0,     0,  1394,     0,     0,     0,  1402,     0,     0,
    1395,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1397,     0,
       0,     0,     0,     0,     0,  1396,     0,     0,     0,     0,
       0,     0,     0,     0,  1398,  1403,     0,     0,  1404,  1399,
       0,     0,     0,     0,     0,     0,     0,  1397,     0,     0,
       0,     0,  1405,     0,     0,  1406,     0,     0,     0,     0,
       0,  1400,  1401,  1398,     0,     0,     0,     0,  1399,     0,
       0,     0,     0,     0,     0,     0,  1402,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1400,  1401,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1402,     0,     0,     0,     0,
       0,     0,     0,     0,  1403,     0,     0,  1404,     0,     0,
       0,     0,     0,     0,     0,     0,  1397,     0,     0,  1384,
       0,  1405,  1385,     0,  1406,     0,  1386,  1387,  1388,  1389,
    1390,  1391,  1398,  1403,  1407,     0,  1404,  1399,     0,     0,
       0,     0,     0,     0,     0,     0,  1392,     0,     0,     0,
    1405,     0,     0,  1406,  1394,     0,     0,     0,     0,  1400,
    1401,  1395,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1402,     0,     0,     0,     0,     0,
       0,     0,  1384,     0,     0,  1385,  1396,     0,     0,  1386,
    1387,  1388,  1389,  1390,  1391,  1384,     0,     0,  1385,     0,
       0,     0,  1386,     0,     0,  1389,  1390,  1391,     0,  1392,
       0,     0,  1403,  1407,     0,  1404,     0,  1394,     0,     0,
       0,     0,  1392,     0,  1395,     0,     0,     0,     0,  1405,
    1394,     0,  1406,     0,     0,     0,  1408,  1395,     0,  1409,
    1410,  1411,  1407,  1412,  1413,  1414,  1415,  1416,  1417,  1396,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1396,     0,     0,     0,     0,     0,     0,  1384,
       0,     0,  1385,     0,     0,  2317,  1386,     0,     0,  1389,
    1390,  1391,     0,     0,     0,     0,     0,  1397,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1398,  1394,     0,     0,     0,  1399,     0,
       0,  1395,     0,     0,     0,  1408,     0,     0,  1409,  1410,
    1411,  1407,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,
    1400,  1401,     0,     0,     0,     0,  1396,     0,     0,     0,
       0,     0,     0,     0,  1408,  1402,     0,  1409,  1410,  1411,
    1397,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,     0,
       0,     0,     0,  1397,     0,     0,  1398,     0,     0,     0,
       0,  1399,     0,     0,     0,     0,     0,     0,     0,  1398,
       0,     0,     0,  1403,  1399,     0,  1404,     0,     0,     0,
       0,     0,     0,  1400,  1401,     0,     0,     0,     0,     0,
    1405,     0,     0,  1406,     0,     0,  1400,  1401,  1402,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1402,     0,  1408,     0,     0,  1409,  1410,  1411,     0,
    1412,  1413,  1414,  1415,  1416,  1417,     0,  1397,     0,     0,
       0,     0,     0,     0,     0,     0,  1403,     0,     0,  1404,
       0,     0,     0,  1398,     0,     0,     0,     0,  1399,  1403,
       0,     0,  1404,  1405,     0,     0,  1406,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1405,     0,     0,     0,
   -1846, -1846,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1407,     0,     0,  1402,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1846,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1405,     0,     0,     0,     0,  1407,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1407,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1408,     0,     0,  1409,  1410,  1411,
       0,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1407,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1408,     0,     0,
    1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,  1851,  1417,
    1408,     0,     0,  1409,  1410,  1411,     0,  1412,  1413,  1414,
    1415,  1416,  1417,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1134,
       0,  1755,     0,     0,  1408,     0,     0,  1409,  1410,  1411,
       0,  1412,  1413,  1414,  1415,  1416,  1417,    94,    95,    96,
      97,    98,    99,   100,   101,  1135,   102,   103,   104,  1136,
    1137,  1138,  1139,  1140,  1141,  1142,   105,   106,  1143,   107,
     108,   109,   786,   111,   112,   113,   787,   788,   789,   790,
     791,  1144,   119,   120,   121,   122,   123,   124,  1145,  1146,
     125,   126,   792,   793,   129,  1147,   130,   131,   132,   133,
     794,  1148,   795,  1149,   136,   137,   138,   139,   140,   141,
     796,   143,   144,   145,  1150,   146,   147,   148,   149,   150,
     151,  1151,   797,   153,   154,   155,   798,   799,   800,   801,
    1152,  1153,   802,   161,   162,   163,   164,   165,   166,   167,
     803,   804,   170,  1154,   171,  1155,   172,   173,   174,   175,
     176,   177,  1156,   178,   179,   180,   181,   182,  1157,  1158,
     183,   184,   185,   186,   187,  1159,   188,   189,   190,  1160,
     191,   192,   193,  1161,   194,   195,   196,   197,   805,   199,
     200,   201,   202,   203,   806,  1162,   205,  1163,   206,   207,
     807,   209,  1164,   210,  1165,   211,   808,  1166,   809,   214,
     215,   810,   811,   218,  1167,   219,  1168,   812,   813,   222,
    1169,   223,   224,   225,   226,   227,   228,   229,   814,   231,
     232,   233,   234,  1170,   235,   236,   237,   238,   239,   240,
    1171,   241,   815,   816,   244,   245,   246,   247,   248,   817,
     818,  1172,   819,  1173,   252,   820,   821,   255,   822,   257,
     258,   259,   260,   261,   262,  1174,  1175,   263,   823,   265,
     824,  1176,   267,   268,   269,  1177,  1178,   270,   271,   272,
     273,   274,   825,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   826,   827,   828,   297,   298,   299,   829,  1179,   301,
     302,   830,   304,  1180,   831,   306,   832,   308,   309,   310,
    1181,   311,   312,  1182,  1183,   313,   314,   315,  1184,  1185,
     316,   833,   834,   319,   835,   836,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,  1186,   332,   333,   837,
     335,   336,   838,   338,   339,   340,  1187,   341,   342,   343,
     344,   345,   346,  1188,   347,   348,   349,   839,   351,   352,
     353,   354,  1189,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,  1190,   368,   369,   840,
     371,   372,   373,   841,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,  1191,   386,   387,   388,   389,
     390,   842,   392,   843,   394,   395,   396,   844,   398,   399,
     845,   401,  1192,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   846,   415,   847,   417,  1193,
     418,   419,  1194,   420,   848,   422,   423,   424,   425,   426,
    1195,   849,   850,  1196,  1197,   429,   430,   851,   432,   852,
    1198,   434,   435,   853,   437,   438,   439,   440,   441,  1199,
    1200,   442,   443,   444,   445,   446,   854,  1201,   448,   449,
     450,   451,   452,  1202,   856,  1203,   455,   857,   457,   458,
     459,   460,   461,  1204,  1205,   462,  1206,  1207,   463,   464,
     465,   466,   467,   468,   858,   859,   860,   861,   862,   863,
     864,   865,   866,   867,   868,   480,   481,   482,   483,  1134,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,  1135,   102,   103,   104,  1136,
    1137,  1138,  1139,  1140,  1141,  1142,   105,   106,  1143,   107,
     108,   109,   786,   111,   112,   113,   787,   788,   789,   790,
     791,  1144,   119,   120,   121,   122,   123,   124,  1145,  1146,
     125,   126,   792,   793,   129,  1147,   130,   131,   132,   133,
     794,  1148,   795,  1149,   136,   137,   138,   139,   140,   141,
     796,   143,   144,   145,  1150,   146,   147,   148,   149,   150,
     151,  1151,   797,   153,   154,   155,   798,   799,   800,   801,
    1152,  1153,   802,   161,   162,   163,   164,   165,   166,   167,
     803,   804,   170,  1154,   171,  1155,   172,   173,   174,   175,
     176,   177,  1156,   178,   179,   180,   181,   182,  1157,  1158,
     183,   184,   185,   186,   187,  1159,   188,   189,   190,  1160,
     191,   192,   193,  1161,   194,   195,   196,   197,   805,   199,
     200,   201,   202,   203,   806,  1162,   205,  1163,   206,   207,
     807,   209,  1164,   210,  1165,   211,   808,  1166,   809,   214,
     215,   810,   811,   218,  1167,   219,  1168,   812,   813,   222,
    1169,   223,   224,   225,   226,   227,   228,   229,   814,   231,
     232,   233,   234,  1170,   235,   236,   237,   238,   239,   240,
    1171,   241,   815,   816,   244,   245,   246,   247,   248,   817,
     818,  1172,   819,  1173,   252,   820,   821,   255,   822,   257,
     258,   259,   260,   261,   262,  1174,  1175,   263,   823,   265,
     824,  1176,   267,   268,   269,  1177,  1178,   270,   271,   272,
     273,   274,   825,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   826,   827,   828,   297,   298,   299,   829,  1179,   301,
     302,   830,   304,  1180,   831,   306,   832,   308,   309,   310,
    1181,   311,   312,  1182,  1183,   313,   314,   315,  1184,  1185,
     316,   833,   834,   319,   835,   836,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,  1186,   332,   333,   837,
     335,   336,   838,   338,   339,   340,  1187,   341,   342,   343,
     344,   345,   346,  1188,   347,   348,   349,   839,   351,   352,
     353,   354,  1189,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,  1190,   368,   369,   840,
     371,   372,   373,   841,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,  1191,   386,   387,   388,   389,
     390,   842,   392,   843,   394,   395,   396,   844,   398,   399,
     845,   401,  1192,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   846,   415,   847,   417,  1193,
     418,   419,  1194,   420,   848,   422,   423,   424,   425,   426,
    1195,   849,   850,  1196,  1197,   429,   430,   851,   432,   852,
    1198,   434,   435,   853,   437,   438,   439,   440,   441,  1199,
    1200,   442,   443,   444,   445,   446,   854,  1201,   448,   449,
     450,   451,   452,  1202,   856,  1203,   455,   857,   457,   458,
     459,   460,   461,  1204,  1205,   462,  1206,  1207,   463,   464,
     465,   466,   467,   468,   858,   859,   860,   861,   862,   863,
     864,   865,   866,   867,   868,   480,   481,   482,   483,  1134,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,  1902,    99,   100,   101,  1135,   102,   103,   104,  1136,
    1137,  1138,  1139,  1140,  1141,  1142,   105,   106,  1143,   107,
     108,   109,   786,   111,   112,   113,   787,   788,   789,   790,
     791,  1144,   119,   120,   121,   122,   123,   124,  1145,  1146,
     125,   126,   792,   793,   129,  1147,   130,   131,   132,   133,
     794,  1148,   795,  1149,   136,   137,   138,   139,   140,   141,
     796,   143,   144,   145,  1150,   146,   147,   148,   149,   150,
     151,  1151,   797,   153,   154,   155,   798,   799,   800,   801,
    1152,  1153,   802,   161,   162,   163,   164,   165,   166,   167,
     803,   804,   170,  1154,   171,  1155,   172,   173,   174,   175,
     176,   177,  1156,   178,   179,   180,   181,   182,  1157,  1158,
     183,   184,   185,  1903,   187,  1159,   188,   189,   190,  1160,
     191,   192,   193,  1161,   194,   195,   196,   197,   805,   199,
     200,   201,   202,   203,   806,  1162,   205,  1163,   206,   207,
     807,   209,  1164,   210,  1165,   211,   808,  1166,   809,   214,
     215,   810,   811,   218,  1167,   219,  1168,   812,   813,   222,
    1169,   223,   224,   225,   226,   227,   228,   229,   814,   231,
     232,   233,   234,  1170,   235,   236,   237,   238,   239,   240,
    1171,   241,   815,   816,   244,   245,   246,   247,   248,   817,
     818,  1172,   819,  1173,   252,   820,   821,   255,   822,   257,
     258,   259,   260,   261,   262,  1174,  1175,   263,   823,   265,
     824,  1176,   267,   268,   269,  1177,  1178,   270,   271,   272,
     273,   274,   825,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   826,   827,   828,   297,   298,   299,   829,  1179,   301,
     302,   830,   304,  1180,   831,   306,   832,   308,   309,   310,
    1181,   311,   312,  1182,  1183,   313,   314,   315,  1184,  1185,
     316,   833,   834,   319,   835,   836,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,  1186,   332,   333,   837,
     335,   336,   838,   338,   339,   340,  1187,   341,   342,   343,
     344,   345,   346,  1188,   347,   348,   349,   839,   351,   352,
     353,   354,  1189,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,  1190,   368,   369,   840,
     371,   372,   373,   841,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,  1191,   386,   387,   388,   389,
     390,   842,  1904,   843,   394,   395,   396,   844,   398,   399,
     845,   401,  1192,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   846,   415,   847,   417,  1193,
     418,   419,  1194,   420,   848,   422,   423,   424,   425,   426,
    1195,   849,   850,  1196,  1197,   429,   430,   851,   432,   852,
    1198,   434,   435,   853,   437,   438,   439,   440,   441,  1199,
    1200,   442,   443,   444,   445,   446,   854,  1201,   448,   449,
     450,   451,   452,  1202,   856,  1203,   455,   857,   457,   458,
     459,   460,   461,  1204,  1205,   462,  1206,  1207,   463,   464,
     465,   466,   467,   468,   858,   859,   860,   861,   862,   863,
     864,   865,   866,   867,   868,   480,   481,   482,   483,    93,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,   899,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     902,     0,   903,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   904,   905,   906,   907,
     908,   909,   910,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   915,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   923,   924,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,   304,     0,   929,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   932,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   933,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   936,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   938,   417,     0,
     418,   419,     0,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   941,   432,   942,
       0,   434,   435,   944,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   945,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   785,
       0,   583,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   786,   111,   112,   113,   787,   788,   789,   790,
     791,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   792,   793,   129,     0,   130,   131,   132,   133,
     794,     0,   795,     0,   136,   137,   138,   139,   140,   141,
     796,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   797,   153,   154,   155,   798,   799,   800,   801,
       0,     0,   802,   161,   162,   163,   164,   165,   166,   167,
     803,   804,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   805,   199,
     200,   201,   202,   203,   806,  1308,   205,     0,   206,   207,
     807,   209,     0,   210,     0,   211,   808,     0,   809,   214,
     215,   810,   811,   218,     0,   219,     0,   812,   813,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   814,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   815,   816,   244,   245,   246,   247,   248,   817,
     818,     0,   819,     0,   252,   820,   821,   255,   822,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   823,   265,
     824,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   825,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   826,   827,   828,   297,   298,   299,   829,     0,   301,
     302,   830,   304,     0,   831,   306,   832,   308,   309,   310,
       0,   311,   312,  1309,     0,   313,   314,   315,     0,     0,
     316,   833,   834,   319,   835,   836,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   837,
     335,   336,   838,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   839,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   840,
     371,   372,   373,   841,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   842,   392,   843,   394,   395,   396,   844,   398,   399,
     845,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   846,   415,   847,   417,     0,
     418,   419,     0,   420,   848,   422,   423,   424,   425,   426,
       0,   849,   850,     0,     0,   429,   430,   851,   432,   852,
    1310,   434,   435,   853,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   854,     0,   448,   449,
     450,   451,   452,  1202,   856,     0,   455,   857,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   858,   859,   860,   861,   862,   863,
     864,   865,   866,   867,   868,   480,   481,   482,   483,   785,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     3,
       4,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   786,   111,   112,   113,   787,   788,   789,   790,
     791,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   792,   793,   129,     0,   130,   131,   132,   133,
     794,     0,   795,     0,   136,   137,   138,   139,   140,   141,
     796,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   797,   153,   154,   155,   798,   799,   800,   801,
       0,     0,   802,   161,   162,   163,   164,   165,   166,   167,
     803,   804,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   805,   199,
     200,   201,   202,   203,   806,     0,   205,     0,   206,   207,
     807,   209,     0,   210,     0,   211,   808,     0,   809,   214,
     215,   810,   811,   218,     0,   219,     0,   812,   813,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   814,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   815,   816,   244,   245,   246,   247,   248,   817,
     818,     0,   819,     0,   252,   820,   821,   255,   822,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   823,   265,
     824,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   825,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   826,   827,   828,   297,   298,   299,   829,     0,   301,
     302,   830,   304,     0,   831,   306,   832,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   833,   834,   319,   835,   836,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   837,
     335,   336,   838,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   839,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   840,
     371,   372,   373,   841,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   842,   392,   843,   394,   395,   396,   844,   398,   399,
     845,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   846,   415,   847,   417,     0,
     418,   419,     0,   420,   848,   422,   423,   424,   425,   426,
       0,   849,   850,     0,     0,   429,   430,   851,   432,   852,
       0,   434,   435,   853,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   854,     0,   448,   449,
     450,   451,   452,  1202,   856,     0,   455,   857,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   858,   859,   860,   861,   862,   863,
     864,   865,   866,   867,   868,   480,   481,   482,   483,    93,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,   135,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
       0,     0,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   264,   265,
     266,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
     418,   419,     0,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,  1507,   130,   131,   132,   133,
     134,     0,     0,  1508,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,  1509,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,  1510,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,  1511,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,  1512,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
    1513,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,  1507,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,  1509,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,  1510,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
    1971,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,  1512,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
    1513,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     3,
       4,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,   509,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   512,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   615,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   658,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   615,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,   690,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,  1807,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,  1808,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,  1809,   420,     0,   422,  1810,   424,  1811,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,  1812,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
    2776,     0,     0,     0,     0,  2777,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   583,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,   590,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   591,   428,     0,     0,   592,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     624,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   653,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   656,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   660,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   699,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   700,   111,   112,   113,     0,   701,   702,   703,
     704,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   705,   706,   129,     0,   130,   131,   132,   133,
       0,     0,   707,     0,   136,   137,   138,   139,   140,   141,
     708,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   709,   153,   154,   155,   710,   711,   712,   713,
       0,     0,   714,   161,   162,   163,   164,   165,   166,   167,
     715,   716,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   717,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,     0,   199,
     200,   201,   202,   203,     0,     0,   205,     0,   206,   207,
     718,   209,     0,   210,     0,   211,   719,     0,   720,   214,
     215,     0,   721,   218,     0,   219,     0,     0,     0,   222,
       0,   223,   224,   225,   226,   227,   722,   229,   723,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   724,     0,   244,   245,   246,   247,   248,   725,
     726,     0,   727,     0,   252,   728,   729,   255,   730,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   731,   265,
     732,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   733,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   734,   735,   736,   297,   298,   299,     0,     0,   301,
     302,   737,   304,     0,     0,   306,   738,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,   739,   319,   740,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,     0,
     335,   336,     0,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   741,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   742,
     371,   372,   373,   743,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   744,   392,   745,   394,   395,   396,   746,   398,   399,
     747,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   748,   415,     0,   417,     0,
     418,   419,     0,   420,   749,   422,   423,   424,   425,   426,
       0,   750,   751,     0,     0,   429,   430,     0,   432,     0,
       0,   434,   435,   752,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   753,     0,   448,   449,
     450,   451,   452,     0,   754,     0,   455,   755,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   507,     0,   508,     0,     0,     0,
       0,     0,     0,     0,     0,   480,   481,   482,   483,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,   123,   124,     0,     0,   125,   126,   127,   128,   129,
       0,   130,   131,   132,   133,   134,     0,     0,     0,   136,
     137,   138,   139,   140,   141,     0,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   153,   154,
     155,     0,     0,     0,     0,     0,     0,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   185,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
       0,   205,     0,   206,   207,   208,   209,     0,   210,     0,
     211,     0,     0,     0,   214,   215,   510,     0,   218,     0,
     219,     0,   220,   221,   222,     0,   223,   224,   225,   226,
     227,   777,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,     0,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,   255,     0,   257,   258,   259,   260,   261,   262,
       0,     0,   263,     0,   265,     0,     0,   267,   268,   269,
       0,     0,   270,   271,   272,   273,   274,   511,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,     0,   296,   297,
     298,   299,   300,     0,   301,   302,     0,   304,     0,   305,
     306,   307,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   317,     0,   319,     0,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,     0,   392,   393,   394,
     395,   396,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     513,   415,   416,   417,     0,   418,   419,     0,   420,     0,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   507,     0,   508,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,   123,   124,     0,     0,   125,   126,   127,   128,   129,
       0,   130,   131,   132,   133,   134,     0,     0,     0,   136,
     137,   138,   139,   140,   141,     0,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   153,   154,
     155,     0,     0,     0,     0,     0,     0,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   185,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
       0,   205,     0,   206,   207,   208,   209,     0,   210,     0,
     211,     0,     0,     0,   214,   215,   510,     0,   218,     0,
     219,     0,   220,   221,   222,     0,   223,   224,   225,   226,
     227,   780,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,     0,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,   255,     0,   257,   258,   259,   260,   261,   262,
       0,     0,   263,     0,   265,     0,     0,   267,   268,   269,
       0,     0,   270,   271,   272,   273,   274,   511,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,     0,   296,   297,
     298,   299,   300,     0,   301,   302,     0,   304,     0,   305,
     306,   307,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   317,     0,   319,     0,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,     0,   392,   393,   394,
     395,   396,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     513,   415,   416,   417,     0,   418,   419,     0,   420,     0,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   507,     0,   508,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,   123,   124,     0,     0,   125,   126,   127,   128,   129,
       0,   130,   131,   132,   133,   134,     0,     0,     0,   136,
     137,   138,   139,   140,   141,     0,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   153,   154,
     155,     0,     0,     0,     0,     0,     0,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   185,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
       0,   205,     0,   206,   207,   208,   209,     0,   210,     0,
     211,     0,     0,     0,   214,   215,   510,     0,   218,     0,
     219,     0,   220,   221,   222,     0,   223,   224,   225,   226,
     227,  1224,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,     0,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,   255,     0,   257,   258,   259,   260,   261,   262,
       0,     0,   263,     0,   265,     0,     0,   267,   268,   269,
       0,     0,   270,   271,   272,   273,   274,   511,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,     0,   296,   297,
     298,   299,   300,     0,   301,   302,     0,   304,     0,   305,
     306,   307,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   317,     0,   319,     0,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,     0,   392,   393,   394,
     395,   396,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     513,   415,   416,   417,     0,   418,   419,     0,   420,     0,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   507,     0,   508,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,   123,   124,     0,     0,   125,   126,   127,   128,   129,
       0,   130,   131,   132,   133,   134,     0,     0,     0,   136,
     137,   138,   139,   140,   141,     0,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   153,   154,
     155,     0,     0,     0,     0,     0,     0,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   185,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
       0,   205,     0,   206,   207,   208,   209,     0,   210,     0,
     211,     0,     0,     0,   214,   215,   510,     0,   218,     0,
     219,     0,   220,   221,   222,     0,   223,   224,   225,   226,
     227,  1226,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,     0,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,   255,     0,   257,   258,   259,   260,   261,   262,
       0,     0,   263,     0,   265,     0,     0,   267,   268,   269,
       0,     0,   270,   271,   272,   273,   274,   511,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,     0,   296,   297,
     298,   299,   300,     0,   301,   302,     0,   304,     0,   305,
     306,   307,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   317,     0,   319,     0,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,     0,   392,   393,   394,
     395,   396,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     513,   415,   416,   417,     0,   418,   419,     0,   420,     0,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   699,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,   700,   111,   112,
     113,     0,   701,   702,   703,   704,     0,   119,   120,   121,
     122,   123,   124,     0,     0,   125,   126,   705,   706,   129,
       0,   130,   131,   132,   133,     0,     0,   707,     0,   136,
     137,   138,   139,   140,   141,   708,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   709,   153,   154,
     155,   710,   711,   712,   713,     0,     0,   714,   161,   162,
     163,   164,   165,   166,   167,   715,   716,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   717,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,     0,   199,   200,   201,   202,   203,     0,
       0,   205,     0,   206,   207,   718,   209,     0,   210,     0,
     211,   719,     0,   720,   214,   215,     0,   721,   218,     0,
     219,     0,     0,     0,   222,     0,   223,   224,   225,   226,
     227,   228,   229,   723,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,   724,     0,   244,
     245,   246,   247,   248,   725,   726,     0,   727,     0,   252,
     728,   729,   255,   730,   257,   258,   259,   260,   261,   262,
       0,     0,   263,   731,   265,   732,     0,   267,   268,   269,
       0,     0,   270,   271,   272,   273,   274,   733,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   734,   735,   736,   297,
     298,   299,     0,     0,   301,   302,   737,   304,     0,     0,
     306,   738,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,   739,   319,   740,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,     0,   335,   336,     0,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   741,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,   742,   371,   372,   373,   743,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   744,   392,   745,   394,
     395,   396,   746,   398,   399,   747,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     748,   415,     0,   417,     0,   418,   419,     0,   420,   749,
     422,   423,   424,   425,   426,     0,   750,   751,     0,     0,
     429,   430,     0,   432,     0,     0,   434,   435,   752,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,   753,     0,   448,   449,   450,   451,   452,     0,   754,
       0,   455,   755,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
     480,   481,   482,   483,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,  1898,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,  2401,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,  2416,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,   508,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,  2578,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   602,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   603,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   604,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     605,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   606,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   678,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   774,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   604,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   606,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,  1503,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,     0,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,  1601,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,  1885,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,  1900,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,  2506,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,  2507,   111,   112,   113,     0,   701,  2508,   703,
     704,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   705,   706,   129,     0,   130,   131,   132,   133,
       0,     0,  2509,     0,   136,   137,   138,   139,   140,   141,
    2510,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,  2511,   153,   154,   155,  2512,  2513,  2514,  2515,
       0,     0,  2516,   161,   162,   163,   164,   165,   166,   167,
     715,   716,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   717,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,     0,   199,
     200,   201,   202,   203,     0,     0,   205,     0,   206,   207,
     718,   209,     0,   210,     0,   211,  2517,     0,  2518,   214,
     215,  2519,  2520,   218,     0,   219,     0,     0,     0,   222,
       0,   223,   224,   225,   226,   227,   228,   229,  2521,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,  2522,     0,   244,   245,   246,   247,   248,   725,
     726,     0,   727,     0,   252,  2523,  2524,   255,  2525,   257,
     258,   259,   260,   261,   262,     0,     0,   263,  2526,   265,
    2527,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,  2721,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   734,  2529,   736,   297,   298,   299,     0,     0,   301,
     302,  2531,   304,     0,     0,   306,   738,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,  2533,   319,  2534,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,     0,
     335,   336,     0,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   741,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,  2535,
     371,   372,   373,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,  2536,   392,     0,   394,   395,   396,  2538,   398,   399,
     747,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,  2722,   415,     0,   417,     0,
     418,   419,     0,   420,  2540,   422,   423,   424,   425,   426,
       0,   750,   751,     0,     0,   429,   430,     0,   432,     0,
       0,   434,   435,  2541,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,  2542,     0,   448,   449,
     450,   451,   452,     0,   754,     0,   455,  2543,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   699,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   480,   481,   482,   483,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,   700,   111,   112,
     113,     0,   701,   702,   703,   704,     0,   119,   120,   121,
     122,   123,   124,     0,     0,   125,   126,   705,   706,   129,
       0,   130,   131,   132,   133,     0,     0,   707,     0,   136,
     137,   138,   139,   140,   141,   708,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   709,   153,   154,
     155,   710,   711,   712,   713,     0,     0,   714,   161,   162,
     163,   164,   165,   166,   167,   715,   716,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   717,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,     0,   199,   200,   201,   202,   203,     0,
       0,   205,     0,   206,   207,   718,   209,     0,   210,     0,
     211,   719,     0,   720,   214,   215,     0,   721,   218,     0,
     219,     0,     0,     0,   222,     0,   223,   224,   225,   226,
     227,   228,   229,   723,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,   724,     0,   244,
     245,   246,   247,   248,   725,   726,     0,   727,     0,   252,
     728,   729,   255,   730,   257,   258,   259,   260,   261,   262,
       0,     0,   263,   731,   265,   732,     0,   267,   268,   269,
       0,     0,   270,   271,   272,   273,   274,     0,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   734,   735,   736,   297,
     298,   299,     0,     0,   301,   302,   737,   304,     0,     0,
     306,   738,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,   739,   319,   740,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,     0,   335,   336,     0,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   741,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,   742,   371,   372,   373,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   744,   392,     0,   394,
     395,   396,   746,   398,   399,   747,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,     0,   417,     0,   418,   419,     0,   420,   749,
     422,   423,   424,   425,   426,     0,   750,   751,     0,     0,
     429,   430,     0,   432,     0,     0,   434,   435,   752,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,   753,     0,   448,   449,   450,   451,   452,     0,   754,
       0,   455,   755,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   507,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     480,   481,   482,   483,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   510,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   511,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,     0,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,     0,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,     0,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   513,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     1,
       1,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       2,     3,     4,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     5,     5,     0,
       0,     0,     0,     0,     0,     0,     6,     6,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     7,     7,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     8,
       8,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     9,     9,    10,    10,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    11,    11,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    12,    12,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    13,     0,     0,     0,
       0,    14,    14,     0,     0,     0,     0,     0,     0,    15,
      15,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    18,    18,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    20,
      20,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    21,    21,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    22,    22,     0,    23,    23,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    24,    24,     0,     0,     0,     0,
       0,     0,     0,    25,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,    26,     0,
       0,     0,     0,     0,    27,    27,     0,     0,    28,    28,
       0,     0,     0,     0,     0,     0,     0,     0,    29,    29,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,    30,     0,     0,    31,    31,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      32,    32,     0,     0,     0,    33,    33,     0,     0,   545,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    34,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   546,    36
};

static const yytype_int16 yycheck[] =
{
       6,    36,   672,   657,   502,     0,     6,   952,     0,   664,
       0,     0,     6,     0,     0,    46,  1074,   640,   873,  1015,
     546,   677,   623,     0,   745,   776,  1048,   778,  1427,   873,
    1073,  1461,   618,     0,  1464,  1249,     0,   751,    30,    16,
    1352,   955,   540,    16,  1819,   666,  1834,  1121,  1053,  1837,
    1896,    48,    31,  1777,   657,  1042,   659,   971,   661,   545,
     541,   538,    54,   546,     0,    48,  1050,  2241,  2241,  1254,
     984,  1815,  1381,  1382,  2146,   881,  1892,  2285,  2269,  2267,
       0,  1712,  1713,  1876,    21,     0,  1717,     0,     0,     0,
       0,     0,     0,     0,  1078,     0,    35,     0,     0,     0,
       0,     0,  2278,     0,  2098,   560,  1955,    60,     0,     5,
       0,    90,     0,    11,     0,     0,     9,    15,  1940,  1941,
    1942,     5,   637,  1867,   705,   706,     5,     5,     5,  1760,
    1761,     5,     0,    52,    13,    14,   637,  1435,  1578,    13,
      14,     5,     5,  1480,     5,     5,     9,     9,   992,    75,
       0,  1220,  1968,    13,    14,   736,  1482,  2148,     5,     5,
     122,   117,  1029,  2154,   171,   119,    42,    13,    14,    60,
      42,   122,  2571,  1953,    69,   147,   109,     5,   139,   172,
       5,   782,     5,     5,     9,    13,    14,     5,   873,     5,
      13,    14,     5,     5,     5,   880,     5,  1815,     5,    20,
      21,    13,    14,     5,    13,    14,    13,    14,     5,  2661,
       5,    13,    14,     5,     5,   189,  2032,  2033,  1062,     5,
       5,  1065,  1066,    77,     5,    60,   940,    95,    13,    14,
    2585,    29,    13,    14,    88,    29,     3,   124,    36,  2725,
      13,    14,    36,   215,  2196,    95,    60,    29,   210,  1867,
    2575,   287,   171,  2481,    36,     5,     5,     5,     5,     5,
    2153,    85,   285,  2588,  1347,   273,    33,    34,   293,   293,
    1347,   119,   309,   168,   191,  2549,     4,   171,   108,  1347,
    1086,     9,   967,    70,    38,    11,     3,     4,     5,    15,
    2821,  1097,     9,    77,   161,    11,    39,   117,  2757,    15,
    2085,   109,   378,   132,    88,   129,   163,   992,   163,   994,
     995,   117,   357,  1242,   244,  2211,   165,    43,   161,   900,
     901,   293,  2854,    11,    29,   405,   396,    43,     4,  2057,
      38,  2055,   497,     9,  2406,   463,   501,   441,  2410,  2161,
    1061,  2793,   497,   120,   300,   926,   501,   873,    11,    75,
     951,   441,    15,   419,   880,   224,    29,   485,  2086,    75,
     440,    13,    14,  2537,  2210,    13,    14,   122,   235,   189,
     956,   499,    11,   228,  1811,  1812,    15,  1062,   999,   110,
    1065,  1066,   137,   126,   538,   455,  2174,    75,   132,  2580,
     876,  2207,   235,  2209,  2582,   499,   349,  2293,   464,   985,
     117,   270,  2146,   170,  2395,   172,    61,  2398,  1337,   499,
     417,  1356,   269,   369,    69,   159,   193,   284,  2743,   287,
     250,   175,  2954,   499,   211,   320,  1012,   132,   258,   277,
     347,   439,  2063,  2064,  2065,  2066,  2067,   287,  1039,  2070,
    2071,  2072,  2073,  2074,  2075,  2076,  2077,  2078,  2079,  2723,
     406,  2850,   272,   282,   499,  2986,  2684,   494,   349,   132,
      11,   433,   270,   499,    15,  1777,   315,   175,   994,   995,
     110,   277,    23,   406,     0,  2703,   499,   439,   503,   503,
     304,   488,   350,    34,    35,  2265,  1508,  1354,   439,   443,
    1564,   447,  2123,  2124,   501,  2311,   457,  2449,  2853,   216,
     350,  2394,   494,  1126,  1841,   461,   499,   437,   499,  2995,
     379,   546,  1821,    11,   349,  2967,  1842,    15,   166,  1588,
    3052,   238,  1037,   417,  1836,   499,  2144,   403,  2146,   485,
    1970,   403,   538,   277,  1592,   349,  1037,    88,   282,   434,
     546,  2326,  1625,   499,   502,    43,   393,   394,  1625,  1626,
     503,  2725,  2725,  1008,   441,    60,  1624,   272,  2734,  1229,
    3019,  1246,   277,   417,   319,  1220,   450,   463,   545,   499,
     439,   497,  1257,   546,  1259,   501,  2648,    75,   503,  1264,
     499,  2653,  1880,   238,  2656,  1659,   463,   411,   386,   485,
    2921,   745,   386,   461,   600,   601,  1281,   495,    66,    67,
    2955,  1468,   120,   499,   386,   498,  2452,  1347,   485,   640,
    2459,   461,   503,   328,   451,   499,   613,   623,  2612,   497,
     499,   499,   499,   501,  1430,   499,  1311,  1312,   490,   491,
     613,  2956,   500,   417,   502,   499,   499,   632,   499,   499,
     632,  1242,   632,   632,   581,   632,   632,    25,   621,  2640,
     500,  2859,   502,   499,  2447,   632,   662,   663,   664,  1344,
    1345,  2852,  2406,  1348,  1349,   632,  2410,  1322,   632,  1250,
    1251,   499,   493,   652,   499,   193,   499,   499,   344,   172,
     424,   499,  2858,   499,   451,   624,   499,   499,   499,   503,
     499,   435,   499,  1537,   276,   499,   632,   499,  2135,  2136,
    2137,  2138,   499,  1547,   499,  3036,  1550,   499,   499,  2433,
      13,    14,   632,   499,   499,  1336,  2788,   632,   499,   632,
     632,   632,   632,   632,   632,   632,   499,   632,   882,   632,
     632,   632,   632,   632,  1335,   632,  1337,  1733,  1393,   745,
     632,  1342,   632,  2055,   632,  1222,   632,   632,  2570,   499,
     499,   499,   499,   499,  1355,  1376,  1377,  2573,   579,   137,
     581,   582,   490,   491,  2952,   270,   492,   493,   494,   495,
    2961,  1248,   177,   490,   491,   329,   782,  1378,  1433,   495,
    1306,   500,  1368,   604,   503,   461,   149,   200,  2406,  1644,
     256,   257,  2410,  1599,  1479,  1480,    96,  2106,  1296,  1297,
    1644,   383,  2639,  1424,   358,  1303,   244,   132,   244,   485,
    1995,  1432,   305,  1434,   490,   491,  2001,  1294,  1299,  1305,
     348,  2995,  2995,  1306,  1738,  3013,   488,   490,   491,   492,
     493,   494,   495,   238,   538,   198,  1823,   499,   992,  2676,
    2686,    25,   151,  2474,   349,  1712,  1713,    31,   376,   119,
    1717,   494,  1537,   492,   493,   494,   495,  1608,   501,  1804,
     251,  1919,  1547,    69,   244,  1550,    77,   873,   488,  1943,
    1525,   376,   172,  3055,   880,   881,   882,    88,  1629,  1533,
    1631,   501,   309,  1634,    11,  1625,  1626,  1627,   244,   382,
    3081,   461,   898,  1760,  1761,   173,   463,   716,  1396,   876,
     366,   367,  2486,  1506,  2648,  2119,   206,  1061,  1385,  2653,
    2494,   117,  2656,   291,  3096,   485,    43,   952,   485,   738,
    2757,   927,   222,   422,   362,  1581,   362,   406,   463,  2241,
    1533,   358,   232,  1588,   204,  1620,  1621,  1560,  1561,  1562,
     453,   947,   948,   949,  1928,   951,   952,   272,    75,  1552,
     485,   770,   500,   137,  1557,   503,    24,   282,   244,  1644,
      29,   512,    30,  1877,   499,   365,   266,   245,   346,   975,
     348,    25,  1657,     8,  1979,  2606,    11,    31,   499,  1984,
      15,  2827,   362,    18,    19,    20,    54,   287,   994,   995,
     334,   542,   490,   491,   492,   493,   494,   495,   376,   437,
     270,   437,   272,     8,  1605,   410,   362,   412,   151,   132,
      15,    80,     5,    18,    19,    20,   300,   334,  1024,   200,
      89,  2639,  1028,  1029,    32,  1022,  1023,   494,  1025,   410,
    2648,   412,   437,  1039,   501,  2653,   159,  1514,  2656,  1022,
    1023,   745,  1025,    77,  2788,  1543,    50,  2884,    56,   118,
    1548,   244,   873,   353,    88,  1061,   334,   437,  2676,   880,
     369,   499,   406,   499,  1043,  2405,   272,   494,  1222,    13,
      14,   277,     4,   624,   172,  2415,   362,     9,  2418,     5,
    1086,   437,     8,   137,   500,   369,  2923,   503,    14,   406,
     499,  1097,   370,   912,  1248,  1249,  1649,   406,  1077,    25,
    1653,     4,  1655,    29,   221,     4,     9,   291,   206,   453,
       9,   930,     4,   500,   320,  1121,   503,     9,  1644,   499,
     189,  2433,   406,   500,   222,  1726,   503,    25,   406,  2760,
     336,  1657,   201,    31,   232,  1820,   453,   958,   447,  2757,
    1294,   441,  1619,   499,    13,    14,   967,  2922,  1899,   272,
    1901,   437,   461,  2098,   277,  1840,  1841,  2371,   342,   282,
     981,   482,   346,   447,  1765,   410,  2224,   412,  2023,   362,
    2788,   992,   176,   994,   995,   453,   485,   461,   882,    25,
    2223,   362,  3019,   501,  1661,    31,  2208,   287,   192,   370,
     499,   482,   376,   197,  1817,   492,  2063,  2064,  2065,  2066,
    2067,   485,   170,  2070,  2071,  2072,  2073,  2074,  2075,  2076,
    2077,  2078,  2079,   499,  1220,   499,  1222,  2222,   500,  2224,
    2263,   503,    13,    14,  1219,   406,   369,  3073,   434,  1219,
     234,  1385,  1219,  1219,   503,   441,  1242,   291,  1725,   137,
    1727,  1728,  1248,  1249,   437,  3020,    13,    14,   500,  3037,
    3038,   503,   499,   161,   289,   353,  2123,  2124,   166,    25,
     444,    13,    14,   406,  3039,    31,  2884,     0,   497,   497,
     499,   499,   453,   501,   602,   603,   500,   605,  2192,   503,
     410,   500,   412,    16,   289,  1999,  2000,   500,  1294,   499,
     503,   137,   346,  1963,    56,   369,   500,    30,   500,   503,
    1306,   424,  3090,    36,   447,  2923,   499,    25,   461,   482,
     463,  1996,   435,    31,   161,    48,  1322,   221,   461,   166,
    3095,    54,   376,   392,   224,   152,   395,   235,  1305,  1335,
     171,  1337,   406,  1306,   500,  1341,  1342,   503,   500,   217,
    1332,   503,   485,  1332,   410,  1351,   412,  1353,  1354,  1355,
    1356,  1357,  1358,  1359,   342,  1332,   499,  1061,   500,   500,
    1514,   503,   503,    25,   500,  1332,  2021,   503,  1332,    31,
     270,   137,  1378,   447,  1380,   500,   284,   381,   503,  1385,
    1386,  1387,  1388,  1389,  1390,  1391,  1392,  1393,   235,   152,
     444,  1397,  1398,   291,   152,  2609,  1402,  2241,   152,   500,
    1406,  3019,   503,  1409,  1410,  1411,  1412,  1413,  1414,  1415,
    1416,  1417,   500,  2725,  1420,   503,   634,  2816,   636,   137,
     500,  1427,   500,   503,  1430,   499,   538,  1433,   272,   500,
     330,  2453,   503,   334,   501,   500,   500,   284,   503,   503,
     499,     3,  2500,     5,   342,   291,  1452,   500,   346,    38,
     503,   486,   487,   488,   453,   490,   491,   492,   493,   494,
     495,   500,  1468,  1014,   503,  1619,    84,   500,   177,   370,
     503,    13,    14,  1479,  1480,   137,   465,  1450,   376,   379,
    2101,   486,   487,   488,   450,   490,   491,   492,   493,   494,
     495,   200,  2411,  2094,  2413,  1972,   342,  2023,   316,   500,
     346,    96,   503,   500,   499,   406,   503,  1661,  1514,   500,
    1502,   152,   503,   147,   369,    13,    14,  1523,  1222,  1525,
    2018,   500,    13,    14,   503,   291,  1347,   161,   500,   238,
     376,   503,   166,   187,   188,  1902,  2207,  1904,  2209,   439,
      13,    14,    13,    14,  1248,  1249,   444,  2761,   499,   111,
     112,   406,   453,  2304,    13,    14,  2241,   499,  1564,  2989,
    2990,  1567,  1568,   499,  1570,    13,    14,  2044,    13,    14,
      13,    14,  2158,   291,    13,    14,   342,   172,  2199,    37,
     346,   215,  1588,   292,   499,  2062,   152,  2242,   152,  2244,
    1294,   152,   447,  1599,    13,    14,    13,    14,   444,  1605,
     287,   235,   256,   257,   499,  1597,   461,  2474,    13,    14,
     376,   206,  2089,  1619,    38,  2271,    13,    14,  1439,  2096,
      13,    14,    13,    14,   342,   187,   188,   222,   346,   291,
     485,   357,   358,   745,   233,  2258,   499,   232,  1644,  3069,
       5,    87,     5,    89,   499,    91,   499,  2491,   260,   261,
     284,  1657,   166,  1659,   499,  1661,   357,   358,   376,   293,
     366,   367,   357,   358,  1670,   357,   358,   994,   995,  1675,
     499,   266,     5,   499,   499,   499,   499,   499,   444,  1714,
     342,  1385,     5,  2995,   346,   499,   499,   499,  2731,   499,
     252,   253,   254,   255,   256,   257,   499,   499,   260,   261,
       5,   410,     8,   412,   499,    11,  1712,  1713,  1714,    15,
       5,  1717,   366,   367,   376,   499,   499,   499,   499,  1725,
    1726,  1727,  1728,   148,     9,   434,   444,   499,   437,  1735,
    1765,   462,   503,  1739,   217,   298,  1742,    43,    99,  2606,
     500,    38,   503,   166,    50,  2600,   284,   282,   166,  1300,
     376,  1302,  2503,  2504,  1760,  1761,   233,   499,   353,  1765,
     417,   494,   499,    88,  2241,   503,   147,   417,    56,    75,
     882,    11,    56,  1779,   417,    15,  1782,   263,  1784,  2775,
     161,   417,   444,    23,   500,   166,   508,   417,   461,   501,
     152,   177,    95,   272,    34,    35,   272,  2793,  1804,   433,
     499,  2422,    38,   499,   366,   367,  2491,     9,   499,  1815,
    1514,  2496,   545,   546,   200,  1815,  2537,    37,  1972,   415,
    2441,  1815,   415,  1644,  2301,   497,   497,  1648,   503,  1835,
     417,   417,   417,   417,   215,   500,  1657,  1872,  1830,   145,
     457,  1830,    11,   499,  1850,  1851,   498,   344,    88,   508,
     503,   277,   238,  1830,   235,   503,  2801,   415,   505,  2544,
    2545,  1867,   499,  1830,   499,   417,  1830,  1867,   180,   162,
     176,   171,   500,  1867,   503,   500,   499,   215,  1884,   503,
     613,  2725,   224,   379,   288,   500,   192,   309,    69,   309,
    2044,   197,   503,  2760,    75,   441,  1902,  1903,  1904,   632,
      38,  2897,   499,   284,   224,     6,   292,    88,  2062,   224,
      11,   293,   293,   272,    15,  1619,   325,   479,   480,    20,
      21,    22,    23,    24,   453,   285,    27,   499,   234,    30,
      31,   152,    38,    34,    35,  2089,   117,  1943,   119,   152,
    2998,   461,  2096,   272,   287,   500,   500,   497,   482,  1061,
     538,   482,   500,    54,    38,   500,   500,  1661,  1509,   500,
     287,   500,   498,   500,   171,  2119,  1972,   500,  1519,   501,
    1521,   482,   500,  1524,  2472,   500,   362,   500,   500,  1530,
     171,  1532,  1988,   289,   500,   500,    87,    88,    89,    90,
      91,   500,   500,  1544,   500,   500,   503,   500,  1549,   499,
     499,   417,  1553,  1554,  1555,  1556,   499,  1558,  1559,   499,
     155,   458,   484,   288,   288,  2021,   288,  2023,  2963,   503,
     243,   458,   287,   204,   410,  2502,   412,   439,   503,  2714,
    2715,   488,   447,   417,  2704,  2041,   499,   272,  2044,   152,
    2725,   200,   428,   152,  2050,   152,   417,  2053,   434,   495,
    2056,   437,   433,   417,   279,   279,  2062,  2063,  2064,  2065,
    2066,  2067,   417,  2098,  2070,  2071,  2072,  2073,  2074,  2075,
    2076,  2077,  2078,  2079,  2600,   381,   417,  2083,  2084,   500,
      38,  2087,   344,  2089,   498,   285,  1907,  2241,  2094,   499,
    2096,   272,  2098,    38,  2129,   503,   277,   500,   287,    38,
    2131,  2107,   152,   461,  2110,   500,  2112,   277,   498,   498,
    1222,  2146,    57,  2119,  2120,   143,   497,  2123,  2124,   500,
     501,    11,  2128,  2129,   171,   166,  2132,   500,   500,    52,
     500,   500,  1953,   500,   171,   297,  1248,  1249,  2144,   320,
    2146,   171,   499,   876,  2144,   406,  2146,  2301,   500,   503,
    2144,  2995,  2146,  2159,   485,   336,    38,   745,   180,    38,
     500,   894,   499,   108,   500,   288,   350,   446,    86,   615,
     152,   503,   500,  2828,    97,    57,   175,   483,    57,  2185,
     499,   914,  1294,   428,   490,   491,   492,   493,   494,   495,
     500,   500,   500,    38,    81,   499,  2202,   499,   441,   498,
     123,   171,  2023,   649,   500,   503,   500,  2028,   499,  2030,
     500,   503,   499,  2034,  2035,   408,   499,  2371,   141,   952,
     500,   222,   145,   500,   500,   296,   108,   222,   499,   108,
     294,    56,   184,   500,  2240,  2241,  2242,   488,  2244,   685,
     686,   687,   688,   500,   167,   500,   461,   170,  2725,   202,
     117,    38,   499,   434,   199,   224,  2926,    83,   190,  2882,
     441,   277,   185,   277,   501,   417,   417,   501,  1972,   501,
     501,   501,   512,  1385,   501,  2270,  2268,  1828,    38,   501,
    2270,  2935,   501,  2270,  2270,   501,   272,   501,   500,  1022,
    1023,   501,  1025,   175,   882,  2301,   501,  2289,   501,  2291,
     501,   541,   542,   501,  2905,   250,  2907,   501,   109,   501,
    2995,  2317,   488,   258,   501,  2792,   501,   199,  2795,   501,
     199,   501,   501,   501,   501,   270,   501,   501,   501,   501,
     501,   461,   287,   501,   501,   501,   501,   501,   499,   499,
    2044,   171,  2997,   499,  2842,   499,   222,   500,  2502,   499,
     460,    88,   133,   336,   277,   503,   301,   499,  2062,  2365,
    2366,    38,   285,   152,  2370,  2371,    75,   500,   250,  2375,
     124,   250,  2378,  2379,   152,    38,   258,  2383,   500,   258,
     358,   358,   306,  2537,   624,  2089,    38,   499,   270,   500,
     327,   270,  2096,   446,   495,   499,   499,   499,   499,   499,
    2406,   502,  1514,   348,  2410,   328,  2406,   503,    75,   499,
    2410,   512,  2406,   277,   248,  2119,  2410,   189,   441,   301,
    2241,  2919,   301,   428,   499,   370,    69,   290,    69,    56,
     499,  1982,  2438,   500,   499,   503,    38,   441,   376,   540,
     541,   542,   488,   270,  2265,   390,   287,   428,  2440,    38,
    2442,   499,   290,   290,   499,  2609,   500,   500,   500,   499,
    2466,   500,   360,   202,   287,   287,   348,   500,  2474,   348,
       9,   343,   122,  1061,   500,   439,   357,    24,    35,   500,
     581,   499,     9,   500,  1959,   632,  2600,  2493,   370,  2021,
    1014,   370,   986,  1835,  1496,  2894,  2502,  2915,  3035,   600,
     601,   602,   603,  1850,   605,  1032,  1468,  1619,   390,  2163,
    1031,   390,  2976,  2909,   615,  2814,  1034,  1495,  2995,  1867,
    2146,  2789,  2428,   624,  2395,  2144,  2884,  2883,  2901,  2412,
    2902,  2537,  1347,  2667,  2979,  3023,  1347,  2241,  1347,  1347,
    2980,  1425,  1740,  1836,  1783,  1671,  1570,  1780,   649,  1661,
     996,   652,   601,  1818,     8,   500,  2438,    11,  2162,  2941,
    2697,    15,  2496,  3047,  2999,  3008,  3040,  1048,  2745,  1903,
    1890,  2725,  1305,  2279,  2997,  2217,  3006,  2244,  2994,  1887,
    1964,  1306,  1296,  1531,   685,   686,   687,   688,  1248,    43,
    2225,  2583,  1897,  2240,  2600,  1830,    50,  2301,  1044,  1332,
    2606,  1047,  1450,  2609,  2876,  1043,  2612,  2761,  2429,  2201,
    1657,  2443,  2200,  2274,  1060,  2621,  2622,  2923,  2672,  2625,
    1451,    75,  2993,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2639,  1222,  1081,    -1,    -1,  2792,  2639,
      -1,  2795,  2648,    -1,    -1,  2639,     0,  2653,  2648,    -1,
    2656,    -1,  2203,  2653,  2648,    -1,  2656,  2663,  2664,  2653,
    1248,  1249,  2656,    -1,    -1,    -1,  1399,  2371,    -1,    -1,
    2676,    -1,  2678,    -1,    -1,    -1,  2676,    -1,    -1,  2230,
      -1,    -1,  2676,     8,    -1,    -1,    11,    -1,    -1,  2695,
      15,   145,    -1,    -1,  2245,  2246,  2247,  2248,  2249,  2250,
    2251,  2252,  2253,  2254,    -1,    -1,  1294,    -1,    -1,    -1,
      -1,    -1,    -1,   953,    -1,    -1,    -1,    -1,    43,  2725,
      -1,    -1,   176,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,
      -1,    95,    -1,   197,  2736,    -1,    -1,    -1,    -1,    -1,
      75,  2757,    -1,    -1,  2760,  2761,    -1,  2757,    -1,    -1,
      -1,     8,    -1,  2757,    11,    -1,  2801,    -1,    15,  1502,
      -1,    18,    19,    20,  1014,  1015,    -1,  1223,  2784,  2600,
     234,    -1,  2788,    -1,    -1,   886,  2792,    -1,  2788,  2795,
      -1,    -1,    -1,   147,  2788,  2801,    -1,  1385,  2502,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,
    2816,    -1,   166,  2819,    -1,    -1,    -1,   171,    -1,    -1,
     145,    -1,  2828,    -1,    -1,    -1,   180,  2833,    -1,    -1,
     184,    -1,    -1,  2537,    -1,   289,    -1,    -1,    -1,    -1,
      -1,  2995,    -1,    -1,    -1,  2666,    -1,    -1,    -1,    -1,
      -1,   176,   953,    -1,    -1,    -1,    -1,    -1,    -1,     8,
    1972,   215,    11,    -1,  1597,  2857,    15,   192,    -1,    18,
      19,    20,   197,    -1,    -1,    -1,    -1,    -1,  2884,    -1,
      -1,   235,    -1,    -1,  2884,    -1,    -1,    -1,    -1,    -1,
    2884,    -1,    -1,    -1,    -1,   996,    -1,    -1,    -1,  2905,
      -1,  2907,    -1,  2909,  2725,  2609,    -1,  2913,    -1,   234,
     538,    -1,    -1,  1014,  1015,    -1,    -1,  2923,    -1,    -1,
      -1,    -1,  2473,  2923,  2916,    -1,  1514,   381,    -1,  2923,
     284,    -1,  2044,   287,    -1,    -1,    -1,  2943,    -1,   293,
      -1,    -1,  1043,  1044,  1045,    -1,  1047,  1048,    -1,    -1,
    2062,    -1,    -1,    -1,    -1,    -1,    -1,  2963,    -1,  1060,
      -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,
    2976,    -1,   219,   327,    -1,    -1,  1077,  2089,    -1,    -1,
    1081,  1714,  1428,    -1,  2096,    -1,    -1,    -1,    -1,  2995,
      -1,  2997,    -1,    -1,    -1,    -1,   350,    -1,    -1,    -1,
      -1,    -1,    -1,  1449,    -1,  1451,    -1,  2119,    -1,    -1,
      -1,    -1,    -1,  3019,    -1,    -1,  3022,  3023,    -1,  3019,
    3012,  2725,    -1,    -1,    -1,  3019,    -1,    -1,    -1,   483,
    2851,  1619,  1765,    -1,    -1,    -1,   490,   491,   492,   493,
     494,   495,   289,    -1,    -1,    -1,    -1,  1493,   197,  3055,
    1783,    -1,   406,    -1,    -1,    -1,   381,  2761,    -1,  1299,
    1300,    -1,  1302,    -1,    -1,    -1,  1799,    -1,    -1,    -1,
     219,    -1,    -1,  1661,    -1,    -1,    -1,    -1,    -1,   433,
      -1,    -1,  1815,    -1,    -1,    -1,   538,   441,  2792,    -1,
    3096,  2795,    -1,    -1,    -1,    -1,    -1,  1830,    -1,    -1,
     538,    -1,    -1,    -1,   458,    -1,   460,   461,    -1,    -1,
      -1,    -1,    -1,     8,  1215,    -1,    11,   745,    -1,    -1,
      15,    -1,  1223,    18,    19,    20,    -1,    -1,    -1,  2241,
      -1,  1232,  1578,  1579,  1867,    -1,    -1,    -1,    -1,  1872,
     289,    -1,    -1,   497,    -1,    -1,   500,   501,   502,    -1,
      -1,    -1,    -1,    -1,    -1,  2706,    -1,    -1,   483,    -1,
    1261,    -1,    -1,    -1,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,  2995,  2726,  2727,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2301,
      -1,  2742,    -1,    -1,    -1,  1296,  1297,    -1,  1299,  1300,
      -1,  1302,  1303,    -1,    -1,    -1,     8,    -1,    -1,    11,
     111,   112,    -1,    15,    -1,    -1,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
      -1,  1352,    -1,    -1,   882,    -1,    -1,    -1,    -1,  2371,
      -1,     8,  1363,    -1,    11,    -1,    -1,  2818,    15,  1509,
      -1,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,  1519,
      -1,  1521,    -1,    -1,  1524,    -1,   187,   188,    35,    -1,
    1530,  2995,  1532,   745,    -1,  1396,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1544,    -1,    -1,   745,    -1,  1549,
      -1,    -1,    -1,  1553,  1554,  1555,  1556,    -1,  1558,  1559,
      -1,    -1,    -1,    -1,   219,    -1,  1427,  1428,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,  1449,    -1,
    1451,   252,   253,   254,   255,   256,   257,    -1,    -1,   260,
     261,     8,    -1,  1809,    11,  2098,    -1,    -1,    15,    -1,
      -1,    18,    19,    20,    -1,     0,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1972,    -1,    -1,    -1,    35,    -1,
    2502,    -1,  1493,    -1,   289,    -1,  2129,    -1,    -1,    -1,
      -1,    -1,  1503,    -1,  1505,    -1,    -1,  1508,  1509,    -1,
      -1,  2144,    -1,  2146,    -1,    -1,    -1,   219,  1519,  1520,
    1521,  1522,    -1,  1524,    -1,  2537,    -1,    -1,    -1,  1530,
     882,  1532,    -1,  1061,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1543,  1544,   882,    -1,    -1,  1548,  1549,    -1,
      -1,    -1,  1553,  1554,  1555,  1556,  2044,  1558,  1559,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
      95,    -1,   219,    -1,  2062,    -1,    -1,  1578,  1579,  1580,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
      -1,    -1,     8,  1733,  1595,    11,    -1,  2609,    -1,    15,
    1740,  2089,    18,    19,    20,    -1,    -1,    -1,  2096,    -1,
      -1,    -1,    -1,    -1,  1960,    -1,    -1,    -1,    -1,    35,
      -1,    -1,   147,  1969,  1970,  1971,    -1,    -1,    -1,    -1,
      -1,  2119,    -1,    -1,    -1,  2268,   161,    -1,    -1,    -1,
      -1,   166,   289,    -1,  1990,    -1,   171,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   180,  2289,    -1,  2291,   184,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   219,    -1,    -1,    -1,    -1,    -1,   479,   480,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1828,    -1,
     215,   486,   487,   488,  1222,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1061,
     235,    -1,    -1,  2725,    -1,    -1,    -1,    -1,    -1,    -1,
    1248,  1249,    -1,  1061,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1733,    -1,    -1,    -1,    -1,    -1,    -1,  1740,
      -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,  2761,
      -1,    -1,    -1,  2241,    -1,    -1,    -1,    -1,    -1,   284,
      -1,    -1,   287,    -1,    -1,    -1,  1294,    -1,   293,    -1,
      -1,    -1,    -1,  2406,    -1,    -1,  1777,  2410,    -1,    -1,
    2792,    -1,    -1,  2795,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,  2141,  2142,  2143,    -1,    -1,
      -1,    -1,   327,   219,    -1,    -1,    -1,  2440,  1809,  2442,
      -1,    -1,    -1,  2301,  1815,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   350,    -1,  1828,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2182,    -1,    -1,   486,
     487,   488,  1982,   490,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1385,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1867,    -1,  1869,    -1,
    1222,  1872,    -1,   289,    -1,  1876,    -1,    -1,    -1,    -1,
      -1,   406,    -1,  2371,  1222,    -1,    -1,    -1,    -1,    -1,
      -1,  1892,    -1,    -1,    -1,    -1,  1248,  1249,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   433,    -1,
    1248,  1249,    -1,    -1,    -1,    -1,   441,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2272,    -1,    -1,    -1,
      -1,    -1,    -1,   458,    -1,   460,   461,    -1,    -1,   486,
     487,   488,  1294,   490,   491,   492,   493,   494,   495,    -1,
    2583,    -1,    -1,    -1,  1955,    -1,  1294,    -1,    -1,  1960,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1968,  1969,  1970,
    1971,    -1,   497,    -1,    -1,   500,   501,   502,    -1,    -1,
      -1,  1982,    -1,  2995,    -1,    -1,  1514,    -1,    -1,  1990,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2002,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2502,  2648,    -1,  2018,    -1,    -1,
    2653,    -1,    -1,  2656,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2032,  2033,  1385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2387,  2388,  2389,  2390,    -1,    -1,  1385,    -1,  2537,
      -1,    -1,    -1,    -1,  2055,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2203,    -1,    -1,    -1,    -1,    -1,    -1,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2230,  1619,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2736,    -1,  2245,  2246,  2247,  2248,  2249,
    2250,  2251,  2252,  2253,  2254,    -1,    -1,    -1,    -1,    -1,
      -1,  2609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1661,  2480,    -1,    -1,    -1,    -1,    -1,
    2141,  2142,  2143,  2144,    -1,  2146,  2147,  2148,    -1,    -1,
      -1,    -1,  2153,  2154,    -1,  2788,   111,   112,    -1,    -1,
      -1,    -1,  1514,    -1,    -1,    -1,    -1,    -1,  2801,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1514,    -1,    -1,    -1,
      -1,  2182,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    -1,    -1,    -1,    -1,    31,    -1,  2200,
      -1,    -1,  2203,    -1,    38,    -1,  2207,  2208,  2209,    -1,
    2211,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    57,  2857,    -1,    -1,    -1,    -1,  2230,
      -1,  2232,   187,   188,    -1,    -1,    -1,  2725,    -1,    -1,
      -1,    -1,    -1,    38,  2245,  2246,  2247,  2248,  2249,  2250,
    2251,  2252,  2253,  2254,    -1,    -1,    -1,   600,   601,    -1,
      -1,  2401,    57,    -1,    -1,    -1,  2267,  1619,    -1,    -1,
      -1,  2272,    -1,  2761,   108,    -1,  2416,    -1,  2279,    -1,
      -1,  1619,    -1,  2916,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2293,    -1,    -1,    -1,    -1,   252,   253,   254,
     255,   256,   257,   137,  2792,   260,   261,  2795,    -1,  1661,
    2311,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   662,
     663,    -1,   117,  1661,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2473,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2361,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3012,
     175,    -1,    -1,    -1,  2385,    -1,  2387,  2388,  2389,  2390,
      -1,  2737,    -1,  2394,  2395,    -1,  2397,  2398,    -1,    -1,
    2401,    -1,    -1,    -1,   199,  2406,    -1,    -1,  2754,  2410,
      -1,   366,   367,    -1,    -1,  2416,   250,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2433,    -1,    -1,    -1,   270,  2438,    -1,    -1,
      -1,    -1,  2443,    -1,  1972,    -1,  2447,    -1,    -1,    -1,
      -1,    -1,  2453,     8,    -1,   250,    11,   291,  2459,    -1,
      15,    -1,    -1,   258,    -1,    -1,    -1,   301,    -1,    -1,
      -1,  2472,  2473,    -1,    -1,   270,    -1,   272,    -1,  2480,
    2826,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
      -1,    -1,    -1,    -1,    -1,    50,  2497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2645,   301,  2995,   342,    -1,
    2856,    -1,   346,    -1,   348,    -1,  2044,    -1,  2658,    -1,
      75,  2661,    -1,    -1,   479,   480,    -1,     0,    -1,    -1,
      -1,    -1,    -1,    -1,  2062,    -1,   370,    -1,   881,    -1,
      -1,    -1,   376,    -1,   499,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   348,    -1,   898,   390,    -1,    -1,    -1,
      -1,  2089,    -1,    -1,    -1,    -1,  2706,    -1,  2096,    -1,
      -1,    -1,  2573,    -1,    -1,   370,    -1,    -1,    -1,    -1,
      -1,  2582,    -1,    -1,   927,    -1,  2726,  2727,    -1,    -1,
     145,  2119,    -1,  2594,    -1,   390,    -1,   392,    -1,    -1,
     395,    -1,  2742,    -1,   947,   948,   949,    -1,    -1,   952,
     444,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
    1972,   176,    95,    15,    -1,    -1,    18,    19,    20,  2630,
      -1,    -1,   975,    -1,  1972,  2775,    -1,   192,  2639,  2640,
      -1,  2642,   197,    -1,  2645,    -1,    -1,  2648,    -1,    -1,
      -1,    43,  2653,  2793,    -1,  2656,    -1,  2658,    50,    -1,
    2661,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   147,  2676,    -1,    -1,  2818,   234,
      -1,  1024,    -1,    75,    -1,  1028,  1029,    -1,   161,    -1,
      -1,    -1,  2044,   166,    -1,    -1,    -1,    -1,   171,    -1,
      -1,    -1,    -1,    -1,   499,  2706,  2044,   180,    -1,    -1,
    2062,   184,    -1,  2241,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2062,  2726,  2727,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   289,    -1,  2737,  2089,  2739,    -1,
      -1,  2742,   215,  1086,  2096,    -1,    -1,    -1,    -1,    -1,
      -1,  2089,    -1,  2754,  1097,    -1,  2757,  2897,  2096,    -1,
      -1,  2901,   235,    -1,    -1,    -1,    -1,  2119,    -1,    -1,
      -1,    -1,    -1,  2301,  2775,    -1,    -1,    -1,  1121,    -1,
      -1,  2119,    -1,    -1,   176,    -1,    -1,  2788,    -1,    -1,
      -1,    -1,  2793,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,
    2811,   284,    -1,    -1,   287,  2816,    -1,  2818,    -1,    -1,
     293,    -1,    -1,    -1,    -1,  2826,   381,  2967,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2842,   234,  2371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   327,  2856,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   350,    -1,    -1,
      -1,    -1,    -1,  2884,    -1,    -1,    -1,    -1,    -1,  2241,
      -1,    -1,  2893,    -1,    -1,    -1,  2897,   289,    -1,    -1,
    2901,    -1,    -1,  2241,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2919,  2920,
    2921,    -1,  2923,    -1,    -1,    -1,    -1,    -1,   483,    -1,
      -1,    -1,    -1,   406,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2301,
      -1,  2952,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     433,    -1,    -1,  2301,    -1,    -1,  2967,    -1,   441,    -1,
      -1,    -1,    -1,    -1,  2502,    -1,    -1,    -1,  2979,    -1,
      -1,    -1,    -1,    -1,    -1,   458,    -1,   460,   461,   381,
      -1,    -1,  2993,    -1,    -1,    -1,    -1,    -1,  1341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1351,  2537,
    1353,    -1,  3013,  1356,  1357,  1358,  1359,    -1,  3019,  2371,
      -1,    -1,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
      -1,    -1,    -1,  2371,  3035,  3036,    -1,  1380,    -1,    -1,
      -1,    -1,    -1,  1386,  1387,  1388,  1389,  1390,  1391,  1392,
      -1,    -1,    -1,    -1,  1397,  1398,    -1,    -1,    -1,  1402,
      -1,    -1,    -1,  1406,    -1,    -1,  1409,  1410,  1411,  1412,
    1413,  1414,  1415,  1416,  1417,    -1,    -1,  1420,    -1,    -1,
      -1,  2609,    -1,    -1,  1427,    -1,    -1,  1430,    -1,    -1,
      -1,   483,    -1,    -1,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,     0,    -1,  1452,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    -1,
      -1,    -1,   968,    -1,    -1,    -1,  1479,  1480,    31,    -1,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2502,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2502,    58,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1009,    -1,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2537,    -1,    -1,    81,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2725,    -1,  2537,
      93,    -1,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     113,  1564,    -1,    -1,  1567,  1568,    -1,  1570,    -1,    -1,
      -1,    -1,    -1,  2761,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
     143,    -1,    -1,    -1,    -1,    -1,  1599,  2609,   151,    -1,
     153,   154,    -1,     8,  2792,    -1,    11,  2795,    -1,    -1,
      15,  2609,    -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1125,
      -1,    -1,    -1,    -1,    -1,    -1,  1132,    -1,    43,    -1,
      -1,    -1,    -1,   196,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,  1659,    -1,   211,    15,
      -1,    -1,    -1,    -1,    -1,    -1,     8,  1670,    -1,    11,
      75,    -1,  1675,    15,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   237,    -1,    -1,    43,     8,    -1,
      -1,    11,    -1,    -1,    50,    15,    16,    17,    18,    19,
      20,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
      -1,  1714,    -1,  2725,    -1,    35,    -1,    -1,    -1,    75,
      -1,    -1,  1725,    43,  1727,  1728,    -1,  2725,    -1,    -1,
      50,    -1,  1735,    75,    -1,    -1,  1739,    -1,    -1,  1742,
     145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2761,
      -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,
      -1,   314,    -1,  2761,   317,    -1,    -1,    -1,    -1,    -1,
      -1,   176,    -1,    -1,    -1,    -1,  1779,    -1,    -1,  1782,
    2792,  1784,    -1,  2795,    -1,    -1,    -1,   192,    -1,   145,
      -1,    -1,   197,   346,  2792,    -1,    -1,  2795,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,    -1,  2995,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,
     176,    -1,    -1,   376,    -1,    -1,    -1,   380,    -1,   234,
      -1,    -1,  1835,    -1,   176,    -1,   192,   390,    -1,    -1,
      -1,   197,    -1,  1339,    -1,    -1,    -1,  1850,  1851,   402,
     192,    -1,    -1,   406,  1350,   197,   176,    -1,  1354,    -1,
      -1,    -1,    -1,    -1,  1360,  1361,  1362,    -1,    -1,    -1,
      -1,    -1,   192,  1369,    -1,    -1,    -1,   197,   234,    -1,
      -1,  1884,    -1,    -1,   289,    -1,    -1,    -1,    -1,   442,
      -1,    -1,   234,    -1,   447,    -1,    -1,    -1,    -1,   219,
     220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,    -1,
      -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1426,     8,   485,   289,    11,    -1,    -1,    -1,    15,    -1,
    1943,    18,    19,    20,    -1,    -1,   499,   289,    -1,   502,
      -1,    -1,   272,    -1,    -1,   275,    -1,    -1,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,  1464,   289,
      -1,    -1,   292,    50,    -1,    -1,   381,    -1,    -1,    -1,
      -1,    -1,  1478,  2995,    -1,  1988,    -1,  1483,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2995,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2041,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2050,    -1,    -1,
    2053,    -1,    -1,  2056,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,    -1,
    2083,  2084,    -1,    -1,  2087,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,  2098,    -1,    -1,    -1,   176,
      -1,    -1,    -1,    -1,  2107,    -1,    -1,  2110,    -1,  2112,
      -1,    -1,    -1,    -1,    -1,   192,    -1,  2120,    -1,    -1,
     197,    -1,    -1,    -1,    -1,  2128,  2129,   483,    -1,  2132,
      -1,    -1,    -1,    -1,   490,   491,   492,   493,   494,   495,
      -1,   483,   219,   220,    -1,    -1,    -1,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,  2159,   234,    -1,    -1,
      -1,    -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,  1673,    -1,    -1,
      -1,    -1,  2185,   503,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   272,  1692,    -1,   275,  2202,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   289,    -1,  1710,   292,  1712,  1713,    -1,  1715,
      -1,  1717,    -1,    -1,    -1,  1721,    -1,    -1,  1724,    -1,
      -1,    -1,    -1,  1729,    -1,    -1,  1732,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1744,    -1,
      -1,    -1,  1748,  1749,  1750,  1751,  1752,  1753,  1754,    -1,
      -1,    -1,    -1,    -1,  1760,  1761,    -1,  1763,  1764,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1775,
      -1,    -1,  1778,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,  1795,
      -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2317,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1827,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2365,  2366,    -1,    -1,    -1,  2370,    -1,    -1,
      -1,    -1,  2375,    -1,    -1,  2378,  2379,    -1,    -1,    -1,
    2383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   483,    -1,    -1,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2438,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    -1,    -1,    18,    19,    20,    -1,
      -1,    -1,  1948,  1949,  1950,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2466,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,     3,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
    2493,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    -1,    -1,    38,    -1,    -1,    -1,    -1,    43,
       8,    -1,    -1,    11,    -1,    -1,    50,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2040,    -1,    -1,    35,    -1,    -1,
    2046,    75,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,
      -1,    -1,    50,  2059,  2060,  2061,    -1,  2063,  2064,  2065,
    2066,  2067,    -1,    -1,  2070,  2071,  2072,  2073,  2074,  2075,
    2076,  2077,  2078,  2079,  2080,    -1,    -1,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2099,   176,    -1,  2102,    -1,  2104,  2612,
      -1,    -1,  2108,  2109,    -1,    -1,    -1,    -1,  2621,  2622,
     192,    -1,  2625,    -1,    -1,   197,  2122,  2123,  2124,  2125,
      -1,  2127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,    -1,
      -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2663,  2664,   234,    -1,    -1,    -1,    -1,    -1,   192,    -1,
      -1,     8,    -1,   197,    11,  2678,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,   176,    -1,
      -1,    -1,  2695,    -1,    -1,   219,   220,    -1,    35,    -1,
     272,    38,    -1,   275,   192,    -1,    43,    -1,  2204,   197,
     234,    -1,    -1,    50,    -1,    -1,    -1,   289,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,   272,    -1,
      -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,   289,    -1,    11,   292,    -1,
      -1,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,  2784,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    -1,  2292,    -1,  2801,    43,
      -1,   289,    -1,    -1,   292,    -1,    50,    -1,    -1,   381,
      -1,    -1,    -1,  2816,    -1,    -1,  2819,    -1,    -1,    -1,
      -1,    -1,  2318,    -1,    -1,    -1,  2322,  2323,    -1,  2325,
    2833,    75,  2328,  2329,  2330,  2331,  2332,    -1,    -1,   176,
    2336,  2337,  2338,  2339,  2340,  2341,  2342,  2343,  2344,  2345,
    2346,  2347,    -1,    -1,    -1,   192,    -1,   381,    -1,    -1,
     197,  2357,    -1,    -1,    -1,    -1,    -1,    -1,  2364,    -1,
      -1,  2367,    -1,  2369,    -1,    -1,    -1,  2373,    -1,    -1,
    2376,  2377,   219,   220,  2380,  2381,    -1,    -1,  2384,    -1,
      -1,    -1,    -1,   381,    -1,    -1,    -1,   234,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2909,    -1,    -1,    -1,
    2913,   483,    -1,    -1,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,  2423,    -1,    -1,
      -1,    -1,   176,    -1,    -1,   272,    -1,    -1,   275,    -1,
    2943,  2437,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,
      -1,    -1,   289,   197,  2450,   292,    -1,    -1,    -1,   483,
      -1,    -1,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,  2976,    -1,   219,   220,    -1,  2474,    -1,
      -1,    -1,    -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,
     234,    -1,    -1,    -1,    -1,   483,    -1,    -1,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,   500,    -1,     8,    -1,    -1,    11,    -1,  3022,
    3023,    15,    16,    17,    18,    19,    20,    -1,   272,    -1,
      -1,   275,    -1,    -1,    -1,    -1,    -1,    76,    -1,    -1,
      -1,    35,    -1,    -1,   381,   289,    -1,    -1,   292,    43,
      -1,    -1,  3055,    92,    -1,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3096,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2602,   146,    -1,    -1,
    2606,    -1,    25,    -1,    -1,    -1,    -1,   156,    31,  2615,
    2616,  2617,    -1,    -1,  2620,    38,    -1,  2623,  2624,   168,
      -1,    -1,  2628,    -1,   173,    -1,    -1,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    57,    -1,   483,    -1,    -1,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
      -1,   200,    -1,   500,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,  2692,    -1,   192,    -1,
      -1,    -1,  2698,   197,    -1,    -1,   245,    -1,    -1,    -1,
     249,    -1,    -1,    -1,    -1,  2711,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   137,   219,   220,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,
     234,    -1,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,
      -1,    -1,    -1,  2759,  2760,    -1,    -1,    -1,    -1,  2765,
    2766,  2767,    -1,   312,    -1,    -1,    -1,    -1,   272,    -1,
      -1,   275,    -1,    -1,    -1,    -1,   199,   326,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2809,  2810,    -1,    -1,    -1,    -1,    -1,
     359,    -1,    -1,   362,    -1,    -1,    -1,    -1,    -1,  2825,
      -1,   370,    -1,    -1,   373,    -1,    -1,   250,  2834,    -1,
      -1,    -1,    -1,    -1,    -1,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,    -1,    -1,    -1,   270,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,    -1,
      -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,   291,    -1,
      -1,    -1,  2878,   422,    -1,    -1,    -1,   381,   301,   428,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2896,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   453,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2918,    -1,    -1,    -1,    -1,    -1,    -1,   342,
      -1,    -1,    -1,   346,    -1,   348,    -1,    -1,    -1,    -1,
      -1,  2937,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,    -1,
      -1,    -1,    -1,   376,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2981,    -1,    -1,    -1,   483,
      -1,    -1,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3010,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,   444,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,  3058,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,   132,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,   492,    -1,    -1,    -1,    -1,   497,    -1,   499,
     500,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
     485,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,   500,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,   171,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    -1,    -1,    36,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,   492,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,   492,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,   492,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,   500,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,   500,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,     3,     4,     5,     6,     7,   499,
       9,    10,    -1,    -1,    -1,    -1,   506,   507,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,    -1,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,    -1,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   490,   491,     3,    -1,    -1,    -1,    -1,   497,    -1,
     499,    -1,    -1,    -1,    -1,   504,    -1,   506,   507,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    -1,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,    -1,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,    -1,   176,   177,    -1,   179,
      -1,    -1,    -1,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,    -1,    -1,   273,   274,   275,   276,    -1,    -1,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,    -1,   296,   297,   298,    -1,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,    -1,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,    -1,   422,    -1,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   479,
     480,   481,   482,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
     500,    -1,    -1,   503,    38,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,   172,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   500,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
      -1,   485,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
      -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,   287,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,     3,    -1,     5,    -1,    -1,    -1,    -1,   490,
     491,   492,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,     3,    -1,   485,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,   376,   377,   378,   379,   380,
      -1,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
      -1,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,     3,    -1,   485,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,   376,   377,   378,   379,   380,
      -1,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
      -1,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,     3,   485,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,    -1,     3,     4,     5,    -1,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    15,    -1,   499,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    -1,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
      -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
     298,    -1,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,    -1,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,     3,    -1,   486,   487,
     488,     8,   490,   491,   492,   493,   494,   495,    15,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    -1,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,    -1,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,    -1,   376,
     377,   378,   379,   380,    -1,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,    -1,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,    -1,    -1,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,     8,    -1,
      -1,    11,    -1,    -1,    43,    15,    16,    17,    18,    19,
      20,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,     8,    -1,    75,    11,    -1,    -1,
      50,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    -1,     8,    -1,    75,    11,    -1,    -1,    43,
      15,    16,    17,    18,    19,    20,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
      -1,    75,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,    -1,
      -1,     8,    -1,    -1,    11,    -1,   176,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
     219,   220,   192,    -1,    -1,    -1,    -1,   197,    35,    -1,
      -1,    -1,    -1,    -1,    -1,   234,    43,    -1,    -1,    -1,
      -1,    -1,   176,    50,    -1,    -1,    -1,    -1,    -1,   219,
     220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,
      -1,    -1,    -1,   197,   234,    -1,    -1,    -1,    75,    -1,
      -1,   176,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   219,   220,   192,    -1,    -1,
     289,    -1,   197,   292,    -1,    -1,    -1,    -1,    -1,    -1,
     234,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   219,   220,    -1,    -1,    -1,   289,
      -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   234,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,
      -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,   176,
     275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,    -1,   289,   192,    -1,   292,    -1,    -1,
     197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    -1,    -1,    -1,   272,    43,    -1,   275,    -1,
      -1,    -1,    -1,    50,    -1,    -1,   381,    -1,    -1,    -1,
      -1,    -1,   289,    -1,   483,   292,    -1,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    75,    -1,
      -1,   500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
     500,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    -1,   483,
      -1,    -1,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    35,    -1,    -1,    -1,   500,    -1,    -1,    -1,
      43,    -1,    -1,    -1,   381,    -1,    -1,    50,   483,    -1,
      -1,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,   500,    -1,     8,    -1,   176,
      11,    -1,    75,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,    -1,     8,    -1,    75,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,   483,    -1,    -1,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    35,
      -1,    -1,    -1,   500,    -1,   272,    -1,    43,   275,    -1,
      -1,    -1,    -1,   176,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   219,   220,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,   192,    -1,    11,    -1,    -1,   197,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,   272,
      -1,    -1,   275,    -1,   381,    -1,    -1,    35,   219,   220,
      -1,    -1,    -1,    -1,    -1,    43,   289,    -1,    -1,   292,
      -1,    -1,    50,   234,    -1,    -1,    -1,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    75,    -1,    -1,
      -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   219,   220,    -1,    -1,    -1,   289,    -1,
      -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   483,    -1,   381,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,   500,    -1,    -1,   272,    -1,    -1,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,     8,    -1,   292,    11,   176,    -1,
      -1,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,
     381,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,
      -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
     483,    75,    -1,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,   500,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,   500,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,
      -1,    -1,    -1,   197,    -1,    -1,    -1,   483,    -1,    -1,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,    -1,    -1,   381,   500,   219,   220,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,
      -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   483,    -1,    -1,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,   500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   483,
      -1,    -1,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,   498,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   492,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      -1,    47,    48,    49,    50,    51,    -1,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,    -1,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
      -1,   297,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,    -1,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,   447,   448,    -1,   450,    -1,   452,   453,   454,   455,
     456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,     3,     4,     5,
      -1,    -1,    -1,     9,    -1,    -1,   492,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,   232,   233,   234,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,    -1,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,   287,    -1,   289,   290,   291,    -1,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,     3,     4,     5,
      -1,    -1,    -1,     9,   490,   491,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,   232,   233,   234,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,    -1,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,   287,    -1,   289,   290,   291,    -1,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,     3,     4,     5,
      -1,    -1,    -1,     9,   490,   491,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,   232,   233,   234,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,    -1,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,   287,    -1,   289,   290,   291,    -1,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,    -1,     8,
      -1,    -1,    11,    -1,   490,   491,    15,    16,    17,    18,
      19,    20,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    35,
      -1,    50,    -1,    -1,    -1,    -1,    -1,    43,     8,    -1,
      -1,    11,    -1,    -1,    50,    15,    16,    17,    18,    19,
      20,     8,    -1,    -1,    11,    -1,    75,    -1,    15,    16,
      17,    18,    19,    20,    -1,    35,    -1,    -1,    -1,    75,
      -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    35,    -1,
      50,    38,    -1,    -1,    -1,    -1,    43,     8,    -1,    -1,
      11,    -1,    -1,    50,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    75,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    -1,    -1,   176,    -1,    35,
     166,    -1,    38,    -1,    -1,   171,    -1,    43,    -1,    -1,
     176,    -1,    -1,   192,    50,    -1,    -1,    -1,   197,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,   165,    -1,    -1,    -1,    75,
     219,   220,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,   219,   220,   234,    -1,    -1,    -1,   176,
      -1,    -1,   192,    -1,    -1,    -1,    -1,   197,   234,    -1,
      -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,
     220,    -1,    -1,   272,    -1,   176,   275,    -1,    -1,    -1,
      -1,    -1,   219,   220,   234,    -1,   272,    -1,    -1,   275,
     289,   192,    -1,   292,    -1,    -1,   197,   234,    -1,    -1,
      -1,    -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,
     176,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,   272,   192,    -1,   275,   289,
      -1,   197,   292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   219,   220,   315,    -1,    -1,    -1,    -1,
      -1,   272,    -1,    -1,   275,    -1,    -1,    -1,   234,    -1,
      -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,   289,    -1,
      -1,   292,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   310,
      -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,
      -1,    -1,   441,    -1,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,    -1,    -1,    -1,   483,    -1,    -1,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,   483,    -1,    -1,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,   483,    -1,    -1,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   483,    -1,    -1,   486,   487,   488,    35,   490,
     491,   492,   493,   494,   495,    -1,    43,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,    75,    -1,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,     8,
      38,    -1,    11,    -1,    -1,    43,    15,    16,    17,    18,
      19,    20,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    -1,    -1,    75,    -1,    -1,
      -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   171,    -1,    -1,    -1,    -1,   176,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,     8,    -1,
     197,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   219,   220,    -1,    35,    -1,    -1,    38,    -1,
      -1,    -1,    -1,    43,    -1,    -1,    -1,   234,    -1,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   192,   272,    -1,    -1,   275,   197,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,
      -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
      -1,   219,   220,   192,    -1,    -1,    -1,    -1,   197,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     219,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,     8,
      -1,   289,    11,    -1,   292,    -1,    15,    16,    17,    18,
      19,    20,   192,   272,   381,    -1,   275,   197,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,
     289,    -1,    -1,   292,    43,    -1,    -1,    -1,    -1,   219,
     220,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    75,    -1,    -1,    15,
      16,    17,    18,    19,    20,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    -1,    -1,    18,    19,    20,    -1,    35,
      -1,    -1,   272,   381,    -1,   275,    -1,    43,    -1,    -1,
      -1,    -1,    35,    -1,    50,    -1,    -1,    -1,    -1,   289,
      43,    -1,   292,    -1,    -1,    -1,   483,    50,    -1,   486,
     487,   488,   381,   490,   491,   492,   493,   494,   495,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,   414,    15,    -1,    -1,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    43,    -1,    -1,    -1,   197,    -1,
      -1,    50,    -1,    -1,    -1,   483,    -1,    -1,   486,   487,
     488,   381,   490,   491,   492,   493,   494,   495,    -1,    -1,
     219,   220,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   234,    -1,   486,   487,   488,
     176,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    -1,   192,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,
      -1,    -1,    -1,   272,   197,    -1,   275,    -1,    -1,    -1,
      -1,    -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,
     289,    -1,    -1,   292,    -1,    -1,   219,   220,   234,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   234,    -1,   483,    -1,    -1,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,   272,
      -1,    -1,   275,   289,    -1,    -1,   292,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,
     219,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,    -1,    -1,   234,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,    -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   483,    -1,    -1,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,    -1,    -1,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
     483,    -1,    -1,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,     5,    -1,    -1,   483,    -1,    -1,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,   287,    -1,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,   168,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
     434,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,   168,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
     234,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
     434,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
       4,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      -1,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,    -1,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,    -1,   176,   177,    -1,   179,    -1,    -1,    -1,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,    -1,    -1,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,    -1,   296,   297,   298,    -1,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,    -1,
     314,   315,    -1,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,    -1,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
      -1,   450,    -1,   452,   453,   454,   455,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
      -1,   450,    -1,   452,   453,   454,   455,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
      -1,   450,    -1,   452,   453,   454,   455,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
      -1,   450,    -1,   452,   453,   454,   455,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    -1,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,    -1,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,    -1,   176,   177,    -1,
     179,    -1,    -1,    -1,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,    -1,    -1,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,    -1,   296,   297,   298,
      -1,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,    -1,   314,   315,    -1,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,    -1,   422,    -1,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,    -1,   448,
      -1,   450,   451,   452,   453,   454,   455,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     479,   480,   481,   482,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      -1,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,    -1,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,    -1,    -1,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,    -1,   296,   297,   298,    -1,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,    -1,
     314,   315,    -1,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,    -1,   378,   379,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,    -1,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   479,   480,   481,   482,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    -1,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,    -1,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,    -1,   176,   177,    -1,
     179,    -1,    -1,    -1,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,    -1,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,    -1,    -1,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,    -1,   296,   297,   298,
      -1,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,    -1,   314,   315,    -1,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,    -1,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,    -1,   422,    -1,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,    -1,   448,
      -1,   450,   451,   452,   453,   454,   455,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     479,   480,   481,   482,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,    -1,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    21,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      31,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    58,    58,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    70,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    93,    93,    95,    95,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   113,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   127,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   137,   137,    -1,    -1,    -1,
      -1,   143,   143,    -1,    -1,    -1,    -1,    -1,    -1,   151,
     151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   167,   167,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   211,
     211,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   237,   237,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   314,   314,    -1,   317,   317,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   346,   346,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   355,   355,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   369,   369,    -1,
      -1,    -1,    -1,    -1,   376,   376,    -1,    -1,   380,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   390,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     402,   402,    -1,    -1,   406,   406,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     442,   442,    -1,    -1,    -1,   447,   447,    -1,    -1,   451,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   485,   485,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,   499
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    21,    31,    33,    34,    49,    58,    70,    81,    93,
      95,   113,   127,   137,   143,   151,   153,   154,   167,   196,
     211,   237,   314,   317,   346,   355,   369,   376,   380,   390,
     402,   406,   442,   447,   461,   485,   499,   510,   511,   512,
     513,   530,   533,   534,   535,   536,   537,   538,   539,   590,
     591,   736,   737,   740,   741,   743,   750,   751,   799,   801,
     804,   811,   815,   822,   823,   834,   836,   838,   841,   846,
     853,   854,   855,   859,   861,   867,   868,   870,   872,   875,
     876,   877,   881,   896,   419,   464,   835,   200,   362,   370,
     406,   453,   835,     3,    21,    22,    23,    24,    25,    26,
      27,    28,    30,    31,    32,    40,    41,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    56,
      57,    58,    59,    60,    61,    64,    65,    66,    67,    68,
      70,    71,    72,    73,    74,    76,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    89,    90,    91,    92,
      93,    94,    96,    97,    98,    99,   100,   101,   102,   103,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   118,   120,   121,   122,   123,   124,   125,   127,   128,
     129,   130,   131,   134,   135,   136,   137,   138,   140,   141,
     142,   144,   145,   146,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   160,   162,   163,   164,   165,
     167,   169,   170,   172,   173,   174,   175,   176,   177,   179,
     181,   182,   183,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   198,   199,   200,   201,   202,
     203,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   216,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   231,   232,   233,   234,   236,   237,   238,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   273,   274,   275,   276,   278,   279,   280,   281,   282,
     283,   285,   286,   289,   290,   291,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   321,   322,   323,   324,   325,   326,   328,   329,   330,
     331,   332,   333,   334,   335,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   404,   405,
     407,   408,   409,   410,   411,   412,   413,   415,   416,   419,
     420,   421,   422,   423,   425,   426,   427,   428,   429,   430,
     431,   432,   435,   436,   437,   438,   439,   440,   442,   443,
     444,   445,   446,   447,   448,   450,   451,   452,   453,   454,
     455,   456,   459,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   649,   721,   725,   728,   897,   898,
     899,   835,    52,   171,   499,   525,   177,   238,   292,   362,
     410,   412,   428,   434,   437,   797,   852,     3,     5,    29,
     175,   246,   317,   399,   719,   725,   726,   897,    23,    76,
      92,   146,   156,   168,   173,   200,   245,   249,   312,   326,
     359,   362,   370,   373,   392,   406,   413,   422,   428,   453,
     816,   817,   820,   835,   719,   451,   499,   513,   530,   533,
     534,   736,   737,   740,   743,   750,   751,   799,   801,   807,
     811,   815,   822,   823,   834,   836,   838,   841,   846,   855,
     859,   861,   867,   868,   870,   872,   875,   876,   877,   110,
      70,   211,   110,     5,   724,   725,   869,   869,   725,   719,
      29,   415,   419,   531,   532,   725,   742,   835,    29,   132,
     546,   547,   177,   238,   362,   374,   415,   742,   862,   863,
     835,   447,   534,   539,   742,   288,   603,   716,   725,   726,
     172,   499,   843,   499,   334,   540,   541,   719,   540,   535,
     536,     0,   502,   147,   215,   293,   433,   549,   550,   535,
     537,   538,   503,    29,   415,   419,   534,   742,   451,   805,
     122,   210,   439,   190,   716,   719,   190,   716,   190,   603,
     190,   716,   499,   497,   501,   700,   702,   393,   394,   528,
     724,   534,   716,   410,   412,   410,   412,   344,   190,   725,
     725,   730,   173,   245,   334,   370,   406,   453,   873,   200,
      29,   719,   251,   422,   109,   406,   406,   453,   365,     3,
      46,    51,    52,    53,    54,    66,    67,    76,    84,    96,
     100,   101,   102,   103,   106,   114,   115,   136,   164,   170,
     172,   176,   190,   192,   206,   213,   214,   216,   219,   220,
     222,   232,   234,   246,   265,   266,   267,   275,   280,   296,
     298,   331,   353,   357,   375,   377,   381,   384,   399,   408,
     415,   416,   427,   440,   448,   451,   614,   616,   618,   620,
     622,   624,   626,   627,   628,   630,   631,   632,   634,   635,
     729,   821,   897,   900,   190,   730,   818,   190,   717,   719,
     190,   719,   499,   800,   807,     3,    46,    50,    51,    52,
      53,    54,    66,    67,    74,    76,    84,    96,   100,   101,
     102,   103,   106,   114,   115,   152,   158,   164,   170,   172,
     175,   176,   181,   182,   192,   206,   207,   213,   214,   216,
     219,   220,   222,   232,   234,   246,   265,   266,   267,   271,
     275,   278,   280,   295,   296,   298,   299,   313,   316,   331,
     353,   357,   375,   377,   381,   384,   399,   401,   408,   415,
     416,   421,   423,   427,   440,   447,   448,   451,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   808,
     810,   811,   813,   814,   897,   901,   805,   724,   869,   724,
     488,   499,   499,   839,   482,   221,   501,   287,     4,     6,
       7,     8,     9,    10,    37,    51,    53,    54,    62,    63,
      66,    67,    74,    76,   100,   101,   102,   103,   104,   105,
     106,   114,   115,   117,   152,   158,   159,   164,   181,   182,
     213,   214,   216,   239,   240,   265,   267,   272,   277,   278,
     280,   289,   299,   313,   331,   357,   375,   384,   401,   415,
     416,   421,   423,   424,   427,   440,   448,   483,   490,   491,
     492,   497,   499,   504,   506,   507,   535,   580,   619,   622,
     625,   626,   627,   629,   630,   631,   634,   635,   646,   648,
     649,   650,   652,   666,   667,   674,   694,   699,   706,   707,
     708,   721,   722,   723,   724,   725,   705,   707,   862,   862,
     724,   862,   482,   171,   417,   488,   499,   716,   492,   702,
       3,   170,   172,   451,   811,   842,   844,   170,   845,   646,
     678,   679,   725,   540,   503,   499,   732,   500,   500,   512,
      29,   132,   545,   545,    56,   545,   161,   166,   235,   284,
     555,   557,   558,   583,   585,   586,   587,   549,   550,   499,
     482,   221,   716,   171,   217,   603,   856,   152,    25,    31,
     137,   291,   342,   346,   376,   444,   828,   831,   832,   342,
     152,    38,    57,   108,   199,   250,   258,   270,   301,   342,
     348,   370,   376,   390,   744,   747,   831,   152,   342,   376,
     831,   152,   342,   376,   831,     3,    29,    46,    52,    76,
      84,    96,   100,   101,   102,   103,   106,   132,   170,   172,
     175,   176,   192,   206,   219,   220,   222,   232,   234,   246,
     266,   275,   296,   298,   353,   375,   381,   399,   408,   427,
     440,   449,   451,   492,   500,   646,   681,   682,   727,   733,
     897,   902,   646,   701,     3,    29,    33,    34,    35,    36,
      37,    38,    39,    42,    55,    62,    63,    69,    75,    77,
      88,    95,   104,   105,   117,   119,   126,   132,   133,   139,
     143,   147,   159,   161,   166,   168,   171,   178,   180,   184,
     197,   204,   215,   217,   229,   230,   235,   239,   240,   272,
     277,   284,   287,   288,   292,   293,   310,   320,   327,   336,
     350,   369,   386,   403,   406,   414,   417,   418,   424,   433,
     434,   441,   447,   449,   457,   458,   460,   461,   720,   734,
     897,   901,   903,   700,   500,   499,   786,   797,   272,   802,
     501,   731,    38,   453,   190,   716,   190,   716,   739,   716,
     716,    84,   849,   465,    85,   129,   304,   411,   450,   633,
     633,   633,   499,   621,   621,   316,   499,   623,   152,   499,
      66,    67,   633,   621,   618,   463,   485,   499,   636,   499,
     636,   499,    37,   617,   499,   111,   112,   187,   188,   252,
     253,   254,   255,   256,   257,   260,   261,   366,   367,   479,
     480,   499,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   621,    60,   349,   503,   819,   152,   503,   819,   152,
     503,   819,   152,   287,   679,   500,   503,     4,   159,   287,
     424,   490,   491,   723,   724,   746,   749,   806,   808,   809,
     812,   807,   499,   520,   524,   746,   812,   864,   866,   681,
     616,   683,    38,   233,   725,   499,   703,   497,   535,   646,
     698,   499,   499,   166,   499,   499,   535,   499,   499,   499,
     646,   499,   499,   499,   499,   499,   499,   499,   499,   499,
     646,   646,   646,   148,   709,   710,   679,   680,   535,   646,
     678,   668,   669,   670,   726,     9,   703,   702,   499,   724,
     499,   723,   724,     3,     8,    11,    15,    16,    17,    18,
      19,    20,    35,    38,    43,    50,    75,   176,   192,   197,
     219,   220,   234,   272,   275,   289,   292,   381,   483,   486,
     487,   488,   490,   491,   492,   493,   494,   495,   672,   673,
     674,   676,   462,   653,   703,   298,   646,   503,   217,   542,
     499,   724,   703,   501,   702,   542,     3,   117,   238,   635,
     724,   746,   865,    99,   117,   866,   117,   866,   716,   500,
     503,   805,   503,   500,   541,   717,   718,    38,   537,   537,
      29,   492,   551,   552,   646,   537,   163,   269,   571,   224,
     270,   330,   379,   439,     4,     9,    29,   566,   646,   490,
     491,   567,   568,   646,   648,   583,   584,   558,   557,   555,
     556,   166,   586,   282,   588,   555,   583,   679,   233,   732,
     856,   716,   879,    38,   725,   376,   716,    69,    77,    88,
     168,   190,   320,   434,   725,   768,   778,   793,    77,    88,
     837,    88,   837,   499,   417,   499,   766,   244,   437,   766,
      88,   503,   417,   716,   618,   746,    56,   748,   746,   746,
     108,   250,   258,    56,   417,   461,   485,   745,   263,   362,
     745,   747,   603,    88,   417,   837,   362,   716,   417,   362,
     681,   681,   682,   500,   503,   549,   550,    13,    14,   498,
     508,   417,   725,   785,   790,   461,   523,   334,   406,   453,
     152,    95,   751,   803,   846,   859,   870,   720,   501,   616,
     716,   272,   744,   871,   272,   499,   786,    38,   786,   499,
     874,   190,   725,   780,   850,   499,   680,   723,   821,   683,
     633,   633,    37,   617,   415,   415,   723,   723,   613,   725,
     497,   497,   723,   723,   417,   417,   417,   417,   616,   818,
     730,   717,   719,   719,   730,   500,   807,   813,     4,   723,
       4,   723,   522,   529,   734,    52,    97,   123,   141,   145,
     167,   170,   185,   277,   285,   328,   526,   503,   500,   503,
     500,   503,   534,   840,   855,   876,   877,   679,   700,   680,
     457,   695,   696,   646,   679,   499,   723,   723,     3,   637,
     638,   639,   640,   641,   642,   643,   644,   684,   685,   724,
     723,   723,   646,     8,    15,    18,    19,    20,   486,   487,
     488,   490,   491,   492,   493,   494,   495,   672,   677,   725,
     646,   686,   490,   491,   499,   647,   648,   674,   688,   500,
     679,   646,   678,   689,   646,    55,   171,   230,   418,   646,
     679,   692,   646,   499,   725,   344,   714,   498,   500,   503,
     503,   505,   508,   679,   646,   645,   645,   616,   646,   646,
     646,   646,   646,   646,   646,     5,   734,   735,   415,    42,
     403,   704,   730,   646,   646,   499,   535,   693,   132,   159,
     272,   277,   282,   424,   435,   646,   277,   499,   646,   417,
      50,   176,   192,   197,   234,   381,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,    29,    36,   386,   671,
     180,   162,   654,   357,   499,   667,   708,   177,   238,   406,
     410,   412,   437,   543,   716,   171,   592,   681,   492,   592,
     499,   724,   500,   716,   842,   716,   896,   646,   503,   500,
     499,    39,   126,   553,   553,   503,   441,   553,   357,   358,
     490,   491,   568,   570,   648,   379,   224,   288,   309,   309,
     503,   494,     4,   569,   723,   569,   357,   358,   570,   715,
     716,   276,   383,   589,   584,   556,   500,   441,   858,    38,
     117,   300,   499,   534,   878,   725,   499,   725,   883,   892,
     893,   895,   342,   831,   499,   190,   778,   719,   224,   272,
     224,   441,   499,   771,   615,   616,   719,   725,   190,   719,
     190,   725,    25,   137,   376,   734,   762,   776,   827,   830,
     719,   734,   770,   789,   719,   828,   719,   342,   376,   744,
     831,   746,   730,   719,   746,   730,   719,   746,   342,   376,
     831,   719,   719,   719,   719,   342,   376,   831,   719,   719,
     549,   549,   549,   449,   682,   191,   347,   548,   646,   646,
     646,   701,   325,   519,   500,   503,   285,   171,   417,   514,
     453,   716,   739,   716,   725,   292,   797,   720,   499,   152,
     152,   234,   725,   768,   778,   781,   784,   794,   796,   461,
     463,   773,   151,   534,   461,   851,   500,   681,    38,   272,
     287,   679,   500,   500,   819,   500,   497,   482,   482,   500,
     500,   500,   503,   616,   723,   498,   723,   500,   500,   638,
     640,   641,   642,   641,   642,   642,   819,   819,   287,   819,
     500,   503,   492,   499,   521,   746,   812,    38,   518,   724,
     518,   272,   277,   328,   518,   518,   864,   616,   500,   498,
     646,   139,   696,   697,    38,   500,   646,   500,   500,   500,
     171,   500,   500,   503,   500,   501,   310,   687,   500,   647,
     647,   646,    11,    15,    18,    19,    20,   197,   219,   289,
     486,   487,   488,   490,   491,   492,   493,   494,   495,   674,
     647,   500,   500,   166,   171,   690,   691,   503,   500,    38,
     692,   679,   692,   692,   171,   500,    38,   718,   499,   646,
     711,   703,   646,   668,   646,   500,   500,   482,   647,   647,
     145,   679,   171,   132,   159,   277,   282,   424,   435,   499,
     145,   677,   646,   403,   704,   646,   693,   646,   417,   499,
     535,   499,   499,   155,   655,   410,   412,   410,   412,   716,
     406,   544,   544,   544,   229,   358,   499,   535,   591,   593,
     594,   595,   596,   603,   604,   649,   651,   652,   725,   458,
     609,   549,   710,   609,   723,   645,   732,   840,   484,   554,
     554,   552,   289,   672,   675,   554,     4,   723,   570,   288,
     439,   567,   503,   243,   594,   458,   857,   725,   447,   405,
     440,   887,   725,   882,   891,   287,   884,   888,   895,   703,
     503,   592,   488,   417,   646,   272,   793,   499,   152,   499,
     771,   200,   790,   791,   752,    38,   175,   761,   787,   752,
      25,   137,   346,   348,   376,   824,   825,   826,   832,   833,
     152,   819,   152,   819,   762,   776,   762,   724,   755,   500,
     503,   488,   501,   500,   503,   417,   362,    88,   417,   837,
     362,   417,   417,   417,   362,   548,   548,   548,   682,   279,
     279,   500,   498,   528,   785,   519,   716,   499,    38,   786,
     802,   344,   406,   790,   716,   716,   739,   716,   500,   503,
     285,   766,   285,   287,   765,   719,   461,   738,   766,    38,
     500,   406,   646,   152,   716,   500,   617,   723,   636,   636,
     617,   725,   498,   498,   730,   522,   516,   527,   812,   724,
     724,   277,   790,   492,   790,   724,   724,   414,   646,   143,
     616,   500,   646,   646,   677,   646,   690,   616,   647,   647,
     647,   647,   647,   132,   272,   282,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   646,   646,   691,   690,
     616,   500,   500,   500,   679,   616,   500,   646,   711,   712,
     713,    38,   500,   645,   646,    35,    35,   646,   500,   646,
     171,   499,   683,   646,   500,   145,   647,   647,   145,   145,
     646,   646,   550,   458,   646,   297,   659,   544,   544,   544,
     544,   716,   716,   716,   535,   604,   171,   535,   591,   595,
     596,    38,   597,   598,   725,   597,   503,    96,   172,   206,
     222,   232,   266,   353,   600,   598,    38,   597,   599,   725,
     485,   608,   702,   646,   180,   572,   548,   714,   572,   500,
     500,   163,   228,   499,   554,   288,   716,   646,   350,   886,
     446,   703,   500,   503,    86,   886,   500,   503,   883,   857,
     646,   719,   500,   152,   791,   778,   791,   752,   780,   503,
     500,   119,   204,   270,   272,   777,   499,    32,    56,   798,
     787,    69,    75,    88,   117,   119,   204,   272,   277,   320,
     336,   434,   441,   757,   758,   772,   175,   117,   189,   272,
     766,   745,   109,   117,   175,   272,   392,   395,   747,   766,
     376,   826,   428,   719,   725,   830,     3,    46,    52,    76,
      84,    96,   100,   101,   102,   103,   106,   170,   172,   175,
     176,   192,   206,   219,   220,   222,   232,   234,   246,   266,
     271,   275,   289,   296,   298,   353,   375,   377,   381,   399,
     408,   427,   440,   451,   490,   491,   616,   675,   724,   727,
     746,   753,   792,   897,   903,   734,   789,   719,   719,   719,
     719,   719,   719,   719,   719,   719,   719,   500,   500,   500,
     549,   745,   528,   499,   784,   534,   851,   797,   190,   716,
     500,   871,   499,    38,   775,   773,   781,    81,   800,   109,
     270,   534,   534,   780,   441,   848,   498,   616,   819,   500,
     503,   790,   646,   500,   500,   691,   171,   132,   282,   499,
     500,   500,   503,   500,   725,   646,   646,   646,   683,   500,
     646,    35,    35,   646,   646,   145,   500,   500,   646,   500,
     499,   660,   725,   716,   716,   716,   716,   598,   599,   499,
     500,   726,   408,   563,   564,   499,   564,   595,   222,   296,
     601,   595,   601,   222,   600,   601,   222,   564,   499,   726,
     564,   499,   294,    56,   184,   581,   500,   581,   724,   677,
     706,   534,   300,   534,   882,   287,   499,   880,   488,   895,
     886,   752,   778,   500,   500,   461,   783,   120,   193,   202,
     119,   443,   646,   117,    38,   499,   730,   719,   647,   120,
     193,   119,   277,   224,   716,   783,    83,   798,   190,   277,
     746,   646,   798,   277,   490,   491,   749,   725,   616,   819,
     819,   246,   399,   727,   731,   488,   417,   417,   548,   520,
     441,   515,   517,   790,   500,   738,    38,   406,   272,   499,
     851,   784,   151,   534,   149,   198,   765,   122,   137,   319,
     738,   109,   461,   860,   287,   725,   847,   499,   527,   647,
     171,   499,   683,   711,   500,   646,   646,   646,   500,   661,
     725,   605,   606,   651,   597,   499,     4,     9,   559,   561,
     562,   725,   718,   595,   287,   441,   602,   595,   222,   595,
     610,   611,   726,   499,   610,   726,    29,    98,   181,   356,
     492,   499,   573,   574,   575,   576,   577,   578,   579,   646,
     646,   460,   656,   724,   656,   500,   503,   887,    88,   499,
     651,   725,   885,   894,   133,   646,   336,   783,   499,   774,
     752,   500,   189,   499,   646,   272,   758,   783,   786,   719,
      38,   152,    75,   612,   731,   494,   753,   719,   719,   500,
     745,   124,   500,   773,   534,   716,   152,    38,   500,   719,
     738,    29,    80,    89,   118,   189,   201,   392,   395,   769,
     769,   358,   358,    61,    69,   238,   716,   894,   647,   683,
     500,   306,   662,   500,   503,    38,   607,   718,   309,   494,
     309,   358,   494,   499,   499,   500,   646,   499,   595,   602,
     500,   503,   616,   610,   500,   499,   378,   499,   500,   503,
     657,   658,   725,   327,   582,   582,   446,   719,   646,    75,
     889,   889,   500,   503,   273,   439,   716,   752,   734,   779,
     782,   396,   455,   759,   760,   499,   754,   646,   500,   248,
     795,   189,   730,   441,   829,   494,   428,   520,   724,   851,
     765,   860,   499,   716,   534,   773,   800,    69,   290,    69,
     848,   500,   500,    56,   549,   608,   605,   499,   500,   725,
     559,   718,   611,   612,   500,   679,   499,   679,   575,   503,
      38,   646,   441,   560,   560,   534,   500,   730,   730,   890,
     890,   609,   885,   376,   786,   488,   500,   503,   744,   500,
     270,   767,   172,   305,   382,   287,   763,   764,   788,   754,
     646,   428,    38,   499,   860,   765,   738,   290,   290,   499,
     851,   678,   329,   358,   663,   610,   500,   503,   500,   500,
     500,   574,   500,   658,   660,   360,   889,   553,   553,   893,
     795,   753,   782,   500,   760,   202,   122,   439,   287,   788,
     287,   763,   534,   894,   609,    50,    99,   430,   646,   664,
     665,   664,   500,   500,     9,   343,   565,   500,   562,   890,
     554,   554,   609,   764,    60,   270,   349,   376,   756,   756,
     860,   500,   665,   357,   165,   315,   165,   315,   500,   499,
     553,   752,    24,   117,   277,   851,    35,     9,   554,   609,
     665,   500
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   509,   510,   511,   511,   512,   512,   512,   512,   512,
     512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
     512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
     512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
     513,   513,   513,   514,   514,   515,   515,   516,   516,   517,
     517,   518,   518,   519,   519,   520,   520,   521,   521,   521,
     521,   521,   522,   523,   523,   524,   524,   525,   525,   526,
     526,   526,   526,   526,   526,   526,   526,   526,   526,   526,
     526,   526,   526,   527,   528,   528,   528,   529,   529,   530,
     531,   531,   532,   532,   532,   533,   534,   534,   535,   535,
     536,   536,   536,   536,   536,   536,   536,   536,   537,   537,
     538,   538,   538,   538,   538,   538,   538,   539,   539,   539,
     540,   540,   541,   542,   542,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   544,   544,   545,   545,   545,   546,
     546,   547,   547,   548,   548,   548,   549,   549,   550,   550,
     550,   551,   551,   552,   552,   553,   553,   553,   554,   554,
     554,   555,   555,   555,   555,   556,   556,   557,   557,   557,
     557,   558,   558,   559,   559,   559,   559,   559,   559,   560,
     560,   561,   561,   562,   562,   562,   562,   563,   564,   564,
     565,   565,   566,   566,   566,   566,   566,   567,   568,   568,
     568,   569,   569,   570,   570,   571,   571,   572,   572,   572,
     572,   573,   573,   574,   574,   575,   575,   575,   575,   575,
     576,   577,   578,   579,   580,   580,   581,   581,   582,   582,
     583,   583,   584,   584,   585,   585,   586,   587,   587,   587,
     587,   588,   588,   589,   589,   589,   590,   590,   591,   591,
     592,   592,   593,   593,   594,   594,   595,   595,   595,   595,
     595,   595,   595,   595,   596,   596,   596,   596,   596,   596,
     597,   597,   597,   597,   598,   598,   599,   599,   599,   599,
     599,   600,   600,   600,   600,   601,   601,   602,   602,   603,
     603,   603,   603,   604,   604,   605,   606,   606,   607,   607,
     608,   608,   609,   609,   610,   610,   611,   612,   612,   613,
     613,   614,   614,   615,   615,   616,   616,   616,   616,   616,
     616,   616,   616,   617,   617,   617,   618,   618,   618,   618,
     618,   618,   618,   619,   619,   619,   619,   620,   621,   621,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   623,   623,   624,   624,   625,   625,   626,   627,   628,
     628,   629,   629,   630,   631,   632,   632,   632,   632,   632,
     632,   633,   633,   634,   634,   634,   634,   635,   636,   636,
     636,   637,   637,   638,   638,   639,   639,   640,   640,   641,
     641,   642,   642,   643,   643,   644,   644,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     649,   649,   649,   649,   649,   649,   649,   650,   650,   651,
     651,   652,   652,   652,   652,   652,   652,   652,   652,   652,
     652,   652,   652,   652,   652,   652,   652,   652,   652,   652,
     652,   652,   652,   652,   652,   652,   652,   652,   652,   652,
     653,   653,   654,   654,   654,   655,   655,   656,   656,   657,
     657,   658,   659,   659,   659,   660,   661,   661,   662,   662,
     663,   663,   663,   664,   664,   665,   665,   665,   665,   665,
     666,   666,   667,   667,   668,   669,   669,   670,   670,   671,
     671,   671,   672,   672,   673,   673,   673,   673,   673,   673,
     673,   673,   673,   673,   673,   673,   673,   674,   674,   675,
     675,   676,   676,   676,   676,   676,   676,   676,   676,   677,
     677,   678,   678,   679,   679,   680,   680,   681,   681,   682,
     682,   682,   683,   683,   684,   684,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   686,   686,   687,   688,
     688,   689,   689,   689,   689,   689,   689,   690,   691,   692,
     692,   692,   693,   693,   694,   695,   695,   696,   697,   697,
     698,   698,   699,   699,   700,   700,   700,   701,   701,   702,
     702,   703,   703,   704,   704,   705,   705,   706,   706,   707,
     707,   708,   708,   708,   708,   708,   709,   709,   710,   710,
     711,   712,   712,   713,   713,   714,   714,   714,   715,   715,
     716,   716,   717,   717,   718,   718,   719,   720,   721,   721,
     722,   722,   722,   722,   722,   722,   722,   722,   722,   722,
     722,   722,   722,   722,   723,   724,   725,   725,   725,   726,
     726,   727,   727,   727,   728,   728,   728,   729,   729,   729,
     730,   730,   731,   731,   732,   732,   733,   734,   734,   734,
     734,   735,   735,   736,   736,   736,   737,   737,   737,   738,
     738,   738,   739,   740,   740,   740,   740,   740,   740,   740,
     740,   741,   741,   742,   742,   743,   743,   744,   744,   745,
     745,   745,   746,   746,   746,   746,   747,   747,   747,   747,
     747,   747,   747,   747,   747,   747,   747,   747,   747,   747,
     748,   748,   749,   749,   749,   750,   750,   750,   750,   751,
     751,   751,   752,   752,   753,   753,   753,   753,   753,   753,
     754,   754,   755,   756,   756,   756,   756,   756,   757,   757,
     757,   757,   758,   758,   758,   758,   758,   758,   758,   758,
     759,   759,   760,   760,   761,   761,   761,   762,   763,   764,
     764,   764,   764,   764,   765,   765,   765,   765,   766,   767,
     767,   768,   768,   769,   769,   769,   769,   769,   769,   769,
     769,   770,   770,   771,   772,   772,   772,   772,   773,   773,
     773,   773,   774,   775,   775,   775,   776,   777,   777,   777,
     777,   777,   777,   778,   778,   779,   779,   780,   781,   781,
     781,   782,   782,   783,   783,   784,   784,   784,   785,   786,
     786,   787,   787,   788,   789,   789,   789,   789,   790,   790,
     791,   791,   792,   792,   792,   793,   793,   793,   793,   793,
     793,   794,   794,   795,   795,   795,   795,   796,   797,   797,
     797,   797,   797,   797,   797,   797,   798,   798,   799,   799,
     799,   800,   800,   801,   801,   802,   802,   803,   803,   803,
     803,   804,   804,   804,   804,   805,   805,   806,   806,   806,
     807,   807,   807,   807,   807,   807,   807,   807,   807,   807,
     807,   807,   807,   807,   807,   807,   807,   807,   807,   807,
     807,   807,   807,   807,   807,   807,   807,   807,   807,   807,
     808,   808,   808,   809,   809,   810,   810,   811,   811,   812,
     812,   812,   812,   813,   814,   814,   815,   815,   815,   815,
     815,   815,   815,   815,   816,   816,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     817,   817,   817,   817,   817,   817,   817,   818,   818,   819,
     819,   819,   820,   820,   820,   821,   821,   822,   823,   823,
     823,   823,   823,   823,   823,   823,   824,   824,   825,   825,
     826,   826,   826,   826,   827,   827,   828,   828,   828,   828,
     828,   828,   828,   828,   828,   828,   828,   828,   828,   828,
     828,   828,   828,   828,   828,   828,   828,   828,   828,   828,
     828,   828,   828,   828,   828,   829,   829,   830,   830,   830,
     830,   831,   831,   832,   833,   833,   833,   834,   834,   834,
     834,   834,   834,   835,   835,   835,   836,   836,   836,   836,
     836,   836,   836,   836,   836,   836,   836,   836,   836,   837,
     837,   838,   839,   839,   840,   840,   840,   840,   841,   841,
     841,   841,   841,   842,   842,   842,   842,   842,   843,   843,
     844,   844,   845,   845,   846,   846,   847,   848,   848,   849,
     849,   850,   850,   851,   851,   852,   852,   853,   854,   855,
     856,   856,   856,   857,   857,   858,   858,   859,   859,   859,
     859,   860,   860,   860,   860,   861,   861,   861,   861,   862,
     862,   862,   862,   863,   863,   863,   863,   864,   864,   865,
     865,   865,   865,   865,   865,   865,   866,   866,   867,   867,
     868,   868,   868,   869,   869,   870,   870,   871,   871,   872,
     872,   873,   873,   874,   874,   875,   875,   875,   875,   875,
     875,   876,   877,   878,   878,   878,   878,   878,   879,   879,
     880,   880,   880,   881,   881,   882,   883,   883,   884,   884,
     884,   885,   885,   885,   886,   886,   887,   887,   888,   888,
     889,   889,   890,   890,   891,   891,   892,   892,   893,   893,
     894,   894,   895,   896,   896,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   899,   899,   899,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   899,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   899,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   899,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   903,   903,   903,   903,
     903,   903,   903,   903,   903,   903,   903,   903,   903,   903,
     903,   903,   903,   903,   903,   903,   903,   903,   903,   903,
     903,   903,   903,   903,   903,   903,   903,   903,   903,   903,
     903,   903,   903,   903,   903,   903,   903,   903,   903,   903,
     903,   903,   903,   903,   903,   903,   903,   903,   903,   903,
     903,   903,   903,   903,   903,   903,   903,   903,   903,   903,
     903,   903,   903,   903,   903,   903,   903,   903
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,    11,     9,     1,     1,     3,     0,     1,     3,     1,
       0,     1,     0,     1,     0,     1,     3,     1,     1,     1,
       3,     0,     2,     2,     0,     2,     0,     1,     0,     1,
       1,     1,     3,     3,     1,     1,     3,     3,     3,     3,
       4,     3,     2,     1,     1,     1,     1,     1,     3,     2,
       1,     1,     1,     2,     3,     2,     1,     1,     3,     3,
       1,     2,     4,     4,     2,     3,     5,     5,     1,     1,
      11,    11,     1,     2,     4,     4,     4,     2,     2,     3,
       1,     3,     6,     2,     0,     3,     3,     4,     4,     4,
       4,     3,     2,     1,     1,     0,     1,     1,     0,     1,
       5,     1,     0,     2,     2,     0,     1,     0,     3,     5,
       5,     1,     3,     4,     3,     1,     1,     0,     2,     2,
       0,     2,     2,     1,     1,     1,     0,     2,     4,     5,
       4,     2,     3,     2,     2,     2,     2,     1,     2,     3,
       0,     1,     0,     5,     1,     4,     6,     2,     1,     0,
       4,     0,     1,     1,     2,     2,     2,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     3,     3,     3,
       0,     1,     3,     1,     2,     1,     1,     1,     1,     1,
       2,     4,     4,     5,     1,     1,     2,     0,     2,     0,
       1,     3,     1,     0,     1,     2,     3,     2,     4,     2,
       3,     2,     0,     1,     2,     0,     4,     5,     1,     2,
       2,     0,     1,     3,     1,     2,     3,     3,     3,     3,
       3,     3,     1,     4,     3,     4,     5,     4,     5,     4,
       5,     2,     4,     1,     1,     0,     1,     4,     5,     4,
       0,     2,     2,     2,     1,     1,     0,     4,     2,     1,
       2,     2,     4,     2,     6,     2,     1,     3,     4,     0,
       2,     0,     2,     0,     1,     3,     3,     2,     0,     2,
       4,     1,     1,     1,     0,     2,     3,     5,     6,     2,
       3,     5,     5,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     4,     1,     1,     1,     1,     2,     3,     0,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       1,     3,     0,     1,     1,     1,     1,     5,     2,     1,
       1,     1,     1,     4,     1,     2,     2,     1,     3,     3,
       2,     1,     0,     5,     2,     5,     2,     1,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     3,     3,     5,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     2,     3,     3,     2,     2,     3,
       3,     5,     4,     6,     3,     5,     4,     6,     4,     6,
       5,     7,     3,     2,     4,     3,     2,     1,     3,     3,
       3,     3,     3,     3,     4,     3,     4,     3,     4,     5,
       6,     6,     7,     6,     7,     6,     7,     3,     4,     4,
       6,     2,     1,     4,     1,     3,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     5,     6,     6,     7,     1,     1,
       2,     2,     2,     4,     1,     2,     1,     2,     2,     4,
       3,     6,     7,     9,     7,     7,     4,     5,     1,     1,
       1,     5,     1,     1,     4,     1,     4,     1,     4,     1,
       4,     1,     1,     1,     1,     1,     1,     6,     6,     4,
       4,     4,     4,     6,     5,     5,     5,     4,     6,     4,
       5,     0,     5,     4,     0,     1,     0,     2,     0,     1,
       3,     3,     2,     2,     0,     6,     1,     0,     3,     0,
       2,     2,     0,     1,     4,     2,     2,     2,     2,     2,
       4,     3,     1,     5,     3,     1,     3,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     1,
       4,     1,     4,     1,     2,     1,     2,     1,     2,     1,
       3,     1,     3,     1,     2,     1,     0,     1,     3,     1,
       3,     3,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     3,     2,     3,
       0,     3,     3,     2,     2,     1,     0,     2,     2,     3,
       2,     1,     1,     3,     5,     1,     2,     4,     2,     0,
       1,     0,     1,     2,     2,     3,     5,     1,     0,     1,
       2,     0,     2,     1,     0,     1,     0,     1,     3,     1,
       2,     3,     2,     1,     3,     5,     4,     2,     1,     0,
       3,     1,     3,     1,     2,     4,     2,     0,     1,     3,
       1,     2,     1,     3,     1,     2,     1,     1,     1,     2,
       1,     1,     2,     1,     1,     2,     7,     2,     5,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     2,     4,     5,     7,    10,     9,     2,
       3,     0,     4,     2,     2,     2,     2,     3,     4,     2,
       1,     1,     1,     1,     3,     4,     6,     1,     2,     1,
       1,     0,     1,     2,     2,     1,     2,     2,     1,     2,
       3,     2,     2,     2,     2,     3,     3,     3,     1,     3,
       1,     0,     1,     2,     2,     2,     3,     2,     3,     9,
      12,    11,     0,     2,     1,     1,     1,     1,     1,     1,
       3,     0,     1,     2,     1,     1,     2,     2,     3,     1,
       1,     2,     2,     1,     2,     3,     5,     3,     2,     5,
       1,     1,     1,     0,     5,     7,     5,     2,     3,     1,
       1,     2,     2,     0,     3,     4,     4,     0,     3,     2,
       0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     1,     2,     2,     2,     2,     2,
       2,     0,     3,     3,     3,     0,     1,     2,     1,     2,
       2,     2,     2,     3,     4,     1,     3,     1,     1,     1,
       1,     3,     1,     2,     0,     1,     2,     0,     1,     3,
       0,     2,     0,     3,     3,     1,     5,     3,     1,     3,
       1,     2,     1,     4,     5,     5,     6,     3,     7,     4,
      11,     1,     3,     2,     2,     2,     0,     3,     1,     1,
       2,     2,     2,     2,     1,     0,     1,     2,     3,     9,
      12,     3,     0,     4,     7,     2,     0,     1,     1,     1,
       1,     2,     4,     3,     5,     1,     0,     1,     1,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     6,     4,     6,     4,
       6,     8,     4,     6,     1,     1,     1,     1,     2,     1,
       2,     1,     2,     1,     1,     1,     3,     3,     3,     3,
       2,     2,     1,     3,     1,     1,     1,     1,     3,     1,
       1,     0,     1,     1,     1,     1,     3,     5,     4,     6,
       4,     6,     4,     6,     4,     6,     1,     2,     3,     2,
       1,     3,     2,     3,     1,     3,     2,     5,     3,     6,
       4,     6,     6,     6,     5,     5,     6,     9,     4,     5,
       7,     6,     4,     8,     4,     2,     4,     3,     6,     4,
       2,     2,     2,     2,     1,     2,     0,     1,     2,     2,
       2,     1,     3,     4,     2,     1,     0,     2,     2,     2,
       2,     2,     2,     1,     1,     0,     6,     6,     8,     6,
       8,     6,     8,     6,     8,     8,    10,     8,    10,     1,
       0,     5,     3,     0,     1,     1,     1,     1,     4,     5,
       5,     4,     6,     1,     1,     1,     1,     1,     1,     0,
       1,     3,     1,     0,    13,    16,     1,     2,     0,     1,
       0,     1,     0,     2,     0,     1,     0,     4,     3,     7,
       1,     2,     3,     2,     0,     2,     0,     9,    11,    12,
      14,     3,     4,     4,     0,     2,     3,     3,     3,     1,
       3,     3,     2,     3,     3,     3,     3,     1,     1,     1,
       1,     3,     5,     1,     1,     1,     1,     3,     2,     1,
       2,     2,     3,     1,     1,     5,     8,     1,     0,     8,
       7,     1,     1,     2,     3,     6,     8,     6,     8,     6,
       8,     8,     7,     1,     4,     4,     7,     2,     1,     3,
       4,     3,     0,     1,     0,     2,     3,     5,     8,     5,
       0,     5,     5,     7,     2,     0,     1,     1,     1,     3,
       2,     0,     1,     0,     1,     3,     1,     3,     1,     2,
       1,     3,     2,     2,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[+yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
#  else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                yy_state_t *yyssp, int yytoken)
{
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Actual size of YYARG. */
  int yycount = 0;
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[+*yyssp];
      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
      yysize = yysize0;
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYPTRDIFF_T yysize1
                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    /* Don't count the "%s"s in the final size, but reserve room for
       the terminator.  */
    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYPTRDIFF_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0; (void)yynerrs;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 467 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 15317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3:
#line 483 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 15333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4:
#line 495 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 15344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 39:
#line 538 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 15350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 40:
#line 2 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = NULL;
					n->attlist = NIL;
					n->is_from = true;
					n->is_program = true;
					n->filename = (yyvsp[0].str);
					n->options = NIL;

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("COPYFROMFILE not allowed with NULL"),
								 parser_errposition((yylsp[0]))));

					(yyval.node) = (PGNode *)n;
				}
#line 15373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 41:
#line 22 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 15405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42:
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 15428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43:
#line 72 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 15434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44:
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 15440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45:
#line 79 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 15448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46:
#line 82 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 15454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47:
#line 88 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 15462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48:
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 15470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49:
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 15476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50:
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 15482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51:
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 15488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52:
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 15494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53:
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 15500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54:
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 15506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55:
#line 115 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56:
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 15518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57:
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 15524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58:
#line 122 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 15530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59:
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 15536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60:
#line 124 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 15542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61:
#line 125 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 15548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62:
#line 131 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 15556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63:
#line 139 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 15564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64:
#line 142 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 15570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65:
#line 147 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 15576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66:
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 15582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67:
#line 154 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 15590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68:
#line 157 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 15596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69:
#line 163 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 15604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70:
#line 167 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 15612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71:
#line 171 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 15620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72:
#line 175 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 15628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73:
#line 179 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 15636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74:
#line 183 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 15644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75:
#line 187 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 15652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76:
#line 191 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 15660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77:
#line 195 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 15668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78:
#line 199 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 15676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79:
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 15684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80:
#line 207 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 15692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81:
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 15700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82:
#line 215 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 15708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83:
#line 222 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 15714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84:
#line 228 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85:
#line 229 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 15726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86:
#line 230 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 15732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87:
#line 236 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 15740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88:
#line 240 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 15748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 15754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 15765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 15775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 15781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 15792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 15803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95:
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 15813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98:
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 15819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99:
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 15825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100:
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101:
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102:
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103:
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104:
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 15878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105:
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106:
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107:
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108:
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109:
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110:
#line 158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111:
#line 174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112:
#line 188 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113:
#line 190 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 15992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114:
#line 209 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 16000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115:
#line 213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 16008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116:
#line 217 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 16016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117:
#line 234 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 16027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118:
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 16038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119:
#line 248 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 16049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120:
#line 257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121:
#line 258 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 16061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122:
#line 262 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 16074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123:
#line 274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 16088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124:
#line 284 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 16094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125:
#line 293 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126:
#line 298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127:
#line 303 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128:
#line 308 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129:
#line 313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130:
#line 321 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131:
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 16163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132:
#line 334 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 16172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133:
#line 339 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 16181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134:
#line 345 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 16187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135:
#line 346 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 16193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136:
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 16199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137:
#line 351 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138:
#line 352 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139:
#line 359 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 16217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140:
#line 360 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 16223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141:
#line 364 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 16229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142:
#line 365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143:
#line 369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 16241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144:
#line 370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 16247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145:
#line 371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146:
#line 375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 16259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147:
#line 376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148:
#line 380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149:
#line 382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 16285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150:
#line 392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 16299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151:
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 16305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152:
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 16311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153:
#line 409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 16324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154:
#line 418 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 16337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155:
#line 428 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 16343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156:
#line 429 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 16349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157:
#line 430 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 16355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158:
#line 433 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 16361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159:
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 16367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160:
#line 435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 16373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161:
#line 439 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 16379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162:
#line 440 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 16385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163:
#line 441 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 16391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164:
#line 442 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 16397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165:
#line 446 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166:
#line 447 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 16409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167:
#line 452 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 16415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168:
#line 454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 16428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169:
#line 470 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 16434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170:
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 16440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171:
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 16446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172:
#line 480 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 16452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173:
#line 488 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 16460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174:
#line 492 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 16468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175:
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 16476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176:
#line 500 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 16484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177:
#line 504 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 16492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178:
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 16500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179:
#line 515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 16508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180:
#line 519 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 16514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181:
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 16520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182:
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 16526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183:
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 16535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184:
#line 537 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 16543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185:
#line 541 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 16551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186:
#line 545 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 16560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187:
#line 553 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 16568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188:
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189:
#line 560 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 16580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190:
#line 565 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 16586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191:
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 16592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192:
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193:
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 16607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194:
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 16613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195:
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 16619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196:
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 16625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197:
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198:
#line 605 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199:
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 16643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200:
#line 609 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 16649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201:
#line 613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 16655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202:
#line 614 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 16661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203:
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 16667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204:
#line 619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 16673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205:
#line 622 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 16679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206:
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 16685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207:
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208:
#line 650 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 16700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209:
#line 655 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 16709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210:
#line 659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211:
#line 663 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212:
#line 664 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 16727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213:
#line 668 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214:
#line 669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 16739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215:
#line 673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216:
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217:
#line 675 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218:
#line 676 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219:
#line 677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220:
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 16777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221:
#line 695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 16785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222:
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 16793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223:
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 16801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224:
#line 715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 16807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225:
#line 716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 16813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226:
#line 720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227:
#line 721 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 16825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228:
#line 725 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229:
#line 726 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 16837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230:
#line 730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231:
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232:
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233:
#line 736 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 16861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234:
#line 740 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235:
#line 741 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 16873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236:
#line 746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 16885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237:
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 16891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238:
#line 757 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 16897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239:
#line 758 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 16903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240:
#line 759 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 16909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241:
#line 763 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242:
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 16921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243:
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 16927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244:
#line 770 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 16933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245:
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 16939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246:
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247:
#line 787 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248:
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249:
#line 796 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 16971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250:
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251:
#line 810 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252:
#line 814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253:
#line 815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 16995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254:
#line 819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255:
#line 820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256:
#line 827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 17017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257:
#line 833 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 17029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258:
#line 841 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 17042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259:
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 17054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260:
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 17067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261:
#line 867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 17080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262:
#line 876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 17088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263:
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 17097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264:
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 17105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265:
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266:
#line 923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 17140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267:
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268:
#line 952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 17175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269:
#line 964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270:
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 17202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271:
#line 986 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 17211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272:
#line 991 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 17221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273:
#line 997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 17230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274:
#line 1003 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 17236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275:
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 17242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276:
#line 1013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 17250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277:
#line 1017 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 17258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278:
#line 1021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 17268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279:
#line 1027 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 17278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280:
#line 1033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 17286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281:
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 17292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282:
#line 1039 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 17298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283:
#line 1040 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 17304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284:
#line 1041 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 17310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285:
#line 1045 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 17316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286:
#line 1046 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287:
#line 1058 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 17328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288:
#line 1059 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289:
#line 1065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 17345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290:
#line 1072 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 17356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291:
#line 1079 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 17367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292:
#line 1086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 17378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293:
#line 1118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 17393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294:
#line 1129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 17408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295:
#line 1142 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 17414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296:
#line 1146 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 17420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297:
#line 1147 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 17426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298:
#line 1150 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299:
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300:
#line 1154 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 17444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301:
#line 1155 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302:
#line 1160 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303:
#line 1161 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304:
#line 1167 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 17470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305:
#line 1171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 17478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306:
#line 1177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 17500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307:
#line 1198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 17512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308:
#line 1205 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 17518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309:
#line 1218 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 17526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310:
#line 1221 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 17534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313:
#line 1228 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314:
#line 1229 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 17546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315:
#line 1232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 17555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316:
#line 1237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 17565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317:
#line 1244 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 17574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318:
#line 1249 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 17584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319:
#line 1255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 17593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320:
#line 1260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 17603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321:
#line 1265 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 17614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322:
#line 1271 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 17625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323:
#line 1281 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 17631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324:
#line 1283 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 17637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325:
#line 1285 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 17643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326:
#line 1289 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327:
#line 1290 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328:
#line 1291 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329:
#line 1292 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330:
#line 1293 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331:
#line 1295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 17682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332:
#line 1300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 17692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333:
#line 1319 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334:
#line 1320 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335:
#line 1321 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336:
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337:
#line 1334 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338:
#line 1347 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 17732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339:
#line 1348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 17738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340:
#line 1355 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341:
#line 1360 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342:
#line 1365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343:
#line 1370 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344:
#line 1375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345:
#line 1380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346:
#line 1385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347:
#line 1390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348:
#line 1396 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349:
#line 1402 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350:
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351:
#line 1415 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 17865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352:
#line 1436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 17873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353:
#line 1446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354:
#line 1450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355:
#line 1458 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356:
#line 1462 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 17906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357:
#line 1470 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358:
#line 1482 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359:
#line 1503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360:
#line 1507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361:
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362:
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 17976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363:
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 17986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364:
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365:
#line 1548 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366:
#line 1550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367:
#line 1552 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 18016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368:
#line 1554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369:
#line 1556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370:
#line 1558 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371:
#line 1562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 18040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372:
#line 1563 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373:
#line 1571 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374:
#line 1580 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375:
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376:
#line 1597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377:
#line 1608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378:
#line 1615 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 18111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379:
#line 1616 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 18117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380:
#line 1617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397:
#line 1646 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 18129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398:
#line 1648 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 18135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399:
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 18141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400:
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 18147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401:
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 18153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402:
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 18159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403:
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 18165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404:
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 18171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405:
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 18180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406:
#line 1667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 18189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407:
#line 1672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 18199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408:
#line 1678 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409:
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 18219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410:
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411:
#line 1696 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412:
#line 1701 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 18244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413:
#line 1732 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414:
#line 1735 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 18256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415:
#line 1737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 18268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416:
#line 1745 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 18278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417:
#line 1760 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418:
#line 1762 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419:
#line 1764 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420:
#line 1766 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421:
#line 1768 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422:
#line 1770 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423:
#line 1772 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424:
#line 1774 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425:
#line 1776 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426:
#line 1778 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427:
#line 1780 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428:
#line 1782 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429:
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430:
#line 1786 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431:
#line 1788 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432:
#line 1791 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433:
#line 1793 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434:
#line 1795 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 18386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435:
#line 1798 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436:
#line 1800 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437:
#line 1802 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 18404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438:
#line 1804 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 18410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439:
#line 1806 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440:
#line 1811 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441:
#line 1816 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 18439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442:
#line 1823 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 18448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443:
#line 1828 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 18459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444:
#line 1835 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445:
#line 1840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 18479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446:
#line 1847 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 18488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447:
#line 1852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 18499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448:
#line 1860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 18511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449:
#line 1868 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 18523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450:
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 18535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451:
#line 1884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 18547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452:
#line 1902 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453:
#line 1910 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454:
#line 1918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 18583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455:
#line 1926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456:
#line 1934 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457:
#line 1941 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 18616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458:
#line 1945 "third_party/libpg_query/grammar/statements/select.y"
                                                           {
				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 18625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459:
#line 1949 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 18634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460:
#line 1954 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 18646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461:
#line 1962 "third_party/libpg_query/grammar/statements/select.y"
                        {
                                        (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
                        }
#line 18654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462:
#line 1966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 18674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463:
#line 1982 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 18686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464:
#line 1990 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 18698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465:
#line 1998 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 18710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466:
#line 2006 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 18722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467:
#line 2014 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 18734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468:
#line 2022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 18746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469:
#line 2030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 18754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470:
#line 2034 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 18762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471:
#line 2038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472:
#line 2042 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 18778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473:
#line 2046 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 18790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474:
#line 2054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 18802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475:
#line 2062 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 18814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476:
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 18826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477:
#line 2078 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 18850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478:
#line 2098 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 18876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479:
#line 2120 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 18891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480:
#line 2131 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 18902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481:
#line 2138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482:
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483:
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 18945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484:
#line 2179 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485:
#line 2181 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 18957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486:
#line 2183 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487:
#line 2185 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488:
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489:
#line 2189 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490:
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491:
#line 2193 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492:
#line 2195 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493:
#line 2197 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494:
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495:
#line 2201 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496:
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497:
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498:
#line 2207 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499:
#line 2209 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500:
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501:
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502:
#line 2215 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503:
#line 2217 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 19065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504:
#line 2219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 19073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505:
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 19081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506:
#line 2227 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507:
#line 2231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 19097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508:
#line 2244 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509:
#line 2245 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510:
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 19120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511:
#line 2254 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 19136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512:
#line 2266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 19155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513:
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 19171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514:
#line 2293 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515:
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else {
						(yyval.node) = (yyvsp[-1].node);
					}
				}
#line 19193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516:
#line 2307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517:
#line 2318 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 19236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518:
#line 2342 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 19251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519:
#line 2353 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 19262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520:
#line 2362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 19270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521:
#line 2366 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 19281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522:
#line 2373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 19293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523:
#line 2381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 19305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524:
#line 2389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 19320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525:
#line 2400 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526:
#line 2408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527:
#line 2436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 19392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528:
#line 2472 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529:
#line 2482 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530:
#line 2483 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531:
#line 2491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 19420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532:
#line 2497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 19428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533:
#line 2501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 19436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534:
#line 2505 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535:
#line 2509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 19452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536:
#line 2513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537:
#line 2517 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 19468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538:
#line 2521 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539:
#line 2525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 19484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540:
#line 2529 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541:
#line 2533 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 19500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542:
#line 2537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 19508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543:
#line 2541 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 19516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544:
#line 2545 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 19524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545:
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 19532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546:
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 19540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547:
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 19546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548:
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 19552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549:
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550:
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551:
#line 2574 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552:
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553:
#line 2586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 19612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554:
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555:
#line 2608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556:
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557:
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558:
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 19655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559:
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 19666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560:
#line 2637 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561:
#line 2638 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562:
#line 2642 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 19684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563:
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 19690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564:
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565:
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 19702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566:
#line 2649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567:
#line 2656 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568:
#line 2657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569:
#line 2661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 19726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570:
#line 2663 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 19732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571:
#line 2668 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 19742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572:
#line 2676 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 19748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573:
#line 2678 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 19765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574:
#line 2691 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 19771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575:
#line 2696 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 19789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576:
#line 2721 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577:
#line 2722 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 19801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578:
#line 2725 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579:
#line 2726 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580:
#line 2738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 19823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581:
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 19833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582:
#line 2750 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583:
#line 2760 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 19866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584:
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 19907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585:
#line 2822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586:
#line 2830 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587:
#line 2838 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588:
#line 2846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589:
#line 2854 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590:
#line 2874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591:
#line 2875 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592:
#line 2878 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 19985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593:
#line 2879 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 19991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594:
#line 2883 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 20004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595:
#line 2893 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596:
#line 2894 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597:
#line 2898 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598:
#line 2899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599:
#line 2903 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 20034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600:
#line 2904 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 20040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601:
#line 2905 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 20046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602:
#line 2908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603:
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 20058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604:
#line 2912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 20064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605:
#line 2913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 20070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606:
#line 2914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 20076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607:
#line 2915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 20082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608:
#line 2916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 20088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609:
#line 2917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 20094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610:
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 20100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611:
#line 2919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 20106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612:
#line 2920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 20112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613:
#line 2921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 20118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614:
#line 2922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 20124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615:
#line 2923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 20130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616:
#line 2924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 20136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617:
#line 2928 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618:
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619:
#line 2935 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620:
#line 2937 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621:
#line 2942 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622:
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623:
#line 2946 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 20178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624:
#line 2948 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 20184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625:
#line 2950 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 20190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626:
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 20196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627:
#line 2954 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 20202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628:
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 20208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629:
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630:
#line 2972 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 20220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631:
#line 2976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632:
#line 2980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633:
#line 2987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634:
#line 2992 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 20252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635:
#line 2999 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636:
#line 3003 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 20268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637:
#line 3012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638:
#line 3016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639:
#line 3022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640:
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641:
#line 3035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642:
#line 3045 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 20324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643:
#line 3046 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 20330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644:
#line 3051 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 20338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645:
#line 3054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646:
#line 3061 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647:
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 20356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648:
#line 3063 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 20362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649:
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 20368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650:
#line 3065 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 20374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651:
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 20380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652:
#line 3067 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 20386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653:
#line 3068 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 20392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654:
#line 3069 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 20398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655:
#line 3070 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656:
#line 3081 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657:
#line 3085 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658:
#line 3092 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659:
#line 3098 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 20432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660:
#line 3099 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661:
#line 3116 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662:
#line 3120 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 20455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663:
#line 3125 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664:
#line 3129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 20482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665:
#line 3144 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666:
#line 3148 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 20496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667:
#line 3152 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668:
#line 3155 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669:
#line 3158 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 20514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670:
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671:
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672:
#line 3164 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 20537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673:
#line 3170 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 20543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674:
#line 3181 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 20557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675:
#line 3194 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676:
#line 3195 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677:
#line 3200 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 20581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678:
#line 3210 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679:
#line 3211 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680:
#line 3214 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681:
#line 3215 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682:
#line 3219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 20613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683:
#line 3223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 20621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684:
#line 3230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 20629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685:
#line 3234 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 20641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686:
#line 3242 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 20653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687:
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688:
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689:
#line 3257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690:
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691:
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692:
#line 3263 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695:
#line 3277 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696:
#line 3278 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 20701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697:
#line 3282 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698:
#line 3283 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 20713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699:
#line 3287 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700:
#line 3288 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701:
#line 3292 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 20737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702:
#line 3308 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703:
#line 3316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 20761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704:
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-2]);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-2]);
				}
#line 20780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705:
#line 3339 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-4]);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-4]);
				}
#line 20800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706:
#line 3356 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707:
#line 3357 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708:
#line 3360 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709:
#line 3361 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 20824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710:
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 20830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711:
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712:
#line 3369 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 20842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713:
#line 3373 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714:
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715:
#line 3377 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716:
#line 3378 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717:
#line 3379 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 20872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718:
#line 3389 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 20878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719:
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 20884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720:
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 20892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721:
#line 3406 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 20921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722:
#line 3433 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723:
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 20933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724:
#line 3440 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725:
#line 3441 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726:
#line 3444 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727:
#line 3446 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728:
#line 3457 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729:
#line 3460 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 20972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730:
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 20980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731:
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 20988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732:
#line 3479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 21004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733:
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734:
#line 3495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735:
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736:
#line 3511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737:
#line 3549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 21086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738:
#line 3553 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 21094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739:
#line 3557 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 21102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740:
#line 3561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 21110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741:
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 21118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742:
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 21126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743:
#line 3573 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 21134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744:
#line 3578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 21140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745:
#line 3579 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746:
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747:
#line 3596 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748:
#line 3597 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749:
#line 3600 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750:
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751:
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752:
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753:
#line 3609 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754:
#line 3612 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755:
#line 3613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756:
#line 3614 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757:
#line 3617 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758:
#line 3618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759:
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760:
#line 3622 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761:
#line 3623 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 21242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762:
#line 3627 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763:
#line 3629 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764:
#line 3633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765:
#line 3634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767:
#line 3645 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768:
#line 3646 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769:
#line 3647 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770:
#line 3648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771:
#line 3651 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772:
#line 3652 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778:
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779:
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 21394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780:
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 21400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781:
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 21406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782:
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 21420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784:
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 21444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785:
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 21455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786:
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787:
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789:
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790:
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793:
#line 63 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794:
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 21522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 21564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829:
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830:
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831:
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832:
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 21843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833:
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 21871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834:
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 21877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835:
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836:
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 21889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837:
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 21895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838:
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 21901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839:
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840:
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841:
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842:
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843:
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 21931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844:
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 21937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845:
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 21943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846:
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 21949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847:
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 21955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848:
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849:
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850:
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851:
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852:
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853:
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854:
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855:
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856:
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857:
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858:
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859:
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860:
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861:
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 22117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862:
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 22123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863:
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864:
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865:
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866:
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867:
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868:
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869:
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870:
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871:
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872:
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 22221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873:
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874:
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 22233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875:
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 22239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876:
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 22245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877:
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 22251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878:
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879:
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 22263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880:
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 22269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881:
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882:
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883:
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 22292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884:
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 22298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885:
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 22304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886:
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 22310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887:
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 22316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888:
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 22322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889:
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 22328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890:
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 22334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891:
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892:
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893:
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894:
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895:
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896:
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897:
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898:
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899:
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 22408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900:
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 22414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901:
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 22420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902:
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903:
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 22432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904:
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 22438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905:
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 22444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906:
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907:
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 22456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908:
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 22462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909:
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 22468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910:
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 22474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911:
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 22480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912:
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 22486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913:
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 22509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914:
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 22539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915:
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916:
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917:
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918:
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919:
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920:
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921:
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922:
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923:
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924:
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925:
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926:
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927:
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 22621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928:
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 22629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929:
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930:
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931:
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932:
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933:
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934:
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935:
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936:
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 22684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937:
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 22692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938:
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939:
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940:
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941:
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942:
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943:
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944:
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945:
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946:
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947:
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948:
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949:
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950:
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951:
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952:
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953:
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 22876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954:
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 22888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955:
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956:
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957:
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 22915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958:
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959:
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960:
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961:
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962:
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963:
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964:
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 22967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965:
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 22973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966:
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 22979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967:
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 22985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968:
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969:
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970:
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971:
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972:
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 23048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974:
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975:
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 23089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976:
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 23095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981:
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 23106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982:
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 23120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983:
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 23131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984:
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 23142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985:
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 23148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986:
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 23154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987:
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988:
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 23166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989:
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 23172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020:
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021:
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022:
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023:
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024:
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025:
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026:
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027:
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 23224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028:
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 23230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029:
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 23236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030:
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 23242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031:
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 23248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032:
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033:
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034:
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035:
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 23274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036:
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037:
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038:
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039:
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040:
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041:
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042:
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043:
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044:
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 23392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045:
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 23398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046:
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047:
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048:
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 23416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049:
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 23422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050:
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 23428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051:
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 23434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052:
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 23440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053:
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 23446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054:
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 23452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055:
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 23458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056:
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 23464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057:
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 23470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058:
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 23476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059:
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 23482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060:
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 23488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061:
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 23494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062:
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 23500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063:
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 23506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064:
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 23512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065:
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 23518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066:
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 23524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067:
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068:
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069:
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 23542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070:
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 23548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071:
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 23554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072:
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 23560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073:
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 23566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074:
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 23572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075:
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 23578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076:
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 23584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077:
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].list);
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 23602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 23730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 23738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 23761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 23769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 23879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 23891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 23903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 23915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 23935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 23947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 24015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 24103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 24113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 24146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 24158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 24166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 24175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 24184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 24192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 24216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 24222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136:
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 24228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 24249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 24259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 24298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 24304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 24310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146:
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147:
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148:
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149:
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150:
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151:
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152:
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153:
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154:
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155:
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156:
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157:
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158:
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159:
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 24499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160:
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 24505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 24529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 24581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 24593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 24607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 24613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 24619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 24625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 24631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 24645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 24651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 24657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 24663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 24669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 24675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 24681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184:
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185:
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186:
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187:
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188:
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 24753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189:
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 24759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190:
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 24765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191:
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192:
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 24777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193:
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194:
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 24789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195:
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 24795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196:
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 24801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197:
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 24815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198:
#line 21 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199:
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 24839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200:
#line 22 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 24847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201:
#line 26 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 24858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202:
#line 33 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 24869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203:
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204:
#line 44 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 24881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205:
#line 50 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206:
#line 51 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 24893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207:
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208:
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 24925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209:
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 24946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210:
#line 54 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 24967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211:
#line 74 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 24973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212:
#line 75 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 24979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213:
#line 76 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 24985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214:
#line 77 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 24991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 25001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 25011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 25021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218:
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 25031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219:
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 25037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220:
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 25048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221:
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 25063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222:
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 25075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223:
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 25087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224:
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 25099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225:
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 25110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226:
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 25121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227:
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 25127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 25133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229:
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 25141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230:
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 25149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231:
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 25168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 25179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 25185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 25191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235:
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 25197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236:
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237:
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239:
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240:
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 25240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241:
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 25251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242:
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 25262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243:
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244:
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 25274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 25314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249:
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				n->relpersistence=(yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
				
			}
#line 25329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250:
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				n->relpersistence=(yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				(yyval.node) = (PGNode *)n;
                         }
#line 25343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253:
#line 42 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 25351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254:
#line 46 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 25359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261:
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 25452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262:
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 25464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263:
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264:
#line 28 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265:
#line 35 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266:
#line 41 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267:
#line 48 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 25516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268:
#line 58 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 25524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269:
#line 62 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 25533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270:
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 25545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271:
#line 80 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 25557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272:
#line 88 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 25565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273:
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 25571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274:
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 25577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275:
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276:
#line 114 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 25598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277:
#line 119 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 25623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278:
#line 144 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 25636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279:
#line 154 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 25649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280:
#line 163 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 25657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281:
#line 170 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282:
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283:
#line 192 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284:
#line 206 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285:
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 25714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286:
#line 213 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 25720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287:
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 25726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288:
#line 219 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289:
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 25738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290:
#line 226 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291:
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 25750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292:
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293:
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 25762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294:
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295:
#line 240 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 25774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296:
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297:
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 25786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298:
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299:
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300:
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 25804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301:
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 25810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302:
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 25836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 25850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 25854 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yyscanner, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[+*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 41 "third_party/libpg_query/grammar/statements/analyze.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery

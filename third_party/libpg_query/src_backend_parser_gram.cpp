/* A Bison parser, made by GNU Bison 3.8.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30801

/* Bison version string.  */
#define YYBISON_VERSION "3.8.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 242 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_POWER_OF = 15,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 16,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 17,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 18,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 19,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 20,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 21,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 22,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 23,                    /* ACCESS  */
  YYSYMBOL_ACTION = 24,                    /* ACTION  */
  YYSYMBOL_ADD_P = 25,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 26,                     /* ADMIN  */
  YYSYMBOL_AFTER = 27,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 28,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 29,                       /* ALL  */
  YYSYMBOL_ALSO = 30,                      /* ALSO  */
  YYSYMBOL_ALTER = 31,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 32,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 33,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 34,                   /* ANALYZE  */
  YYSYMBOL_AND = 35,                       /* AND  */
  YYSYMBOL_ANY = 36,                       /* ANY  */
  YYSYMBOL_ARRAY = 37,                     /* ARRAY  */
  YYSYMBOL_AS = 38,                        /* AS  */
  YYSYMBOL_ASC_P = 39,                     /* ASC_P  */
  YYSYMBOL_ASSERTION = 40,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 41,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 42,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 43,                        /* AT  */
  YYSYMBOL_ATTACH = 44,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 45,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 46,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 47,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 48,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 49,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 50,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 51,                    /* BIGINT  */
  YYSYMBOL_BINARY = 52,                    /* BINARY  */
  YYSYMBOL_BIT = 53,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 54,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 55,                      /* BOTH  */
  YYSYMBOL_BY = 56,                        /* BY  */
  YYSYMBOL_CACHE = 57,                     /* CACHE  */
  YYSYMBOL_CALL_P = 58,                    /* CALL_P  */
  YYSYMBOL_CALLED = 59,                    /* CALLED  */
  YYSYMBOL_CASCADE = 60,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 61,                  /* CASCADED  */
  YYSYMBOL_CASE = 62,                      /* CASE  */
  YYSYMBOL_CAST = 63,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 64,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 65,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 66,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 67,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 68,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 69,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 70,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 71,                     /* CLASS  */
  YYSYMBOL_CLOSE = 72,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 73,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 74,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 75,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 76,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 77,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 78,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 79,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 80,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 81,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 82,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 83,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 84,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 85,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 86,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 87,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 88,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 89,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 90,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 91,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 92,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 93,                      /* COPY  */
  YYSYMBOL_COST = 94,                      /* COST  */
  YYSYMBOL_CREATE_P = 95,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 96,                     /* CROSS  */
  YYSYMBOL_CSV = 97,                       /* CSV  */
  YYSYMBOL_CUBE = 98,                      /* CUBE  */
  YYSYMBOL_CURRENT_P = 99,                 /* CURRENT_P  */
  YYSYMBOL_CURRENT_CATALOG = 100,          /* CURRENT_CATALOG  */
  YYSYMBOL_CURRENT_DATE = 101,             /* CURRENT_DATE  */
  YYSYMBOL_CURRENT_ROLE = 102,             /* CURRENT_ROLE  */
  YYSYMBOL_CURRENT_SCHEMA = 103,           /* CURRENT_SCHEMA  */
  YYSYMBOL_CURRENT_TIME = 104,             /* CURRENT_TIME  */
  YYSYMBOL_CURRENT_TIMESTAMP = 105,        /* CURRENT_TIMESTAMP  */
  YYSYMBOL_CURRENT_USER = 106,             /* CURRENT_USER  */
  YYSYMBOL_CURSOR = 107,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 108,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 109,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 110,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 111,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 112,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 113,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 114,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 115,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 116,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 117,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 118,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 119,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 120,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 121,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 122,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 123,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 124,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 125,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 126,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 127,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 128,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 129,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 130,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 131,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 132,                 /* DISTINCT  */
  YYSYMBOL_DO = 133,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 134,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 135,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 136,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 137,                     /* DROP  */
  YYSYMBOL_EACH = 138,                     /* EACH  */
  YYSYMBOL_ELSE = 139,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 140,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 141,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 142,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 143,                    /* END_P  */
  YYSYMBOL_ENUM_P = 144,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 145,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 146,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 147,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 148,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 149,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 150,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 151,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 152,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 153,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 154,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 155,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 156,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 157,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 158,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 159,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 160,                   /* FAMILY  */
  YYSYMBOL_FETCH = 161,                    /* FETCH  */
  YYSYMBOL_FILTER = 162,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 163,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 164,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 165,                /* FOLLOWING  */
  YYSYMBOL_FOR = 166,                      /* FOR  */
  YYSYMBOL_FORCE = 167,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 168,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 169,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 170,                   /* FREEZE  */
  YYSYMBOL_FROM = 171,                     /* FROM  */
  YYSYMBOL_FULL = 172,                     /* FULL  */
  YYSYMBOL_FUNCTION = 173,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 174,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 175,                /* GENERATED  */
  YYSYMBOL_GLOB = 176,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 177,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 178,                    /* GRANT  */
  YYSYMBOL_GRANTED = 179,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 180,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 181,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 182,              /* GROUPING_ID  */
  YYSYMBOL_HANDLER = 183,                  /* HANDLER  */
  YYSYMBOL_HAVING = 184,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 185,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 186,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 187,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 188,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 189,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 190,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 191,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 192,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 193,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 194,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 195,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 196,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 197,                     /* IN_P  */
  YYSYMBOL_INCLUDING = 198,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 199,                /* INCREMENT  */
  YYSYMBOL_INDEX = 200,                    /* INDEX  */
  YYSYMBOL_INDEXES = 201,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 202,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 203,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 204,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 205,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 206,                  /* INNER_P  */
  YYSYMBOL_INOUT = 207,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 208,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 209,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 210,                   /* INSERT  */
  YYSYMBOL_INSTALL = 211,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 212,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 213,                    /* INT_P  */
  YYSYMBOL_INTEGER = 214,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 215,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 216,                 /* INTERVAL  */
  YYSYMBOL_INTO = 217,                     /* INTO  */
  YYSYMBOL_INVOKER = 218,                  /* INVOKER  */
  YYSYMBOL_IS = 219,                       /* IS  */
  YYSYMBOL_ISNULL = 220,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 221,                /* ISOLATION  */
  YYSYMBOL_JOIN = 222,                     /* JOIN  */
  YYSYMBOL_JSON = 223,                     /* JSON  */
  YYSYMBOL_KEY = 224,                      /* KEY  */
  YYSYMBOL_LABEL = 225,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 226,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 227,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 228,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 229,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 230,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 231,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 232,                     /* LEFT  */
  YYSYMBOL_LEVEL = 233,                    /* LEVEL  */
  YYSYMBOL_LIKE = 234,                     /* LIKE  */
  YYSYMBOL_LIMIT = 235,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 236,                   /* LISTEN  */
  YYSYMBOL_LOAD = 237,                     /* LOAD  */
  YYSYMBOL_LOCAL = 238,                    /* LOCAL  */
  YYSYMBOL_LOCALTIME = 239,                /* LOCALTIME  */
  YYSYMBOL_LOCALTIMESTAMP = 240,           /* LOCALTIMESTAMP  */
  YYSYMBOL_LOCATION = 241,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 242,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 243,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 244,                   /* LOGGED  */
  YYSYMBOL_MACRO = 245,                    /* MACRO  */
  YYSYMBOL_MAP = 246,                      /* MAP  */
  YYSYMBOL_MAPPING = 247,                  /* MAPPING  */
  YYSYMBOL_MATCH = 248,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 249,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 250,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 251,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 252,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 253,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 254,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 255,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 256,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 257,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 258,                 /* MINVALUE  */
  YYSYMBOL_MODE = 259,                     /* MODE  */
  YYSYMBOL_MONTH_P = 260,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 261,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 262,                     /* MOVE  */
  YYSYMBOL_NAME_P = 263,                   /* NAME_P  */
  YYSYMBOL_NAMES = 264,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 265,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 266,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 267,                    /* NCHAR  */
  YYSYMBOL_NEW = 268,                      /* NEW  */
  YYSYMBOL_NEXT = 269,                     /* NEXT  */
  YYSYMBOL_NO = 270,                       /* NO  */
  YYSYMBOL_NONE = 271,                     /* NONE  */
  YYSYMBOL_NOT = 272,                      /* NOT  */
  YYSYMBOL_NOTHING = 273,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 274,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 275,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 276,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 277,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 278,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 279,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 280,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 281,                 /* OBJECT_P  */
  YYSYMBOL_OF = 282,                       /* OF  */
  YYSYMBOL_OFF = 283,                      /* OFF  */
  YYSYMBOL_OFFSET = 284,                   /* OFFSET  */
  YYSYMBOL_OIDS = 285,                     /* OIDS  */
  YYSYMBOL_OLD = 286,                      /* OLD  */
  YYSYMBOL_ON = 287,                       /* ON  */
  YYSYMBOL_ONLY = 288,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 289,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 290,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 291,                  /* OPTIONS  */
  YYSYMBOL_OR = 292,                       /* OR  */
  YYSYMBOL_ORDER = 293,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 294,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 295,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 296,                  /* OUTER_P  */
  YYSYMBOL_OVER = 297,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 298,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 299,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 300,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 301,                    /* OWNED  */
  YYSYMBOL_OWNER = 302,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 303,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 304,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 305,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 306,                /* PARTITION  */
  YYSYMBOL_PASSING = 307,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 308,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 309,                  /* PERCENT  */
  YYSYMBOL_PLACING = 310,                  /* PLACING  */
  YYSYMBOL_PLANS = 311,                    /* PLANS  */
  YYSYMBOL_POLICY = 312,                   /* POLICY  */
  YYSYMBOL_POSITION = 313,                 /* POSITION  */
  YYSYMBOL_PRAGMA_P = 314,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 315,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 316,                /* PRECISION  */
  YYSYMBOL_PREPARE = 317,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 318,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 319,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 320,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 321,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 322,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 323,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 324,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 325,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 326,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 327,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 328,                    /* QUOTE  */
  YYSYMBOL_RANGE = 329,                    /* RANGE  */
  YYSYMBOL_READ_P = 330,                   /* READ_P  */
  YYSYMBOL_REAL = 331,                     /* REAL  */
  YYSYMBOL_REASSIGN = 332,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 333,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 334,                /* RECURSIVE  */
  YYSYMBOL_REF = 335,                      /* REF  */
  YYSYMBOL_REFERENCES = 336,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 337,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 338,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 339,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 340,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 341,                  /* RELEASE  */
  YYSYMBOL_RENAME = 342,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 343,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 344,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 345,                  /* REPLICA  */
  YYSYMBOL_RESET = 346,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 347,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 348,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 349,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 350,                /* RETURNING  */
  YYSYMBOL_RETURNS = 351,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 352,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 353,                    /* RIGHT  */
  YYSYMBOL_ROLE = 354,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 355,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 356,                   /* ROLLUP  */
  YYSYMBOL_ROW = 357,                      /* ROW  */
  YYSYMBOL_ROWS = 358,                     /* ROWS  */
  YYSYMBOL_RULE = 359,                     /* RULE  */
  YYSYMBOL_SAMPLE = 360,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 361,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 362,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 363,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 364,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 365,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 366,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 367,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 368,                 /* SECURITY  */
  YYSYMBOL_SELECT = 369,                   /* SELECT  */
  YYSYMBOL_SEQUENCE = 370,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 371,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 372,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 373,                   /* SERVER  */
  YYSYMBOL_SESSION = 374,                  /* SESSION  */
  YYSYMBOL_SESSION_USER = 375,             /* SESSION_USER  */
  YYSYMBOL_SET = 376,                      /* SET  */
  YYSYMBOL_SETOF = 377,                    /* SETOF  */
  YYSYMBOL_SETS = 378,                     /* SETS  */
  YYSYMBOL_SHARE = 379,                    /* SHARE  */
  YYSYMBOL_SHOW = 380,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 381,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 382,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 383,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 384,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 385,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 386,                     /* SOME  */
  YYSYMBOL_SQL_P = 387,                    /* SQL_P  */
  YYSYMBOL_STABLE = 388,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 389,             /* STANDALONE_P  */
  YYSYMBOL_START = 390,                    /* START  */
  YYSYMBOL_STATEMENT = 391,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 392,               /* STATISTICS  */
  YYSYMBOL_STDIN = 393,                    /* STDIN  */
  YYSYMBOL_STDOUT = 394,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 395,                  /* STORAGE  */
  YYSYMBOL_STORED = 396,                   /* STORED  */
  YYSYMBOL_STRICT_P = 397,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 398,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 399,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 400,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 401,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 402,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 403,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 404,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 405,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 406,                    /* TABLE  */
  YYSYMBOL_TABLES = 407,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 408,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 409,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 410,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 411,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 412,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 413,                   /* TEXT_P  */
  YYSYMBOL_THEN = 414,                     /* THEN  */
  YYSYMBOL_TIME = 415,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 416,                /* TIMESTAMP  */
  YYSYMBOL_TO = 417,                       /* TO  */
  YYSYMBOL_TRAILING = 418,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 419,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 420,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 421,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 422,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 423,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 424,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 425,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 426,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 427,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 428,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 429,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 430,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 431,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 432,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 433,                    /* UNION  */
  YYSYMBOL_UNIQUE = 434,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 435,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 436,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 437,                 /* UNLOGGED  */
  YYSYMBOL_UNTIL = 438,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 439,                   /* UPDATE  */
  YYSYMBOL_USER = 440,                     /* USER  */
  YYSYMBOL_USING = 441,                    /* USING  */
  YYSYMBOL_VACUUM = 442,                   /* VACUUM  */
  YYSYMBOL_VALID = 443,                    /* VALID  */
  YYSYMBOL_VALIDATE = 444,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 445,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 446,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 447,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 448,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 449,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 450,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 451,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 452,                /* VERSION_P  */
  YYSYMBOL_VIEW = 453,                     /* VIEW  */
  YYSYMBOL_VIEWS = 454,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 455,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 456,                 /* VOLATILE  */
  YYSYMBOL_WHEN = 457,                     /* WHEN  */
  YYSYMBOL_WHERE = 458,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 459,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 460,                   /* WINDOW  */
  YYSYMBOL_WITH = 461,                     /* WITH  */
  YYSYMBOL_WITHIN = 462,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 463,                  /* WITHOUT  */
  YYSYMBOL_WORK = 464,                     /* WORK  */
  YYSYMBOL_WRAPPER = 465,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 466,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 467,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 468,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 469,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 470,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 471,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 472,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 473,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 474,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 475,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 476,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 477,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 478,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 479,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 480,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 481,                    /* YES_P  */
  YYSYMBOL_ZONE = 482,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 483,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 484,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 485,                  /* WITH_LA  */
  YYSYMBOL_486_ = 486,                     /* '<'  */
  YYSYMBOL_487_ = 487,                     /* '>'  */
  YYSYMBOL_488_ = 488,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 489,                /* POSTFIXOP  */
  YYSYMBOL_490_ = 490,                     /* '+'  */
  YYSYMBOL_491_ = 491,                     /* '-'  */
  YYSYMBOL_492_ = 492,                     /* '*'  */
  YYSYMBOL_493_ = 493,                     /* '/'  */
  YYSYMBOL_494_ = 494,                     /* '%'  */
  YYSYMBOL_495_ = 495,                     /* '^'  */
  YYSYMBOL_UMINUS = 496,                   /* UMINUS  */
  YYSYMBOL_497_ = 497,                     /* '['  */
  YYSYMBOL_498_ = 498,                     /* ']'  */
  YYSYMBOL_499_ = 499,                     /* '('  */
  YYSYMBOL_500_ = 500,                     /* ')'  */
  YYSYMBOL_501_ = 501,                     /* '.'  */
  YYSYMBOL_502_ = 502,                     /* ';'  */
  YYSYMBOL_503_ = 503,                     /* ','  */
  YYSYMBOL_504_ = 504,                     /* '{'  */
  YYSYMBOL_505_ = 505,                     /* '}'  */
  YYSYMBOL_506_ = 506,                     /* '#'  */
  YYSYMBOL_507_ = 507,                     /* '?'  */
  YYSYMBOL_508_ = 508,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 509,                 /* $accept  */
  YYSYMBOL_stmtblock = 510,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 511,                /* stmtmulti  */
  YYSYMBOL_stmt = 512,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 513,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 514,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 515,               /* SeqOptList  */
  YYSYMBOL_opt_with = 516,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 517,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 518,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 519,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 520,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 521,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 522, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 523,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 524, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 525, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 526,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 527,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 528, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 529,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 530,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 531,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 532,              /* AnalyzeStmt  */
  YYSYMBOL_unreserved_keyword = 533,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 534,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 535,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 536,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 537,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 538,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 539,         /* reserved_keyword  */
  YYSYMBOL_CallStmt = 540,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 541,           /* CheckPointStmt  */
  YYSYMBOL_CopyStmt = 542,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 543,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 544,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 545, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 546,                /* opt_using  */
  YYSYMBOL_opt_as = 547,                   /* opt_as  */
  YYSYMBOL_opt_program = 548,              /* opt_program  */
  YYSYMBOL_copy_options = 549,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 550,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 551,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 552,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 553,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 554,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 555,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 556, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 557,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 558,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 559,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 560,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 561,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 562, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 563,       /* generic_option_arg  */
  YYSYMBOL_key_action = 564,               /* key_action  */
  YYSYMBOL_ColConstraint = 565,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 566,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 567,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 568,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 569,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 570,      /* generic_option_elem  */
  YYSYMBOL_key_update = 571,               /* key_update  */
  YYSYMBOL_key_actions = 572,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 573,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 574,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 575,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 576,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 577,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 578,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 579,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 580,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 581,                  /* OptWith  */
  YYSYMBOL_definition = 582,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 583,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 584,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 585,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 586,                /* columnDef  */
  YYSYMBOL_def_list = 587,                 /* def_list  */
  YYSYMBOL_index_name = 588,               /* index_name  */
  YYSYMBOL_TableElement = 589,             /* TableElement  */
  YYSYMBOL_def_elem = 590,                 /* def_elem  */
  YYSYMBOL_opt_definition = 591,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 592,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 593,               /* columnElem  */
  YYSYMBOL_opt_column_list = 594,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 595,              /* ColQualList  */
  YYSYMBOL_key_delete = 596,               /* key_delete  */
  YYSYMBOL_reloption_elem = 597,           /* reloption_elem  */
  YYSYMBOL_columnList = 598,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 599,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 600,                /* func_type  */
  YYSYMBOL_ConstraintElem = 601,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 602,         /* TableElementList  */
  YYSYMBOL_key_match = 603,                /* key_match  */
  YYSYMBOL_TableLikeClause = 604,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 605,                  /* OptTemp  */
  YYSYMBOL_generated_when = 606,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 607,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 608,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 609,         /* create_as_target  */
  YYSYMBOL_CreateFunctionStmt = 610,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 611,              /* macro_alias  */
  YYSYMBOL_param_list = 612,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 613,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 614,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 615,              /* schema_stmt  */
  YYSYMBOL_CreateSeqStmt = 616,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 617,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 618,           /* CreateTypeStmt  */
  YYSYMBOL_DeallocateStmt = 619,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 620,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 621,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 622,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 623,             /* using_clause  */
  YYSYMBOL_DropStmt = 624,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 625,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 626,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 627,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 628,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 629, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 630,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 631,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 632,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 633,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 634,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 635,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 636,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 637,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 638, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 639,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 640,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 641,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 642,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 643,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 644,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 645,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 646,                /* IndexStmt  */
  YYSYMBOL_access_method = 647,            /* access_method  */
  YYSYMBOL_access_method_clause = 648,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 649,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 650,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 651,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 652,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 653,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 654,              /* insert_rest  */
  YYSYMBOL_insert_target = 655,            /* insert_target  */
  YYSYMBOL_opt_conf_expr = 656,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 657,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 658,       /* insert_column_item  */
  YYSYMBOL_set_clause = 659,               /* set_clause  */
  YYSYMBOL_opt_on_conflict = 660,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 661,               /* index_elem  */
  YYSYMBOL_returning_clause = 662,         /* returning_clause  */
  YYSYMBOL_override_kind = 663,            /* override_kind  */
  YYSYMBOL_set_target_list = 664,          /* set_target_list  */
  YYSYMBOL_opt_collate = 665,              /* opt_collate  */
  YYSYMBOL_opt_class = 666,                /* opt_class  */
  YYSYMBOL_insert_column_list = 667,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 668,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 669, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 670,             /* index_params  */
  YYSYMBOL_set_target = 671,               /* set_target  */
  YYSYMBOL_LoadStmt = 672,                 /* LoadStmt  */
  YYSYMBOL_file_name = 673,                /* file_name  */
  YYSYMBOL_PragmaStmt = 674,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 675,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 676,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 677,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 678,               /* RenameStmt  */
  YYSYMBOL_opt_column = 679,               /* opt_column  */
  YYSYMBOL_SelectStmt = 680,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 681,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 682,         /* select_no_parens  */
  YYSYMBOL_select_clause = 683,            /* select_clause  */
  YYSYMBOL_simple_select = 684,            /* simple_select  */
  YYSYMBOL_with_clause = 685,              /* with_clause  */
  YYSYMBOL_cte_list = 686,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 687,        /* common_table_expr  */
  YYSYMBOL_into_clause = 688,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 689,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 690,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 691,          /* all_or_distinct  */
  YYSYMBOL_distinct_clause = 692,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 693,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 694,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 695,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 696,              /* sort_clause  */
  YYSYMBOL_sortby_list = 697,              /* sortby_list  */
  YYSYMBOL_sortby = 698,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 699,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 700,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 701,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 702,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 703,             /* limit_clause  */
  YYSYMBOL_offset_clause = 704,            /* offset_clause  */
  YYSYMBOL_sample_count = 705,             /* sample_count  */
  YYSYMBOL_sample_clause = 706,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 707,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 708,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 709,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 710,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 711,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 712,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 713,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 714, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 715,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 716,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 717,            /* first_or_next  */
  YYSYMBOL_group_clause = 718,             /* group_clause  */
  YYSYMBOL_group_by_list = 719,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 720,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 721,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 722,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 723,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 724,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 725,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 726,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 727,            /* having_clause  */
  YYSYMBOL_qualify_clause = 728,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 729,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 730,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 731,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 732,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 733,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 734,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 735,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 736,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 737,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 738,              /* from_clause  */
  YYSYMBOL_from_list = 739,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 740,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 741,                /* table_ref  */
  YYSYMBOL_joined_table = 742,             /* joined_table  */
  YYSYMBOL_alias_clause = 743,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 744,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 745,        /* func_alias_clause  */
  YYSYMBOL_join_type = 746,                /* join_type  */
  YYSYMBOL_join_outer = 747,               /* join_outer  */
  YYSYMBOL_join_qual = 748,                /* join_qual  */
  YYSYMBOL_relation_expr = 749,            /* relation_expr  */
  YYSYMBOL_func_table = 750,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 751,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 752,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 753,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 754,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 755,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 756,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 757,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 758,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 759,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 760,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 761,             /* opt_Typename  */
  YYSYMBOL_Typename = 762,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 763,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 764,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 765,            /* ConstTypename  */
  YYSYMBOL_GenericType = 766,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 767,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 768,                  /* Numeric  */
  YYSYMBOL_opt_float = 769,                /* opt_float  */
  YYSYMBOL_Bit = 770,                      /* Bit  */
  YYSYMBOL_ConstBit = 771,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 772,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 773,         /* BitWithoutLength  */
  YYSYMBOL_Character = 774,                /* Character  */
  YYSYMBOL_ConstCharacter = 775,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 776,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 777,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 778,                /* character  */
  YYSYMBOL_opt_varying = 779,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 780,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 781,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 782,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 783,             /* year_keyword  */
  YYSYMBOL_month_keyword = 784,            /* month_keyword  */
  YYSYMBOL_day_keyword = 785,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 786,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 787,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 788,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 789,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 790,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 791,             /* opt_interval  */
  YYSYMBOL_a_expr = 792,                   /* a_expr  */
  YYSYMBOL_b_expr = 793,                   /* b_expr  */
  YYSYMBOL_c_expr = 794,                   /* c_expr  */
  YYSYMBOL_func_application = 795,         /* func_application  */
  YYSYMBOL_func_expr = 796,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 797,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 798, /* func_expr_common_subexpr  */
  YYSYMBOL_within_group_clause = 799,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 800,            /* filter_clause  */
  YYSYMBOL_export_clause = 801,            /* export_clause  */
  YYSYMBOL_window_clause = 802,            /* window_clause  */
  YYSYMBOL_window_definition_list = 803,   /* window_definition_list  */
  YYSYMBOL_window_definition = 804,        /* window_definition  */
  YYSYMBOL_over_clause = 805,              /* over_clause  */
  YYSYMBOL_window_specification = 806,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 807, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 808,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 809,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 810,             /* frame_extent  */
  YYSYMBOL_frame_bound = 811,              /* frame_bound  */
  YYSYMBOL_qualified_row = 812,            /* qualified_row  */
  YYSYMBOL_row = 813,                      /* row  */
  YYSYMBOL_dict_arg = 814,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 815,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 816, /* dict_arguments_opt_comma  */
  YYSYMBOL_sub_type = 817,                 /* sub_type  */
  YYSYMBOL_all_Op = 818,                   /* all_Op  */
  YYSYMBOL_MathOp = 819,                   /* MathOp  */
  YYSYMBOL_qual_Op = 820,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 821,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 822,              /* subquery_Op  */
  YYSYMBOL_any_operator = 823,             /* any_operator  */
  YYSYMBOL_expr_list = 824,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 825,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 826,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 827,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 828,            /* func_arg_expr  */
  YYSYMBOL_type_list = 829,                /* type_list  */
  YYSYMBOL_extract_list = 830,             /* extract_list  */
  YYSYMBOL_extract_arg = 831,              /* extract_arg  */
  YYSYMBOL_overlay_list = 832,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 833,          /* overlay_placing  */
  YYSYMBOL_position_list = 834,            /* position_list  */
  YYSYMBOL_substr_list = 835,              /* substr_list  */
  YYSYMBOL_substr_from = 836,              /* substr_from  */
  YYSYMBOL_substr_for = 837,               /* substr_for  */
  YYSYMBOL_trim_list = 838,                /* trim_list  */
  YYSYMBOL_in_expr = 839,                  /* in_expr  */
  YYSYMBOL_case_expr = 840,                /* case_expr  */
  YYSYMBOL_when_clause_list = 841,         /* when_clause_list  */
  YYSYMBOL_when_clause = 842,              /* when_clause  */
  YYSYMBOL_case_default = 843,             /* case_default  */
  YYSYMBOL_case_arg = 844,                 /* case_arg  */
  YYSYMBOL_columnref = 845,                /* columnref  */
  YYSYMBOL_indirection_el = 846,           /* indirection_el  */
  YYSYMBOL_opt_slice_bound = 847,          /* opt_slice_bound  */
  YYSYMBOL_indirection = 848,              /* indirection  */
  YYSYMBOL_opt_indirection = 849,          /* opt_indirection  */
  YYSYMBOL_opt_asymmetric = 850,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 851, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 852,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 853,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 854,                /* target_el  */
  YYSYMBOL_except_list = 855,              /* except_list  */
  YYSYMBOL_opt_except_list = 856,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 857,          /* replace_list_el  */
  YYSYMBOL_replace_list = 858,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 859,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 860,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 861,      /* qualified_name_list  */
  YYSYMBOL_qualified_name = 862,           /* qualified_name  */
  YYSYMBOL_name_list = 863,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 864,      /* name_list_opt_comma  */
  YYSYMBOL_name = 865,                     /* name  */
  YYSYMBOL_attr_name = 866,                /* attr_name  */
  YYSYMBOL_func_name = 867,                /* func_name  */
  YYSYMBOL_AexprConst = 868,               /* AexprConst  */
  YYSYMBOL_Iconst = 869,                   /* Iconst  */
  YYSYMBOL_Sconst = 870,                   /* Sconst  */
  YYSYMBOL_ColId = 871,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 872,            /* ColIdOrString  */
  YYSYMBOL_type_function_name = 873,       /* type_function_name  */
  YYSYMBOL_function_name_token = 874,      /* function_name_token  */
  YYSYMBOL_type_name_token = 875,          /* type_name_token  */
  YYSYMBOL_any_name = 876,                 /* any_name  */
  YYSYMBOL_attrs = 877,                    /* attrs  */
  YYSYMBOL_opt_name_list = 878,            /* opt_name_list  */
  YYSYMBOL_param_name = 879,               /* param_name  */
  YYSYMBOL_ColLabel = 880,                 /* ColLabel  */
  YYSYMBOL_ColLabelOrString = 881,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 882,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 883,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 884,               /* UpdateStmt  */
  YYSYMBOL_VacuumStmt = 885,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 886,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 887,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 888,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 889,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 890,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 891,            /* generic_reset  */
  YYSYMBOL_reset_rest = 892,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 893,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 894,                 /* set_rest  */
  YYSYMBOL_generic_set = 895,              /* generic_set  */
  YYSYMBOL_var_value = 896,                /* var_value  */
  YYSYMBOL_zone_value = 897,               /* zone_value  */
  YYSYMBOL_var_list = 898,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 899,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 900,         /* show_or_describe  */
  YYSYMBOL_var_name = 901,                 /* var_name  */
  YYSYMBOL_ViewStmt = 902,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 903          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  631
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   56874

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  509
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  395
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1917
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3102

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   742


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   506,     2,   494,     2,     2,
     499,   500,   492,   490,   503,   491,   501,   493,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   508,   502,
     486,   488,   487,   507,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   497,     2,   498,   495,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   504,     2,   505,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   489,   496
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   466,   466,   482,   494,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   538,
       1,    30,    49,    72,    73,    78,    82,    87,    91,    99,
     100,   104,   105,   110,   111,   115,   116,   121,   122,   123,
     124,   125,   130,   138,   142,   147,   148,   153,   157,   162,
     166,   170,   174,   178,   182,   186,   190,   194,   198,   202,
     206,   210,   214,   222,   228,   229,   230,   235,   239,     2,
       7,    14,    24,    25,    32,     6,    47,    48,    52,    53,
      68,    69,    76,    84,    92,   100,   108,   116,   127,   128,
     155,   171,   188,   189,   208,   212,   216,   233,   240,   247,
     257,   258,   261,   273,   284,   292,   297,   302,   307,   312,
     320,   328,   333,   338,   345,   346,   350,   351,   352,   359,
     360,   364,   365,   369,   370,   371,   375,   376,   380,   381,
     391,   404,   405,   408,   417,   428,   429,   430,   433,   434,
     435,   439,   440,   441,   442,   446,   447,   451,   453,   469,
     471,   476,   479,   487,   491,   495,   499,   503,   507,   514,
     519,   526,   527,   531,   536,   540,   544,   552,   559,   560,
     565,   566,   570,   571,   576,   578,   580,   585,   605,   606,
     608,   613,   614,   618,   619,   622,   623,   648,   649,   654,
     659,   663,   664,   668,   669,   673,   674,   675,   676,   677,
     681,   694,   701,   708,   715,   716,   720,   721,   725,   726,
     730,   731,   735,   736,   740,   741,   745,   756,   757,   758,
     759,   763,   764,   769,   770,   771,   780,   786,   795,   796,
     809,   810,   814,   815,   819,   820,   826,   832,   840,   849,
     857,   866,   875,   879,   905,   909,   922,   936,   951,   963,
     979,   985,   990,   996,  1003,  1004,  1012,  1016,  1020,  1026,
    1033,  1038,  1039,  1040,  1041,  1045,  1046,  1058,  1059,  1064,
    1071,  1078,  1085,  1117,  1128,  1141,  1146,  1147,  1150,  1151,
    1154,  1155,  1160,  1161,  1166,  1170,  1176,  1197,  1205,  1218,
    1221,  1225,  1225,  1228,  1229,  1231,  1236,  1243,  1248,  1254,
    1259,  1265,  1271,  1280,  1282,  1285,  1289,  1290,  1291,  1292,
    1293,  1294,  1299,  1319,  1320,  1321,  1322,  1333,  1347,  1348,
    1354,  1359,  1364,  1369,  1374,  1379,  1384,  1389,  1395,  1401,
    1407,  1414,  1436,  1445,  1449,  1457,  1461,  1469,  1481,  1502,
    1506,  1512,  1516,  1529,  1537,  1547,  1549,  1551,  1553,  1555,
    1557,  1562,  1563,  1570,  1579,  1587,  1596,  1607,  1615,  1616,
    1617,  1621,  1621,  1624,  1624,  1627,  1627,  1630,  1630,  1633,
    1633,  1636,  1636,  1639,  1639,  1642,  1642,  1645,  1647,  1649,
    1651,  1653,  1655,  1657,  1659,  1661,  1666,  1671,  1677,  1684,
    1689,  1695,  1701,  1732,  1734,  1736,  1744,  1759,  1761,  1763,
    1765,  1767,  1769,  1771,  1773,  1775,  1777,  1779,  1781,  1783,
    1785,  1787,  1790,  1792,  1794,  1797,  1799,  1801,  1803,  1805,
    1810,  1815,  1822,  1827,  1834,  1839,  1846,  1851,  1859,  1867,
    1875,  1883,  1901,  1909,  1917,  1925,  1933,  1941,  1945,  1949,
    1953,  1961,  1965,  1981,  1989,  1997,  2005,  2013,  2021,  2029,
    2033,  2037,  2041,  2045,  2053,  2061,  2069,  2077,  2097,  2119,
    2130,  2137,  2148,  2162,  2178,  2180,  2182,  2184,  2186,  2188,
    2190,  2192,  2194,  2196,  2198,  2200,  2202,  2204,  2206,  2208,
    2210,  2212,  2214,  2216,  2218,  2222,  2226,  2230,  2244,  2245,
    2246,  2253,  2265,  2280,  2292,  2294,  2306,  2317,  2341,  2352,
    2361,  2365,  2372,  2380,  2388,  2399,  2407,  2435,  2471,  2482,
    2483,  2490,  2496,  2500,  2504,  2508,  2512,  2516,  2520,  2524,
    2528,  2532,  2536,  2540,  2544,  2548,  2552,  2556,  2558,  2560,
    2564,  2573,  2578,  2585,  2600,  2607,  2611,  2615,  2619,  2623,
    2637,  2638,  2642,  2643,  2644,  2648,  2649,  2656,  2657,  2661,
    2662,  2667,  2675,  2677,  2691,  2694,  2721,  2722,  2725,  2726,
    2737,  2743,  2750,  2759,  2776,  2821,  2829,  2837,  2845,  2853,
    2874,  2875,  2878,  2879,  2883,  2893,  2894,  2898,  2899,  2903,
    2904,  2905,  2908,  2909,  2912,  2913,  2914,  2915,  2916,  2917,
    2918,  2919,  2920,  2921,  2922,  2923,  2924,  2927,  2929,  2934,
    2936,  2941,  2943,  2945,  2947,  2949,  2951,  2953,  2955,  2969,
    2971,  2975,  2979,  2986,  2991,  2998,  3003,  3011,  3015,  3021,
    3025,  3034,  3045,  3046,  3050,  3054,  3061,  3062,  3063,  3064,
    3065,  3066,  3067,  3068,  3069,  3070,  3080,  3084,  3091,  3098,
    3099,  3115,  3119,  3124,  3128,  3143,  3148,  3152,  3155,  3158,
    3159,  3160,  3163,  3170,  3180,  3194,  3195,  3199,  3210,  3211,
    3214,  3215,  3218,  3222,  3229,  3233,  3241,  3252,  3253,  3257,
    3258,  3262,  3263,  3266,  3267,  3277,  3278,  3282,  3283,  3287,
    3288,  3291,  3307,  3315,  3323,  3338,  3356,  3357,  3360,  3361,
    3364,  3368,  3369,  3373,  3374,  3377,  3378,  3379,  3389,  3390,
    3401,  3405,  3432,  3434,  3440,  3441,  3444,  3446,  3456,  3459,
    3470,  3474,  3478,  3490,  3494,  3503,  3510,  3548,  3552,  3556,
    3560,  3564,  3568,  3572,  3578,  3579,  3595,  3596,  3597,  3600,
    3601,  3607,  3608,  3609,  3612,  3613,  3614,  3617,  3618,  3619,
    3622,  3623,  3626,  3628,  3633,  3634,  3637,  3645,  3646,  3647,
    3648,  3651,  3652,     7,    14,    22,    11,    24,    37,    54,
      55,    56,    61,     3,    10,    17,    24,    31,    38,    45,
      52,    61,    61,    63,    64,     9,    17,    29,    30,    34,
      35,    36,    41,    42,    43,    48,    52,    56,    60,    64,
      68,    72,    76,    80,    84,    88,    92,    97,   101,   105,
     112,   113,   117,   118,   119,     7,    13,    19,    25,     7,
      21,    36,    56,    57,    84,    85,    86,    87,    88,    89,
      93,    94,    99,   104,   105,   106,   107,   108,   113,   120,
     121,   122,   139,   146,   153,   163,   173,   185,   193,   202,
     220,   221,   225,   226,   230,   239,   262,   276,   283,   288,
     290,   292,   294,   297,   300,   301,   302,   303,   308,   312,
     313,   318,   325,   330,   331,   332,   333,   334,   335,   336,
     337,   343,   344,   348,   353,   360,   367,   374,   386,   387,
     388,   389,   393,   398,   399,   400,   405,   410,   411,   412,
     413,   414,   415,   420,   440,   469,   470,   474,   478,   479,
     480,   484,   488,   496,   497,   502,   503,   504,   508,   516,
     517,   522,   523,   527,   532,   536,   540,   545,   553,   554,
     558,   559,   563,   564,   570,   581,   594,   608,   622,   636,
     650,   673,   677,   684,   688,   696,   701,   708,   718,   719,
     720,   721,   722,   729,   736,   737,   742,   743,     7,    14,
      31,    51,    52,     7,    16,    34,    41,    46,    47,    48,
      49,     9,    16,    26,    33,    44,    45,    50,    51,    52,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      90,    91,    92,    97,    98,   103,   107,   115,   116,   121,
     122,   123,   129,   134,   142,   143,     9,    19,    29,    39,
      49,    59,    69,    79,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     113,   114,   115,   116,   117,   118,   119,   124,   125,   130,
     131,   132,   137,   138,   139,   142,   143,     7,     9,    18,
      27,    36,    45,    54,    63,    72,    85,    87,    93,    94,
      99,   103,   107,   118,   126,   130,   139,   148,   157,   166,
     175,   184,   192,   200,   209,   218,   227,   236,   253,   262,
     271,   280,   290,   303,   318,   327,   335,   350,   358,   368,
     378,   385,   392,   400,   407,   418,   419,   424,   428,   433,
     438,   446,   447,   452,   456,   457,   458,     2,     9,    15,
      21,    28,    35,    45,    46,    47,     6,    15,    25,    35,
      45,    55,    65,    75,    85,    95,   106,   117,   127,   140,
     141,     7,    18,    19,    23,    24,    25,    26,     8,    22,
      36,    48,    56,    70,    71,    72,    73,    74,    87,    88,
      93,    94,    98,    99,     8,    33,    62,    66,    67,    72,
      73,    78,    79,    83,    84,    89,    90,     7,    20,     7,
      21,    25,    32,    43,    44,    50,    51,     8,    21,    34,
      52,    74,    75,    76,    77,    10,    16,    22,    28,    38,
      39,    47,    58,    70,    78,    86,    93,   103,   105,   111,
     115,   119,   134,   141,   142,   143,   147,   148,     5,    11,
       7,    14,    20,    28,    29,     9,    19,    32,    33,     8,
      20,    36,    37,    41,    45,     7,    16,    25,    34,    43,
      52,     7,     8,    21,    27,    34,    40,    47,    57,    61,
      70,    79,    88,    95,    96,   101,   113,   118,   143,   153,
     163,   169,   180,   191,   206,   207,   213,   214,   219,   220,
     226,   227,   231,   232,   237,   239,   245,   246,   250,   251,
     254,   255,   260,     9,    19,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    34,    34,    34,    34,    34,
      34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
      34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
      34,    34,    34,    34,    34,    34,    34,    34,    35,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "POWER_OF", "LAMBDA_ARROW",
  "DOUBLE_ARROW", "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P",
  "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE",
  "ALL", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY",
  "ARRAY", "AS", "ASC_P", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT",
  "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P",
  "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE",
  "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P",
  "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P",
  "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE",
  "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT",
  "COMMITTED", "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT",
  "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P",
  "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE",
  "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
  "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "HANDLER", "HAVING",
  "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT",
  "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P",
  "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P",
  "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT",
  "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION",
  "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING",
  "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P",
  "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PLACING", "PLANS", "POLICY", "POSITION", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
  "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING",
  "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW",
  "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL",
  "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT", "SEQUENCE",
  "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNTIL", "UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE",
  "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING",
  "VERBOSE", "VERSION_P", "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'{'", "'}'", "'#'", "'?'",
  "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "unreserved_keyword", "col_name_keyword",
  "func_name_keyword", "type_name_keyword", "other_keyword",
  "type_func_name_keyword", "reserved_keyword", "CallStmt",
  "CheckPointStmt", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "CreateFunctionStmt", "macro_alias",
  "param_list", "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt",
  "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "type_name_list", "ExecuteStmt", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list",
  "set_clause_list_opt_comma", "index_params", "set_target", "LoadStmt",
  "file_name", "PragmaStmt", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "RenameStmt", "opt_column", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause",
  "simple_select", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "joined_table", "alias_clause", "opt_alias_clause", "func_alias_clause",
  "join_type", "join_outer", "join_qual", "relation_expr", "func_table",
  "rowsfrom_item", "rowsfrom_list", "opt_col_def_list", "opt_ordinality",
  "where_clause", "TableFuncElementList", "TableFuncElement",
  "opt_collate_clause", "colid_type_list", "RowOrStruct", "opt_Typename",
  "Typename", "opt_array_bounds", "SimpleTypename", "ConstTypename",
  "GenericType", "opt_type_modifiers", "Numeric", "opt_float", "Bit",
  "ConstBit", "BitWithLength", "BitWithoutLength", "Character",
  "ConstCharacter", "CharacterWithLength", "CharacterWithoutLength",
  "character", "opt_varying", "ConstDatetime", "ConstInterval",
  "opt_timezone", "year_keyword", "month_keyword", "day_keyword",
  "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
  "b_expr", "c_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "indirection",
  "opt_indirection", "opt_asymmetric", "opt_target_list_opt_comma",
  "target_list", "target_list_opt_comma", "target_el", "except_list",
  "opt_except_list", "replace_list_el", "replace_list",
  "replace_list_opt_comma", "opt_replace_list", "qualified_name_list",
  "qualified_name", "name_list", "name_list_opt_comma", "name",
  "attr_name", "func_name", "AexprConst", "Iconst", "Sconst", "ColId",
  "ColIdOrString", "type_function_name", "function_name_token",
  "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
  "ColLabel", "ColLabelOrString", "TransactionStmt", "opt_transaction",
  "UpdateStmt", "VacuumStmt", "vacuum_option_elem", "opt_full",
  "vacuum_option_list", "opt_freeze", "VariableResetStmt", "generic_reset",
  "reset_rest", "VariableSetStmt", "set_rest", "generic_set", "var_value",
  "zone_value", "var_list", "VariableShowStmt", "show_or_describe",
  "var_name", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-2709)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1846)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    3342,  -106,   845, -2709, -2709,  -106, 37732, -2709,  -106,    63,
    1086, 39652, -2709,  3581,  -106, 42532, 56374,   242,   267,   251,
   43012, 43012, 50662, 42532, 43492,  -106,   292, 51142, -2709,  -106,
   25567, 40132,     8,  -105, 43972, 42532,  1044,   413,   -68, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,    77, -2709,
   -2709, -2709, -2709,   114, -2709, -2709, -2709, -2709, -2709,   130,
   -2709,   195,   174,   -74,   158, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, 25087, -2709, -2709, -2709, -2709, 44452, 42532, 44932,
   40612, 45412, -2709,   113, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709,   139, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709,   185, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709,   187, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709,   191, -2709, -2709, -2709,   189,   380,
   -2709, -2709, -2709,   148,  1044, 42532,   544,   796,   354, 51622,
   -2709, -2709, 50662, -2709, -2709,   922,   386, -2709, -2709, -2709,
   -2709, -2709, 41092, -2709, -2709, -2709, -2709, -2709,   546, -2709,
   -2709,   411, -2709,   154, -2709, -2709,   409,   445, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709,   474, -2709, 45892, -2709,
   52102, 46357, 46837, -2709,   414, 56375, 23647, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709,    77, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,   914,
   -2709, 43012,   914, -2709, -2709, -2709, -2709, -2709,   462,   476,
   -2709,   517,   764, -2709, -2709, -2709,   514, -2709, -2709,   737,
   10683, 10683, 52582, 52582,   914, 52582,   559, -2709, -2709,     1,
   -2709,  -105, -2709,   -74,   514, 26048, -2709,   541,   380, -2709,
   -2709,   137,   898, 14723, 42532,   557, -2709,   613,   557,   618,
     632, -2709,  3342, -2709, 42532,   972,   932, 40132,   873,   873,
    1108,   873,   729,   962, -2709,  1647, -2709,   692, -2709,   767,
     998, -2709,   514,  1112,   234,   929,  1124,  1529,  1142,   810,
    1167,   811,  7148, 14723, 35332, -2709,   380, -2709, -2709, -2709,
   -2709,   827,   857, -2709, -2709, -2709, -2709,   588,  1060, -2709,
     843,  1324, -2709, -2709,   936, 47317, 47797, 42532, 42532,  1318,
   -2709, -2709, -2709, -2709,   958, -2709, -2709, -2709,   390, -2709,
   -2709, -2709, -2709,   979, -2709,   979,   979, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709,   952,   952,  1117,   959, -2709,
   -2709, -2709,  1312, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709,   973,  1027, -2709,   979, -2709,   952, -2709,
   -2709, -2709, -2709, -2709, -2709, 55447, -2709, -2709, -2709, -2709,
     555,   726, -2709, -2709, -2709, -2709, -2709, -2709,    72,   983,
   -2709,  1406, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
    1013, -2709,  3329,   952,  1345,    78, -2709,  1350,    90, -2709,
    1364,  1191, 14723, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709,  -105, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709,   549, -2709, -2709, 32752, 56375,  1058, -2709, -2709,
   32752, 15228, 48277,  1525, -2709,  1341, 50662,  1078, -2709, -2709,
   -2709, -2709, -2709, -2709,   121,  1575,   200,  1579, 14723,  1089,
     200,   200,  1093,  1432,   201,   203,   204,   207,  1097,  1101,
     208,   209,   209, -2709,  1103,  1114, -2709,   211,  1126,  1136,
    1645,  1660,   150,  1153,  1172,  1027,   200, 14723, -2709,  1182,
     209,  1185,  1189,  1210,  1705,  1213,   213,  1710,  1217,   116,
     140,  1218,  1219, -2709,  1225,   217,   226, 14723, 14723, 14723,
    1583, 14723,  8158, 42532,  1716, -2709,   380,  1228,   914, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709,   156,  5519, -2709,
    1270, -2709, -2709, -2709,  1437, 14723, -2709, -2709,  1234,  1530,
   -2709,   250, -2709, -2709, -2709,   570,  1530, -2709, -2709, -2709,
   -2709, -2709,   276,  1654, 31792, 32272, 42532, -2709, -2709,   380,
   -2709, -2709, -2709, -2709, -2709, -2709,   682, -2709,    77, 34139,
    1243,  1251,   380,   557, 42532, 42532,  1718, -2709, -2709, -2709,
     613, 40132, 42532,  1381, 53062, -2709, -2709,   -74,   -74,  9673,
     -74,   157,   731, 11188, 15733,  1594,  1478,   673,   188,  1597,
   -2709,  1485,   729,   962, 14723, -2709,  1535, 42532, 38212,   905,
     920,  1271,  1352,  1273,   531,  1686, -2709,  1272, -2709,  1360,
   42532, 55447,   278, -2709,  1724,   278,   278,   232,  1725,  1366,
     313,  1522,    39,   -86,  2874, -2709,  1272, 40132,   152,   659,
    1272, 42532,  1369,   672,  1272,   134, 15228,  1291,  1355,   284,
    1363,  1380,   138,   144,   149,   155,   168, 15228,  1402,  1474,
     170,  1494,  1577,  1581,  1591,  1595,  1598,  1602,  1605,   173,
    1608,  1615,  1619,  1626,  1628,   180,  1632,   184,  1634,   163,
     186, 15228,  1643,  1289, -2709,   190, -2709, 34139,   -35, -2709,
   -2709,  1646, 30354,  1282, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709,  1374, 50662,  1331,   -22,  1641,  1700,
   35332,  1299, 48277, 42532,  1532,  2874,  1533,  1768,  1308,   857,
    1311, -2709, 53542, -2709, -2709, -2709, -2709, -2709, -2709,  1315,
   -2709, -2709, 14723, -2709, -2709, -2709,  1802, -2709, 48277, 48277,
     979,   979, -2709, -2709,  1779,  1403,  1404,  1802, -2709,  1802,
   -2709, -2709, -2709, 48277, -2709, 50662,  1327,  1329,  1802, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709,  1802,  1400, -2709,  1411,  1414,
    1416, -2709, -2709, -2709, -2709, -2709, 50662, 50662, -2709, 42532,
   42532, -2709, 42532, 50662,  1323, 56375, 37252, -2709, -2709, -2709,
   -2709,   970,  1054, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, 35332, -2709,  1706, -2709, -2709, -2709,  1332,   701,
   -2709,   745,  1044, -2709, -2709, 14723,   380, 14723, -2709, 34139,
    1377, 14723, 14723,  1337,  1802,  1802, -2709,  3769,  1802,  1802,
    5559, 14723, 28931, 14723, 19268, 11693, 14723, 14723,  8663, 14723,
    5559,  1827,  1827, 27008, -2709,  1495, -2709,  1342,  1106,  6138,
    1343, -2709,  1346,  1336,  1344, -2709,   380,   380, 14723, -2709,
   14723,  3564,  3564, -2709,   197, 48277, 14723, 14723, 14723, 14723,
   14723, 14723, 14723, 34852,  1433,   181, 50662, 14723, 14723,  1351,
    1041, -2709, 14723,  1568, -2709,  1354, 14723,  1438,   243, 14723,
   14723, 14723, 14723, 14723, 14723, 14723, 14723, 14723, -2709, -2709,
   20769,   237,  1674,  1694,   380,    21,   355, 10683, 41572,  1695,
    7148, -2709,   380, 30832,   103,  1695, -2709, -2709, -2709, -2709,
     263, -2709, -2709, -2709, -2709,  1332, -2709,  1332,  1357, 42532,
     137, 39172, 14723, -2709, -2709,  1365,  1367,  1370, -2709,  1431,
     666,  1841, 27488, 50662, -2709,  1665, -2709,   290,   290,  1378,
   -2709, 33229,  1665, -2709, -2709, 19759,  1504,  1661,  1596, -2709,
   -2709,  1578,  1580, -2709,  1383, 34202, 16238, 16238, -2709,  1304,
   34139,  1320, -2709, -2709, -2709, -2709, -2709, -2709,   593, -2709,
   42532,    29,  1594,   188,  1388, -2709,   826,  1391, 54022, 42532,
    1668,  1621,  1671,   379, -2709, -2709, -2709, 48277, -2709, 42532,
   50662, 48742, 54502, 35812, 42532, 35332, -2709, -2709, -2709, -2709,
   42532,   927, 42532,  6637, -2709, -2709, -2709,   278, -2709, -2709,
   -2709, -2709, -2709, 50662, 42532, -2709, -2709,   278, 50662, 42532,
     278, -2709,   833, 42532, 42532, 42532, 42532,   834, 42532, 42532,
      32,    32,  1609, -2709, 12198,   153, -2709, 14723, 14723, -2709,
   14723,  1582, -2709,   784, -2709,  1623,   160,  1456, 42532, 42532,
   50662,  1022, -2709, -2709, -2709, -2709, -2709, -2709, 35332, -2709,
    1412,  1758,  2874, -2709,  1760,    37, 38692,   822,  1452, 12703,
    1876,  1644, -2709,  1631, -2709, 14723,  1423,  1435,    72,   799,
   -2709, -2709,  1439,  1329,  1450,  1462,  1451,  1453, -2709,   817,
   48277,  1802,   107,  1454,  1457,  1430,   650,   551,  1326,    78,
   -2709,    90, -2709,  1651,   142, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709,   839, 22687, -2709, -2709,  1892,   914,  1892,
     719, -2709, -2709,  1892, -2709,  1892, -2709, 32752, -2709, 15228,
   -2709, 48277, -2709, -2709, -2709, -2709, -2709,  1458, -2709,  1436,
   14723,    80, -2709, 33291,  1459, 14723,  1460,  1464, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709,  1471,  1781, -2709,
    1472,  1476,  4812, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,  1477,  1480,
   33327,  1479, 19268, 19268,  8158,  1507, -2709, 19268,  1484, -2709,
    1486, 33242,  1482,  1487, 33372, 13208, 14723, 13208, 13208, 33781,
   -2709,  1488, 33860, 42532, -2709, 16743, -2709, -2709, -2709, 14723,
   42532, -2709, 14723,  1490,  6570, -2709, -2709, -2709,  1055, 34215,
     355,  1434,  1434,  1434,  5559, -2709, -2709, -2709,  1473, -2709,
   19268, 19268, -2709,  2200,  3678,  8158, -2709, -2709,  1785, -2709,
     844, -2709,  1493, -2709, -2709,  6378, -2709, 28931, 34289, 14723,
     182, -2709, 14723,  1351, 14723,  1561,  1434,  1434,  1434,   285,
     285,   231,   231,   231,  1055,   355, -2709, -2709, -2709,  1497,
    1505,  1506,  1848,  1213, 14723, -2709, -2709,   883,   900, 42532,
    2818,  4418,  4779, -2709, -2709, 23167,  1548,   -35,  1583,  1548,
    1802,  3564, -2709,   613, -2709, -2709, -2709, 34139, 42532, -2709,
    1044, 23167,  1550,  1563,   -60, 25567,  1726, -2709, 50662, 50662,
   -2709,  1508,  1695,  1524, -2709, -2709, -2709, -2709,  1534,  1534,
   14723,  1730,  1534,  1734,  1735,  1127,  1127,  1304,  1736, -2709,
   -2709,  1587, -2709, -2709, -2709, 14723,  9168,  1338, -2709,  1340,
   -2709, -2709, -2709, -2709,  1526, -2709, -2709,  1787, -2709, -2709,
   -2709, -2709,  1611,  1272, 14723,  1759, -2709,   239,  1537,  1880,
     381,  1833, 50662, -2709,   310,   331, -2709,   768,  1887,   142,
    1888,   142, 35332, 35332, 35332,   840, -2709, -2709,   914, -2709,
   -2709,   854, -2709,  -109, -2709, -2709, -2709,  1624,   775,  2874,
    1272, -2709, -2709, -2709, -2709, -2709, -2709, -2709,   179,   776,
    1272,  1625, -2709,  1629, -2709,  1635,   798,  1272, -2709, -2709,
     153,   153,   153, 15228, -2709,  1764,  1766,  1551, 34139, 34139,
   34139,  1555, -2709,   148, -2709, 50662, -2709, -2709, -2709,  1582,
   42532,  2010,  1564,   857, -2709,  1738,   -20, -2709, 50662, 42532,
   42532, 42532,  1593, 42532, -2709, -2709, -2709,  1562,  1576, -2709,
   21258,   -33,  1799,  1800,  1273,  2053, -2709,   864, 13713,  1942,
   42532,  1599, -2709, -2709, -2709, -2709,  1802, -2709, -2709,   510,
     510, -2709, 50662, -2709,  1604, -2709,  1607, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, 50662, -2709,
   -2709, 35332, -2709, 36772, -2709, -2709, -2709, -2709,   914, -2709,
     914,  1818, 50662, 31312,   914,   914, -2709, -2709, -2709, -2709,
   33889, 14723, -2709,  1957, 48277, -2709,  6631, -2709, -2709, -2709,
   14723, -2709, -2709, 14723, -2709, 28931, 14723,  1932, -2709,  2096,
    2096,  6138, 48277, 19268, 19268, 19268, 19268, 19268,   432,  1185,
   19268, 19268, 19268, 19268, 19268, 19268, 19268, 19268, 19268, 20264,
     393, -2709, -2709, 14723, 14723,  1943,  1932, 14723, -2709, 48277,
    1610, -2709,  1612,  1620, 14723, -2709, 48277,  1627,  8158, 33968,
   -2709,   380, 29419, -2709, 34139, -2709,  3564, 14723,  1475,  2360,
   14723,  1630, 14723,  1937, -2709, -2709,  1616, -2709, -2709, 48277,
   14723,  1636, 29978, 19268, 19268, 30021, -2709, 34052, 14723,  8158,
   -2709,  1609, 14218, -2709,  1814,  1713,  1713,  1713,  1713, -2709,
   -2709, 42532, 42532, 42532, 24127,  1950, 22204, 49222, 49222,  1622,
   -2709,  1448, -2709, 49222, 49702, -2709,  1639, -2709,   380, 14723,
    1948,   153,  1495,  1948,  1648, -2709, -2709,  1649, -2709, 14723,
    1782, -2709, -2709, -2709,  1683, -2709,   870, -2709,  2045,  1782,
   -2709,   895, -2709, 27488,  1550, 14723,   380,   624, -2709, -2709,
   -2709,  1640, -2709,  1534, -2709, -2709, -2709,  1846, -2709, -2709,
   -2709, 42532, -2709, 42532, 29448,  1989, -2709, 50662, 50662, 50662,
   -2709, 50662,  1642,  1655,   875,  1658,   597, -2709,  2432,   875,
    1968,   584,  1273,   313,  2207,    26, -2709, -2709, -2709,  1731,
   42532, -2709, 50662, -2709, -2709, -2709, -2709, -2709, 35812, -2709,
   -2709, -2709, 35332, 28450, 35332, 42532, 42532, 42532, 42532, 42532,
   42532, 42532, 42532, 42532, 42532,  1662,  1666,  1667,  1609, -2709,
   -2709, -2709, -2709,   -86, -2709,   148,  1669,  1044, 38692,  1452,
    1700,   588, 50182,   925,  2874,  2106,  1672,   414,   167, -2709,
   -2709,   822, 38692, -2709, -2709, -2709,  2065, -2709, -2709,  1044,
   -2709,  1044, 34139, 50662,  1719, -2709,  1329,  1663, -2709, -2709,
    1329, 48277, -2709, -2709,   142, -2709,   938, -2709, -2709, -2709,
   -2709, 50662,  1670, -2709,  1670, -2709, -2709, 14723, 34139, -2709,
    1675, -2709, 34139, 29484, -2709, 34139,  1943, -2709,  2096,  1455,
    1455,  1455,  2078,  1999,   268,  1673,  1455,  1455,  1455,   319,
     319,   118,   118,   118,  2096,   393, 34139, 34139, -2709, -2709,
    1676, -2709, -2709, -2709, -2709,  1677, -2709,  6051, -2709,  1678,
    1680, 50662, -2709, -2709,   890, 14723, 14723,  2200, -2709,  6507,
   14723, 48277,   944,  2200,   282, 14723,  3078,  3626, 14723, 14723,
   34377, 29513,  1682, 14723, 29611, 27968, -2709, 42532, 42532, 42532,
   42532, -2709, -2709, -2709, 49222, 49702,  1679, 21724, 49222,  1448,
    1684, 42532, -2709,  1775,  1687,  1775, 23167,  1952,  1889, -2709,
   23167,  1889,   897,  1889,  1965,  1775, 26528, -2709,  1775,  1691,
    1901, -2709,   697, 34139,  2140,  2013,  1698, -2709,  2013,   914,
   -2709, 34139, 10683, -2709,  1044,   797, 50662,   380,   -25, -2709,
    1711, 50662, -2709,  1782, 34139, -2709, -2709, 28931, -2709, -2709,
   -2709, -2709, -2709, 50662,  1701, -2709,  1702,   875, -2709, 50662,
    1739, -2709,   218,  2001,    96, -2709, 14723, -2709,  2087,  2167,
    2432,  1707, 50662, 42532, 19268, -2709,   221,   220, -2709,  1983,
   42532,  1739,  2126, -2709, -2709, -2709,   597, -2709,  2020,  1936,
   -2709,   278, -2709, 14723,   597,  1949,   295, 50662, -2709, -2709,
    2228, -2709, 48277,   142,   142, -2709, -2709,  1727,  1729,  1733,
    1740,  1741,  1743,  1745,  1746,  1748,  1755,  1757,  1761,  1762,
   -2709,  1767,  1772,  1776,  1777,  1786,  1793,  1795,  1797,   973,
    1798, -2709,  1801,  1640,  1803,  1804,  1805,  1806, 54982,  1807,
    1808,  1816,  1817,  1819,  1820,   970,  1054, -2709,  1821, -2709,
   -2709, -2709, -2709, -2709, -2709,   843,  1747, -2709, -2709,  1810,
   -2709,  1822, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
     153,  1058,   117, 50662,  1593,  1714,  2181,   -15,  1959,  1789,
    1452, -2709,   693, 38692,  1593, -2709,  2131,   669,  1800, -2709,
     162,  1839, -2709,  1972, 50662,  1824, -2709, -2709, -2709, -2709,
   36772,  1670, 34139, -2709, -2709, -2709, 19268,  2090,  1826, 48277,
   -2709, -2709, 14723, -2709, -2709,  2200,  2200,  6507,   957, -2709,
    2200, 14723, 14723,  2200,  2200, 14723, -2709, -2709, 29841, -2709,
   55912, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, 36292,
   49222,  1828, 42052, -2709, -2709, 42532, -2709,  1448, 23167, -2709,
   -2709,  1059, -2709, 23167,  2038, -2709, 23167, -2709, 42532,  1829,
   -2709, 42532, -2709, 10178, 14723,  1843,   914,  1843, -2709,  1823,
   -2709,   -60, -2709, -2709,  2177, 24607,  2168, 14723, -2709, -2709,
    1830,   875, -2709,  1993,  1739,  1832, -2709, -2709, -2709, -2709,
   -2709, -2709, 29945, -2709,    49, 14723, -2709,   246,  2078, -2709,
   -2709, -2709, -2709,  1739,   857, -2709, 42532,  2281,  2180, -2709,
   -2709, 34139, -2709, -2709,  1802,  1802, -2709, -2709,  2259, -2709,
   -2709, -2709, -2709,   843,   543, 28450, 42532, 42532,  1835, -2709,
   -2709,   -86,  2217,   968, -2709,   822,  1044, 42532,  2190, 38692,
    2305, 42532,  1593,  1844, -2709, -2709,   842,   842, -2709,  1988,
   -2709,  1990,   225, -2709, 42532, -2709, -2709, 24607, -2709,  3036,
   19268, 48277,   989, -2709, -2709,  2200,  2200,  2200, -2709,  2041,
   -2709, -2709,  1001,  2311, -2709, 42532,   -52,   -32,  1851,  1852,
   -2709, -2709,  1853, -2709, 14723,  1855, -2709, -2709, 23167,  1059,
    1003, -2709, 48277, 42532,  1030, 48277, -2709,  1856,   -90,  1857,
   -2709,  7653,  1849, -2709, -2709, -2709, -2709, -2709, -2709, 34139,
   34139, 50662,  2030, -2709,  2030, 10683,  1912, 42532, 14723, -2709,
    1032,  2286,   196,    -3, 34139, -2709, 42532, -2709, 35332, -2709,
     875,   -73,  1863, 14723, 30007,  2086, -2709, -2709,  2118, -2709,
    2185, -2709, 50662,  1929,   556,  1953, -2709, -2709, -2709, -2709,
    1058,   914,  1452,  1800,  1839,  1884, 42532,  1044,   414, -2709,
     822, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709,  2315,  2095,  2317,  1719,  1037,  3036,  1038,
   -2709,  2331,  1609,  1639, 36292,  1891, -2709,  1893, -2709, -2709,
   -2709, -2709, -2709, 50662,  1184, -2709, 34139, 42532, -2709, -2709,
   -2709, 42532,  2259,  1042, -2709, 14723,  1895, 14723, -2709, 17248,
    1885, -2709,  2353, 14723,  1955,  1955,  1044, -2709, 30072,  1548,
   24607, 50662, 50662, 50662, -2709,  2023,   857,   875,  1050, -2709,
    1913, -2709, -2709, -2709, -2709,  2874, -2709, 30190,  2132,   205,
    2120,  1863, -2709, 14723, -2709,  1977, -2709, -2709, -2709,  2371,
   -2709, -2709, 38692,  1915,  1839,  1593,  1800,  2121, -2709,  2127,
    1921,  1452, -2709, 14723,   591, -2709, -2709, 42532, -2709,  1052,
    1923,  1925, -2709, -2709, -2709,  1928, 17248,  1930, -2709, 50662,
    1933, 34139,  2069, -2709, -2709, -2709,  2286, -2709, -2709, -2709,
     290, -2709,   290, 27488,  2118, -2709, 35332, 28450,   752,   -73,
    2229, -2709, -2709, -2709, -2709,   105,  2148, -2709,  2152, -2709,
   34139, -2709,  1044, 38692, -2709, -2709, -2709, -2709, -2709, 24607,
    1548,  1482, 17753, 17753,  1941,  1056, -2709,  2437,  2107, -2709,
   -2709,  1951, -2709, -2709, -2709, 42052, 50662,  1534,  1534,  1548,
    2120, -2709, -2709, -2709, -2709, -2709,   561,   561,  2327, -2709,
    2014, -2709,  1839,  1065, -2709, 18763,  2097,   466, 33278, -2709,
   -2709, -2709, -2709, -2709,  1956,  1960, -2709, -2709, -2709,   290,
   -2709, -2709, -2709, -2709, -2709,  2428, -2709,   210, -2709, -2709,
   -2709,  1452,  2420, -2709, -2709, -2709, -2709, -2709, -2709,  2452,
    1534,   875, -2709, -2709, -2709,  1548, 18258,  1962, -2709, -2709,
   -2709, -2709
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
    1274,  1145,     0,  1028,  1027,  1145,     0,  1239,  1145,    68,
     965,     0,   792,     0,  1145,     0,  1274,     0,     0,     0,
       0,     0,     0,     0,     0,  1145,   142,     0,   791,  1145,
       0,     0,  1179,     0,     0,     0,     0,     0,     2,     4,
       5,     6,     7,     8,     9,    10,    11,    16,    12,    13,
      14,    15,    17,    18,    19,    20,    21,    22,   986,    23,
      24,    25,    26,     0,    27,    28,    29,    30,    31,   109,
      96,   147,   108,  1273,   248,   112,    32,    33,    34,    35,
      36,    37,   790,    38,  1144,  1143,  1137,     0,     0,     0,
       0,     0,  1138,   746,  1305,  1306,  1307,  1308,  1309,  1310,
    1311,  1312,  1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,
    1665,  1321,  1322,  1323,  1612,  1613,  1666,  1614,  1615,  1324,
    1325,  1326,  1327,  1328,  1329,  1330,  1331,  1616,  1617,  1332,
    1333,  1334,  1335,  1336,  1618,  1667,  1337,  1338,  1339,  1340,
    1341,  1342,  1668,  1343,  1344,  1345,  1346,  1347,  1348,  1349,
    1350,  1351,  1669,  1352,  1353,  1354,  1670,  1671,  1672,  1673,
    1674,  1355,  1356,  1357,  1358,  1359,  1360,  1361,  1619,  1620,
    1362,  1363,  1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,
    1372,  1373,  1374,  1375,  1376,  1377,  1378,  1379,  1380,  1381,
    1382,  1383,  1384,  1385,  1386,  1387,  1388,  1389,  1621,  1390,
    1391,  1392,  1393,  1394,  1622,  1395,  1396,  1397,  1623,  1398,
    1399,  1400,  1675,  1676,  1401,  1402,  1624,  1678,  1403,  1404,
    1625,  1626,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,
    1679,  1413,  1414,  1415,  1416,  1417,  1418,  1419,  1420,  1421,
    1422,  1423,  1680,  1627,  1424,  1425,  1426,  1427,  1428,  1628,
    1629,  1630,  1429,  1681,  1682,  1430,  1683,  1431,  1432,  1433,
    1434,  1435,  1436,  1437,  1684,  1438,  1685,  1439,  1440,  1441,
    1442,  1443,  1444,  1445,  1446,  1631,  1447,  1448,  1449,  1450,
    1451,  1452,  1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,
    1461,  1462,  1463,  1464,  1632,  1687,  1633,  1465,  1466,  1467,
    1634,  1468,  1469,  1688,  1470,  1635,  1471,  1636,  1472,  1473,
    1474,  1475,  1476,  1477,  1478,  1479,  1480,  1637,  1689,  1481,
    1690,  1638,  1482,  1483,  1484,  1485,  1486,  1487,  1488,  1489,
    1490,  1491,  1492,  1493,  1639,  1494,  1495,  1640,  1496,  1497,
    1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,
    1641,  1508,  1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,
    1517,  1518,  1519,  1520,  1521,  1522,  1523,  1524,  1525,  1526,
    1691,  1527,  1528,  1529,  1642,  1530,  1531,  1532,  1533,  1534,
    1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,  1543,  1544,
    1545,  1692,  1546,  1643,  1547,  1548,  1549,  1693,  1550,  1551,
    1644,  1552,  1553,  1554,  1555,  1556,  1557,  1558,  1559,  1560,
    1561,  1562,  1563,  1564,  1645,  1565,  1646,  1566,  1567,  1568,
    1569,  1695,  1570,  1571,  1572,  1573,  1574,  1647,  1648,  1575,
    1576,  1649,  1577,  1650,  1578,  1579,  1651,  1580,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,  1588,  1589,  1696,  1590,  1591,
    1592,  1593,  1594,  1652,  1653,  1595,  1697,  1596,  1597,  1598,
    1599,  1600,  1601,  1602,  1603,  1604,  1605,  1606,  1607,  1654,
    1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,
    1608,  1609,  1610,  1611,   747,   748,   756,    95,     0,     0,
     728,  1140,    67,     0,     0,     0,     0,     0,     0,     0,
     959,   958,     0,  1195,   964,     0,     0,   746,   750,   827,
    1624,  1631,  1496,  1645,   747,   825,   749,   726,     0,  1053,
    1054,     0,  1062,     0,  1046,  1051,  1047,     0,  1072,  1064,
    1073,  1065,  1045,  1066,  1055,  1044,     0,  1074,     0,  1049,
       0,     0,     0,  1141,   972,  1274,     0,   990,   991,   992,
     993,   994,   995,  1000,   996,   997,   998,   999,  1001,  1002,
    1003,  1004,  1005,   981,   986,  1006,  1007,  1008,  1009,  1010,
    1011,  1012,  1013,  1014,  1015,  1016,  1017,  1018,  1019,     0,
    1238,     0,     0,   745,  1241,  1243,  1244,  1240,   773,  1163,
      91,  1647,  1575,   793,    92,    89,    90,  1142,   141,   139,
       0,   696,  1403,  1441,  1534,  1545,  1647,  1215,  1219,     0,
    1139,  1652,   784,     0,   785,     0,   113,   289,   749,   720,
    1178,     0,  1183,     0,  1510,   117,   120,   765,   118,   109,
       0,     1,  1274,   985,  1303,     0,     0,     0,   138,   138,
       0,   138,     0,   101,   109,   104,   108,   249,   789,  1647,
    1575,   783,   786,  1411,     0,     0,  1411,     0,  1411,     0,
    1411,     0,     0,   688,     0,   689,   729,    85,    86,    42,
      84,     0,   930,   963,   962,   961,   960,   965,  1411,   976,
     760,     0,  1251,  1252,     0,     0,     0,     0,     0,  1190,
     828,   826,  1060,  1061,     0,  1052,  1048,  1050,     0,   757,
    1698,   343,  1699,   372,   350,   372,   372,  1700,  1701,  1702,
    1703,  1704,  1705,  1706,  1707,   339,   339,  1377,   352,  1708,
    1709,  1710,  1411,  1711,  1712,   340,   341,   377,  1713,  1714,
    1715,  1716,  1717,     0,     0,  1718,   372,  1719,   339,  1720,
    1721,   344,  1722,   311,  1723,     0,  1724,   342,   312,  1725,
     380,   380,  1726,  1727,   367,  1728,   758,   759,  1071,     0,
    1075,   325,   326,   327,   328,   353,   354,   329,   359,   360,
     364,   330,   412,   339,  1411,  1071,  1067,  1411,  1071,   722,
    1411,     0,     0,   968,   983,  1020,  1729,  1730,  1731,  1732,
    1733,  1734,  1736,  1735,  1737,  1738,  1739,  1740,  1741,  1742,
    1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,
    1753,  1754,  1755,  1756,  1757,  1758,  1759,  1762,  1760,  1761,
    1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,  1772,
    1773,  1774,  1775,  1777,  1776,  1778,  1779,  1780,  1781,  1782,
    1783,  1784,  1785,  1786,  1787,  1788,  1789,  1790,  1791,  1792,
    1793,  1794,  1795,  1796,  1797,  1798,  1799,  1800,  1801,  1802,
    1803,  1804,  1805,  1806,  1807,  1808,  1809,  1810,  1811,  1021,
    1022,  1034,     0,  1035,  1025,   989,  1274,    66,  1242,  1198,
       0,     0,     0,     0,    93,     0,     0,     0,   731,   733,
     734,   617,   744,   691,     0,  1613,  1614,  1615,   681,     0,
    1616,  1617,  1618,  1667,   545,   532,   541,   546,   533,   535,
     542,  1619,  1620,   482,  1621,  1622,   742,  1623,  1625,  1626,
    1628,  1629,  1630,   537,   539,  1632,  1633,     0,   743,  1635,
    1636,  1477,  1638,  1639,  1641,  1642,   543,  1644,  1646,  1647,
    1648,  1649,  1650,   741,  1651,   544,  1653,     0,     0,     0,
     709,   636,     0,     0,     0,   691,   516,     0,     0,   333,
     334,   355,   356,   335,   361,   362,   336,     0,   703,   413,
     561,   691,   528,   592,   457,     0,   514,   508,   699,   124,
     697,     0,   509,   730,   691,   682,   124,   695,  1218,  1216,
    1222,  1217,     0,     0,     0,     0,     0,   291,   290,   721,
    1177,  1175,  1176,  1174,  1173,  1180,     0,  1182,   986,   631,
     633,     0,   682,   119,     0,     0,     0,    99,    98,     3,
     765,     0,     0,     0,  1200,   136,   137,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   163,   164,   166,   230,
     234,   242,     0,   105,     0,   787,     0,     0,     0,  1160,
    1160,     0,     0,     0,     0,     0,  1131,  1080,  1124,     0,
       0,     0,     0,   808,   821,     0,     0,     0,     0,     0,
     818,     0,     0,   801,   795,   797,  1082,     0,  1160,     0,
    1078,     0,     0,     0,  1084,   746,     0,  1665,  1666,  1667,
    1668,  1669,   545,   532,   541,   546,   542,     0,  1675,  1676,
    1624,  1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,  1631,
    1687,  1688,  1689,  1690,  1691,   543,  1693,  1645,  1695,  1651,
     544,     0,  1697,     0,   520,   747,   753,   639,   147,   637,
     766,     0,   687,     0,   767,  1846,  1847,  1848,  1849,  1850,
    1851,  1852,  1853,  1854,  1855,  1856,  1857,  1858,  1859,  1860,
    1861,  1862,  1863,  1864,  1865,  1866,  1867,  1868,  1869,  1870,
    1871,  1872,  1873,  1874,  1875,  1876,  1877,  1878,  1879,  1880,
    1881,  1882,  1883,  1884,  1885,  1886,  1887,  1888,  1889,  1890,
    1891,  1892,  1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,
    1901,  1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,  1910,
    1911,  1912,  1798,  1913,  1914,  1915,  1916,  1917,   769,   768,
     770,   684,   727,   690,     0,     0,    64,     0,     0,   973,
       0,   761,     0,     0,  1411,  1248,  1411,     0,   930,   930,
       0,  1189,  1192,  1063,  1059,  1057,  1056,  1058,   371,   358,
     366,   365,   636,   348,   347,   346,     0,   345,     0,     0,
     372,   372,   370,   349,   325,     0,     0,     0,   376,     0,
     374,  1069,  1070,     0,  1042,     0,   319,   315,     0,   385,
     386,   387,   388,   395,   396,   393,   394,   389,   390,   383,
     384,   391,   392,   381,   382,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   331,   337,     0,     0,  1037,     0,
       0,  1039,     0,     0,     0,  1274,     0,   802,  1030,  1031,
    1029,     0,     0,   988,   805,  1033,  1023,  1032,   987,   822,
    1024,   982,     0,  1197,    55,  1228,  1227,  1236,   774,     0,
     642,     0,  1274,    94,   794,     0,   512,   636,   481,   680,
       0,     0,     0,     0,     0,     0,   518,   645,     0,     0,
     437,     0,     0,     0,   660,     0,   666,     0,     0,     0,
     438,   417,   418,     0,   708,   717,   635,     0,   516,   631,
       0,   595,   597,     0,     0,   510,   511,   517,     0,   737,
       0,   412,   412,   702,   617,     0,   610,     0,     0,   614,
     615,   616,     0,     0,     0,   694,     0,   625,   627,     0,
       0,   453,   623,     0,   456,     0,     0,     0,     0,   611,
     612,   613,   604,   605,   606,   607,   608,   609,   621,   603,
     434,     0,     0,   564,   515,     0,   433,   700,     0,   251,
       0,   735,   732,     0,   683,   251,  1230,  1234,  1235,  1233,
       0,  1229,  1221,  1220,  1225,  1223,  1226,  1224,     0,  1171,
       0,  1168,   634,   246,   121,   724,     0,     0,  1304,  1206,
       0,  1268,     0,     0,  1201,   116,   115,   157,   157,   148,
     151,   157,   114,   205,   206,     0,     0,     0,     0,   239,
     237,   731,   744,   193,   167,   192,     0,     0,   171,     0,
     197,   413,   232,   103,   161,   162,   165,   102,     0,   235,
       0,   245,   233,   166,     0,   788,     0,     0,     0,     0,
       0,  1411,     0,     0,  1115,  1096,   882,   314,  1159,     0,
       0,     0,     0,     0,     0,     0,  1123,  1120,  1121,  1122,
       0,     0,     0,     0,   806,   807,   820,     0,   811,   812,
     809,   813,   814,     0,     0,   799,   800,     0,     0,     0,
       0,   798,     0,     0,     0,     0,     0,     0,     0,     0,
     147,   147,   147,   526,     0,   145,   146,     0,     0,   685,
     688,    54,   938,     0,   928,     0,     0,     0,     0,     0,
       0,   965,   977,   975,   979,   978,   980,   762,     0,  1077,
       0,     0,  1247,  1245,     0,     0,   927,   901,  1194,     0,
       0,  1411,  1191,     0,   917,     0,     0,     0,  1071,     0,
     369,   368,   320,   316,     0,     0,     0,     0,  1076,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1071,
    1068,  1071,   723,     0,  1071,   971,   984,  1026,   803,   823,
     804,   824,    87,     0,    61,    69,    74,    52,     0,    52,
       0,    71,    75,    52,    70,    52,    65,     0,   775,     0,
    1162,     0,  1167,  1165,  1161,  1164,  1166,     0,   692,     0,
       0,   679,   675,     0,     0,     0,     0,     0,   646,   647,
     648,   649,   650,   651,   652,   653,   654,     0,     0,   655,
       0,     0,     0,   602,   610,   614,   615,   616,   611,   612,
     613,   604,   605,   606,   607,   608,   609,   629,     0,     0,
       0,     0,     0,     0,     0,     0,   484,     0,     0,   591,
       0,   631,   665,     0,     0,     0,     0,     0,     0,   631,
     671,     0,     0,     0,   707,     0,   704,   459,   691,     0,
     598,   458,     0,     0,     0,   739,   740,   414,   425,   460,
     461,   429,   430,   431,   435,   772,   771,   701,     0,   693,
       0,     0,   415,   439,   444,     0,   672,   477,     0,   465,
       0,   452,     0,   463,   467,   440,   455,     0,   436,     0,
     694,   626,   628,     0,   624,     0,   426,   427,   428,   419,
     420,   421,   422,   423,   424,   432,   601,   599,   600,     0,
       0,     0,   566,     0,     0,   462,   698,  1403,  1441,     0,
     135,   135,   135,   123,   133,     0,   303,   147,   709,   303,
       0,   412,   292,   765,  1181,  1170,  1169,   632,   725,   764,
    1274,     0,  1204,     0,     0,     0,  1280,  1263,     0,     0,
    1296,  1298,   251,     0,   691,  1202,   155,   156,   160,   160,
       0,     0,   160,  1642,  1530,     0,     0,     0,     0,   198,
     240,     0,   231,   195,   196,     0,   194,   731,   199,   730,
     200,   203,   204,   172,   241,   718,   243,     0,   236,   107,
     106,   247,     0,  1081,     0,  1411,  1098,     0,     0,     0,
       0,     0,     0,   832,     0,   932,   832,  1136,  1411,  1071,
    1411,  1071,  1309,  1378,  1546,     0,  1094,  1127,     0,   906,
    1153,     0,   891,   935,  1117,  1132,  1146,     0,     0,   796,
    1083,   810,   815,  1149,   819,   816,  1257,   817,  1160,     0,
    1079,     0,  1147,     0,  1255,     0,     0,  1085,  1151,  1259,
     145,   145,   145,     0,   638,     0,     0,     0,   640,   641,
     687,     0,    53,     0,   929,     0,    63,    43,    44,    54,
       0,     0,   930,   930,   976,     0,     0,   763,     0,     0,
       0,     0,   781,     0,   920,   918,   951,     0,   925,   919,
     314,     0,     0,   877,     0,     0,  1253,     0,     0,     0,
       0,     0,   338,   351,  1043,   325,     0,   379,   378,   380,
     380,   325,     0,   309,     0,   323,     0,   363,   332,   405,
     406,   407,   408,   409,   410,   411,  1036,  1038,     0,  1040,
      56,     0,    59,     0,    58,    62,    57,    51,     0,    82,
       0,     0,     0,     0,     0,     0,  1237,   643,   140,   483,
       0,     0,   676,     0,     0,   559,     0,   534,   536,   549,
       0,   538,   540,     0,   618,     0,     0,     0,   550,   486,
     487,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   503,
     502,   551,   590,     0,     0,   663,   664,     0,   552,     0,
       0,   670,     0,     0,     0,   557,     0,     0,     0,     0,
     716,   513,   632,   596,   594,   519,   412,     0,     0,     0,
       0,     0,     0,     0,   466,   454,     0,   464,   468,     0,
       0,     0,   448,     0,     0,   446,   478,   442,     0,     0,
     479,     0,     0,   565,   574,   135,   135,   135,   135,   132,
     134,     0,     0,     0,     0,  1530,     0,   275,     0,   254,
     250,   252,   262,   275,   280,   529,   301,   530,   749,     0,
     210,   145,   717,   210,     0,  1231,  1172,     0,  1205,     0,
    1285,  1267,  1287,  1286,     0,  1294,     0,   691,     0,  1285,
    1269,     0,  1288,  1299,  1204,     0,  1302,     0,   149,   150,
     152,     0,   619,   160,   154,   202,   201,     0,   170,   238,
     168,     0,   244,     0,     0,     0,   881,     0,     0,     0,
     832,     0,   940,     0,   947,     0,     0,   932,   913,  1116,
       0,     0,     0,  1090,  1135,  1108,  1100,  1086,  1114,     0,
       0,  1119,     0,  1112,  1129,  1130,  1128,  1133,     0,   867,
     842,   878,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   147,   143,
     144,   521,   686,   801,   939,     0,     0,     0,   927,  1194,
     974,   965,     0,     0,  1248,     0,   930,   972,     0,   776,
     905,   901,   926,   899,   898,   900,     0,   782,  1193,     0,
    1254,     0,  1250,     0,  1188,   357,   322,     0,   375,   373,
     321,     0,   317,   324,  1071,    88,     0,    47,    83,    72,
      77,     0,    81,    79,    78,    73,    76,     0,   678,   674,
       0,   531,   644,     0,   630,   658,   657,   485,   494,   498,
     499,   500,   659,     0,     0,     0,   495,   496,   497,   488,
     489,   490,   491,   492,   493,   501,   668,   667,   661,   662,
       0,   554,   555,   556,   669,     0,   706,   631,   711,   713,
       0,     0,   593,   738,   416,     0,     0,   445,   673,   469,
       0,     0,     0,   441,   618,     0,     0,     0,     0,     0,
     450,     0,     0,     0,     0,     0,   527,     0,     0,     0,
       0,   126,   125,   131,   275,   280,     0,   109,   112,     0,
     262,     0,   274,   189,   273,   189,   255,     0,   286,   284,
       0,   286,     0,   286,     0,   189,     0,   276,   189,   273,
       0,   293,   721,   302,     0,   227,     0,   705,   227,     0,
     122,  1203,     0,  1199,     0,     0,     0,  1275,  1272,  1262,
       0,     0,  1297,  1285,  1276,   158,   159,     0,   153,   169,
     719,  1154,   832,     0,     0,  1097,     0,   949,   893,   941,
     924,   908,     0,     0,     0,   833,     0,   966,     0,     0,
     914,     0,     0,     0,     0,   894,     0,     0,   853,     0,
       0,   924,     0,   931,   849,   850,     0,  1089,  1109,     0,
    1105,     0,  1134,     0,     0,     0,     0,     0,  1092,  1104,
       0,  1087,     0,  1071,  1071,  1095,   892,   757,  1698,  1699,
    1700,  1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,
    1824,  1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,  1833,
    1718,   839,  1719,  1477,  1720,  1721,  1722,  1723,     0,  1724,
     312,  1725,  1726,  1727,  1728,   604,   605,   837,   758,   835,
     934,   834,   942,   836,   838,     0,   937,  1150,  1258,     0,
    1148,     0,  1256,  1157,  1155,  1152,  1260,   524,   525,   522,
     145,    66,    46,     0,   781,     0,     0,     0,  1411,     0,
    1194,  1246,     0,   927,   781,   779,     0,   957,   877,   952,
       0,  1214,  1249,     0,     0,     0,   318,   310,  1041,    60,
       0,    80,   677,   547,   558,   656,     0,     0,     0,     0,
     553,   548,   714,   715,   710,   475,   473,   470,     0,   471,
     449,     0,     0,   447,   443,     0,   480,   560,     0,   563,
     577,   572,   573,   130,   129,   128,   127,   261,   259,     0,
     264,   271,   182,   188,   260,     0,   258,   253,     0,   285,
     281,     0,   282,     0,     0,   283,     0,   256,     0,   271,
     257,     0,   300,     0,     0,   568,   521,   568,  1232,  1284,
    1264,     0,  1265,  1295,     0,     0,     0,     0,  1289,  1261,
       0,   945,  1099,     0,   924,     0,   832,   910,   909,   912,
     907,   911,     0,   967,     0,     0,   851,     0,   858,   896,
     897,   895,   852,   924,   930,   854,     0,     0,     0,  1101,
    1091,  1088,  1093,  1102,     0,     0,  1103,  1106,   308,  1118,
    1111,  1833,  1841,     0,     0,     0,     0,     0,     0,    41,
      49,   801,     0,     0,   778,   901,     0,     0,     0,   927,
       0,     0,   781,     0,   969,   780,     0,     0,   829,     0,
     874,     0,     0,  1207,     0,  1187,  1186,     0,    48,   504,
       0,     0,     0,   712,   472,   476,   474,   451,   562,   579,
     576,   296,     0,   299,   263,     0,     0,   177,   184,     0,
     187,   181,     0,   265,     0,     0,   267,   269,     0,     0,
       0,   304,     0,     0,     0,   726,   208,  1353,  1625,  1529,
     209,     0,   213,   207,   211,   216,   218,   217,   219,   215,
     226,     0,   229,   736,   229,     0,     0,     0,     0,  1300,
       0,  1291,  1291,     0,  1277,   620,     0,   832,     0,   923,
     946,   863,   841,     0,     0,     0,   848,   855,   956,   857,
       0,  1110,     0,  1126,     0,     0,   936,  1158,  1156,   523,
      66,     0,  1194,   877,  1214,     0,     0,     0,   972,   777,
     901,   890,   883,   884,   885,   886,   887,   888,   889,   904,
     903,   875,   876,     0,     0,     0,  1188,     0,   505,     0,
     506,     0,   147,   301,     0,     0,   295,     0,   175,   173,
     176,   178,   174,     0,     0,   272,   288,     0,   268,   266,
     277,     0,   308,     0,   279,     0,     0,     0,   220,   214,
     567,   569,     0,     0,   180,   180,     0,  1271,     0,   303,
       0,     0,  1293,  1293,  1279,     0,   930,   948,     0,   915,
     922,   861,   860,   862,   866,     0,   864,     0,   880,     0,
     873,   841,   307,     0,  1113,     0,   943,    40,    45,     0,
     831,  1208,   927,     0,  1214,   781,   877,     0,  1211,     0,
       0,  1194,   507,     0,   582,   294,   297,     0,   270,     0,
       0,     0,   305,   306,   278,     0,     0,     0,   212,     0,
       0,   228,     0,   111,   110,  1266,  1291,  1270,  1301,  1290,
     157,  1292,   157,     0,   956,   902,     0,     0,     0,   863,
       0,   856,   953,   954,   955,     0,   869,   859,   870,  1107,
    1125,   944,     0,   927,  1209,   970,   830,  1212,  1213,     0,
     303,   578,     0,     0,     0,     0,   185,     0,   191,   287,
     222,     0,   221,   570,   571,   182,  1293,   160,   160,   303,
     873,   916,   921,   840,   865,   879,     0,     0,     0,   871,
       0,   872,  1214,     0,  1184,  1612,  1354,  1582,     0,   580,
     583,   581,   575,   298,     0,     0,   183,   223,   179,   157,
    1282,  1281,  1278,   832,   845,     0,   844,     0,   933,   868,
    1210,  1194,     0,   587,   586,   585,   589,   588,   186,     0,
     160,   950,   843,   847,   846,   303,     0,     0,  1283,  1185,
     584,   190
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2709, -2709, -2709,  1831,    81,    83,  -654, -1046,  -855, -1065,
   -2709,   -30,    85, -2709, -2709,   244, -2709,   933, -2709,   229,
    -595,   573, -2709,  1020,    -6, -2709, -2709, -2709,  -524, -2709,
   -2173,    86,    87,    89, -2709, -2709, -2709, -2709,  -294,   513,
   -2324, -2709,   452, -2709, -2709, -2709, -2709,  -125, -1736, -2709,
       4, -1843, -2486,  -465, -2709,  -567, -2709,  -216, -2709,  -517,
   -2709,  -482,  -525,  -555, -2463,  -998, -2709,  1440,  -256, -2709,
     602, -2709, -2190, -2709, -2709,   590, -2709, -1013, -2709, -1908,
     212,  -501, -2220, -2194, -1852,  -655,   280,  -507,   258, -1812,
    -770, -2709,   615, -2709,  -491, -2709,  -648, -1654,    97, -2339,
   -1414,    99, -2709, -2709,   100,   540, -2709,    10,   235,   101,
     102,    28,  1491,   327, -2709,   106, -2709, -2709,  1220,  -738,
   -2709,  1265,   109, -2187, -2709,  -454, -2709,  -480,  -478, -2709,
   -2709,     5,  -839,  1208, -2709, -2709, -2709,    13, -2709,  -361,
   -2709, -2709, -2208, -2709,    31, -2709, -2709, -2709, -2709,    82,
     334, -2709,  -401, -1935,  -150, -2709, -2521, -2621, -2709, -2709,
    -471, -2507, -1760,   111,    71,   112,   119, -2709,   694,   120,
    -996,     2,   675,   -13,   -21,   -16,    33,    53,  1509,  1539,
   -2709,  -897,   934, -2709, -2709, -1806,  -634,   -56, -2709,   676,
   -1420, -1810,  -511,  1025,  1496,  1498,  -364,  -384, -2709,  -500,
   -2709, -1379, -2709, -2709,   671,  1062, -1286, -1323, -2709,   376,
   -2709,  -436,  -368, -2709, -2709, -2709, -2709, -2709,   115,  -272,
    -496,  1043, -2709,  1511, -2709, -2709, -2709, -2709, -1759, -1321,
   -2709,   713, -2042,   400, -2041, -1893,   159,   135,  -826,  -241,
      27,   408,  -331, -2709, -2709,  -327, -1773, -2412,  -344,  -343,
   -2709, -2709, -2709,  -513, -1185,  -726, -2709, -2709,  -463,  2085,
   -2709, -2709, -2709,  2089,  2482, -2709, -2709,  2749,  2860, -2709,
    -610,  3172,   652,  -710,  1211, -1110,  1214, -1096,  -831, -1055,
    1215,  1216, -1304,  3326, -1619,  -989,     6, -2709, -2411, -1583,
   -2709, -2709, -2709,  -107, -2709,  -412, -2709,  -406, -2709, -2709,
   -2709,  -448, -2708, -2709,  1155,   838, -2709, -2709, -2709, -1308,
   -2709,  4132,   732, -2709, -1702,  -936,  -615,  -909,  -808, -1061,
   -1190, -2709, -2709, -2709, -2709, -2709, -2709, -1127, -1813,  -466,
     802, -2709, -2709,   911, -2709, -2709, -2709,  -640,  1017,  -580,
    -908,   808, -2709,   161,  1991, -1397, -2709,   771, -1993, -2709,
   -2709,   428, -2709,  2223,  -470,  -991,  1513, -1041,    12, -2709,
    3869,   -14,  1652,   889, -2176, -2709, -2709,  -497, -2301,  -970,
   -2709,  -663, -2709,   122,  1301,    34,   123,  1141, -2709, -2709,
   -2709,   124, -2709, -2709,   127,   503, -2709,   939, -2709,   705,
     128, -2709,   910,    14, -2611
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    37,    38,    39,   547,   548,  1592,  1547,  1325,  1075,
    1537,  1314,   549,  2225,  2226,  2227,  1905,  1056,  2944,  1906,
    1057,  1058,  2229,    43,   514,   485,   486,   757,  1209,  1126,
    1210,   550,   551,   552,  1959,  2731,  2306,  2732,  2028,  1953,
    1323,  2025,  1642,  1576,  1324,   495,  1656,  2307,   669,  1643,
     553,  2214,  2550,  2936,  2239,  3078,  2483,  2484,  2933,  2934,
    2217,  1907,  3006,  3007,  2287,  1529,  3001,  1974,  2869,  1911,
    1893,  2485,  1983,  2829,  2587,  1908,  2465,  1975,  2928,  1602,
    1976,  2929,  2686,  1977,  1572,  1597,  2218,  3008,  1912,  1573,
    2213,  2551,  1516,  1978,  2940,  1979,   505,  2469,   554,  2279,
    1227,   555,   688,  1600,   556,  1219,  1583,   557,  1593,   558,
     559,   560,  1023,  2170,  1832,   561,   540,   541,   775,  1264,
     542,   758,   562,   783,    57,   634,  1315,   563,  1316,  1317,
     872,    58,  1326,   874,   875,    59,    60,   565,  2755,  2595,
    1232,  1603,  1985,   506,   566,  1836,  1460,  2676,    63,  2175,
    1840,  2179,  2819,  2433,  2174,  2181,  2922,  2990,  2176,  1841,
    1842,  2820,  1843,   567,   584,   568,   569,   883,  1664,   570,
    1520,   571,   956,    70,    71,    72,   613,   625,   626,  1429,
    1813,  2141,  1027,   600,   601,  1947,   642,  1566,  1469,  1470,
    1848,  2188,  1496,  1497,  1036,  1037,  2778,  2983,  2779,  2780,
    2643,  2644,  3066,  1484,  1488,  1489,  1868,  1858,  1475,  2425,
    2802,  2803,  2804,  2805,  2806,  2807,  2808,   957,  2665,  2914,
    1492,  1493,  1039,  1040,  1041,  1501,  1878,    74,    75,  1816,
    2149,  2150,  2151,  2152,  2402,  2403,  2418,  2414,  2650,  2786,
    2153,  2154,  2771,  2772,  2886,  2421,  2160,  2790,  2791,  2843,
    1619,   759,  1894,  1330,  1267,   761,   958,   762,  1243,   959,
    1247,   764,   960,   961,   962,   767,   963,   964,   965,   770,
    1239,   966,   967,  1258,  1286,  1287,  1288,  1289,  1290,  1291,
    1292,  1293,  1294,  1009,  1715,   969,   970,   971,  2156,   972,
    1423,  1802,  2134,  2812,  2910,  2911,  2386,  2631,  2769,  2882,
    3024,  3059,  3060,   973,   974,  1371,  1372,  1373,  1799,  1418,
    1419,   975,  2553,  1421,  1708,  1010,  1730,  1367,  1128,  1129,
    1331,  1687,  1688,  1711,  2057,  1718,  1723,  2085,  2086,  1731,
    1767,   976,  1671,  1672,  2043,  1340,   977,   665,  1133,   666,
    1336,  1761,   986,   978,   979,   980,  1364,  1365,  2100,  2359,
    2360,  1736,  1874,   617,  1455,  2782,   779,  1211,   981,   982,
     983,   984,  1012,   619,  1130,   490,   773,  2991,  1221,  1016,
    1131,  1909,  1757,   572,    86,   573,   574,  1005,   622,  1006,
    1008,   575,   594,   595,   576,   607,   608,  1327,  1442,  1328,
     577,    82,   609,   578,  2753
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     484,  1212,    68,  1074,    47,   681,   585,   585,  1011,  1551,
      51,  1042,   487,    61,    83,   643,  1370,  1216,   488,  1254,
    1313,   564,   870,   630,  1456,   760,  1213,  1550,    54,  1217,
    1806,    62,   612,    73,    77,  1515,  1318,  1298,   999,  2189,
    1301,  1260,  2194,   776,  1707,  1491,  2163,  1376,  1849,    73,
    1458,  1852,   645,  2219,  1522,  1526,  2148,   646,   616,  1609,
    1562,  2576,  1076,  1424,  1080,   784,  1084,  2555,   871,  1613,
    2549,   778,  2148,  1329,  2575,  2121,  1432,  1745,  1746,  2182,
    2212,    40,  1555,    41,   651,    42,    44,    45,   628,    46,
    2584,  2588,   587,  2059,  2060,  1240,  1241,    48,  2080,    49,
      50,    52,    53,  2264,  2399,  2358,    55,  2405,  -729,    56,
     876,    64,    65,  2417,  1819,   492,   892,   659,  -754,    66,
      67,  -380,    76,    78,    79,  2748,  1252,    80,    81,  2062,
     -97,  1035,  1261,  2063,  2255,  2256,  2257,  1439,  1261,  -754,
    1000,  2108,  2109, -1670, -1677,  -380,  1038,  -751,  -751, -1671,
    1261, -1817, -1817,   583, -1672,  -377,  2273, -1818, -1818,  -377,
   -1673,   583, -1819, -1819,  1961,   892,  1873,  1304, -1820, -1820,
       3,     4,   993, -1674,  -100, -1677, -1843, -1843, -1686,  1587,
     620, -1821, -1821, -1824, -1824, -1692, -1833, -1833,  1971, -1694,
   -1686, -1696, -1694, -1839, -1839,  -755,  -755, -1841, -1841, -1844,
   -1844,  1870,  1261,  -752,  -752,  -372, -1670,  1535, -1671, -1672,
    1538,  1539, -1673, -1674,  -339,  2690,  -352,  2263, -1692,  2041,
    2312,  2314, -1696,  1759,  1759,   -97,  -602,  3046,  2773,  1518,
    1260,  -367,  2157,  -602,   493,  2734,   635,  1680,  2832,  2846,
    1553,   -50,  1385,  2951,  2439,  2744,  1386,  2729,  2157,  2794,
    2877,  1682,  2283,  1244,  2724,   583,  1518,  2888,   640,  1048,
    2415,  2705,  2674,   694,  2821,  1049,  1796,  2247,   583,  -100,
    2924,  2921,  2348,  1797,  1394,  1253,  2585,  2890,  1560,  1436,
    1307,   583,  1307,  1527,  2749,   892,  2873,   892,  2906,  1561,
    1240,  1241,  1684,  1780,  2874,    26,  1385, -1814, -1814,  2750,
    1386,  2923,  2992,  2458,   892,  1876,  1396,  1001,  1507,  1002,
    1295,  -622,  1577,    84,   684,  2471,  1252,  -801,  -622,  1577,
    1473,   598,  -801,  2931,   636,   640,  2891,  3093,  1394,  1846,
    2062,  1957,    31,  1606,  2063,  1534,  1366,   580,  2687,  2701,
    1540,  2699,   638,  3014,  1945,  2172,  2821,  3082,  2215,  1031,
     685,   870,   579,  2324,  2417,  2426,   870,  2405,    85,  1213,
    1396,   582,  2723,  2474,  2647,  1716,  1385,  2457,  2651,  -313,
    1386,  1050,  2740,    33,  2223,  1545,  1377,  3002,  1803,  2243,
    2173,  2903,  2932,  2448,  1578,  2593,  2272,  2398,  3100,  2743,
    2950,  2737,  2244,  1437,   623,  2212,  1321,  2212,  1394,  1546,
    2607,  1549,  2500,  2859,  2062,  1434,    26,  1510,  2063,  -224,
     639,  2688,  1877,   631,  2700,  3069,  1847,   -97,   994,  1781,
    1722,  1262,  2844,  1033,   599,    36,  1474,  1262,  1669,  1504,
    1396,  1579,  1434,   687,   632,  1782,  2925,  2586,  1579,  1262,
    1783,  3080,  2889,    31,  2328,  2329,  2330,  2331,  2332,  1244,
    1343,  2336,  2337,  2338,  2339,  2340,  2341,  2342,  2343,  2344,
    2345,  -100,  2892,  2875,  2827,  3036,  1525,  1253,  1564,  1707,
     870,   870,  1034,  2773,  2675,  1234,  1528,  1784,   581,   670,
     -97,  2751,  1541,  2837,    33,  2216,  1859,  3094,   640,   995,
    1542,  1262,   727,  3016,  1565,  1886,   671,  2702,    34,  2601,
    1946,  2637,   886,  1944,  2376,  2377,  -313,   621,  2679,  2821,
    3003,  3042,  3053,  2605,  1438,  2009,  1683,  2165,  2835,  1235,
    1804,  2184,    35,  2478,  -100,  1051,  2947,  1551,   633,  2572,
    2010,  1502,   756,   630,  2197,  1659,    36,  1670,  1525,  2691,
     869,   667,   668,  2192,  3047,  2853,  1503,  1967,  2833,  2555,
    2608,   873,  2549,   637,  1451,  3025,  2275,  1212,  2730,  1512,
     695,  2157,   494,  2157,  2333,   877,  2479,   585,   879,  1554,
    1870,  2012,  2014,  2015,  1598,  1263,  1052,  1958,    73,  1255,
    1053,  1297,  2480,  -602,  1760,  2123,   689,  3004,  1003,  1043,
     990,   -97,   645,  1300,   484,   484,  2248,   646,  1944,  2774,
     663,  1256,  -729,  1255,   664,  2005,  2783,  2264,  2821,  2681,
    1054,  2787,  -754,  2078,  2789,  1257,  3015,   484,  1337,  2763,
      36,  3074,  1817,  1798,  1785,  1256,  1004,  1366,   641,  2467,
     -97,  3084,   -97,  -754,    68,  -100,    47, -1670, -1677,  1259,
    1610,  1611,    51, -1671,  2949,    61,    83,  2148, -1672,  -377,
    1238,  2148,   878,  2468, -1673,  1380,  1125,   484,  1208,  1644,
      54,   647,  1359,    62,  1024,    73,    77, -1674,  -622, -1677,
    2956,  2955, -1686,  1513,  -100,    69,  -100,  1013,  1055, -1692,
    2481,  2678,  1921, -1694, -1686, -1696, -1694,  2482,   662,  -755,
    -755,    69,  1924,   663,  1236,  1927,  1668,   664,   677,  -372,
   -1670,  2487, -1671, -1672,  2334,    69, -1673, -1674,  1242,  1589,
    1246,   629, -1692,    40,  2335,    41, -1696,    42,    44,    45,
    1667,    46,  1366,  1716,  1716,  -367,  1417,  1674,  1716,    48,
    1756,    49,    50,    52,    53,   760,  1668,  1213,    55,   756,
    1720,    56,  2097,    64,    65,  2680,  2898,  1707,   644,  1430,
    1618,    66,    67,  3020,    76,    78,    79,    69,  2575,    80,
      81,  2733,  1820,  1743,  2728,   496,  1311,  1312,  1311,  1312,
    1212,  1716,  1716,  2488,  1545,  1527,   484,  1414,  1415,  1416,
    1417,  3085,   870,  1833,  1668,  2714,  2715,  2445,  1377,  2024,
    1061,  1987,  1668,  2220,  1213,  2011,  2013,   692,  1546,   776,
    1630,  1237,  2363,  -801,  -801,  2026,  1634,  1277,  1278,  1062,
    2296,  2075,  2076,  2077,  2078,   696,  2300,  1476,  2746,  2743,
    1891,  2555,  1891,  2157,  2549,  1636,   497,  2157,   871,  1631,
    2101,  3075,  2707,   693,  1031,  1048,  1048,  1271,  1272,   698,
    2712,  1049,  1049,  2830,  2741,  1412,  1413,  1414,  1415,  1416,
    1417,  1048,  2446,  2166,  1551,  2698,  2489,  1049,  1048,  1048,
    1063,  1320,  1913,  1477,  1049,  1049,  1320,  2747,  1370,   869,
    1994,  2861,  1747,  3095,   869,  1125,   756,   663,  1892,  1919,
    2209,   664,  2258,  2073,  2074,  2075,  2076,  2077,  2078,  2148,
    1031,  2016,   484,  2017,  2148,  1032,  2019,  2148,   697,  1762,
     517,  1385,  1025,  1527,   517,  2221,  1277,  1278,  1033,    73,
    3076,  1883,   517,   782,  2142,  2143,  1527,  1281,  1282,   583,
    3022,   484,  2862,   517,   517,  1212,  1940,  1941,  1942,  2372,
    2326,  2863,  2249,  1966,   596,  2192,  2186,  3077,  1920,   630,
     614,   484,   484,   484,  1379,   484,   484,  1050,  1050,  3023,
     880,  1064,  1048,  1382,   673,  1476,   674,  1930,  1049,  2349,
    2864,   881,  1937,  1050,  1033,  1396,  1834,  1431,  1528,   484,
    1050,  1050,  1479,  1255,  1638,   882,  2113,   517,  1441,   892,
    1320,  1320,  1518,  2284,  2927,   885,  2288,  2759,   869,   869,
    1991,  2031,   652,  1519,  2461,  1256,  2032,  1518,   500,   884,
     501,  1477,  1065,  2114,  1895,  1026,  1465,  1466,  1521,  1472,
    1066,   646,   646,  1034,   646,   886,  1281,  1282,  1255,  1527,
    1527,  1556,  1067,   484,   887,   504,  2646,   484,   484,  2148,
    1525,  2865,  1480,   998,  1559,    26,  2657,  2845,   484,  2660,
    1256,   992,  1527,  2866,  1588,    87,  1922,  2033,  1024,  1305,
    2945,  1925,  1306,  1068,  1257,   756,  2157,  1588,  1640,  1051,
    1014,  1478,    26,   892,  1050,  2157,  1385,   663,  1007,  2408,
    2157,  1433,    31,  2157,  1716,  1716,  1716,  1716,  1716,  2462,
    1125,  1716,  1716,  1716,  1716,  1716,  1716,  1716,  1716,  1716,
    1716,  1125,  2157,  1250,  1251,   682,  1528,  2671,  1394,    31,
    1070,  1051,  1051,  2409,  1552,   988,   989,  2003,   991,  1528,
    1479,  2091,  1015,    33,  2222,  1125,  2223,  1051,  1017,  2653,
     870,  2115,  1071,  -146,  1051,  1051,  2116,    34,  -146,  2411,
    1396,  2195,  1018,   870,  1716,  1716,   892,  2246,  2250,  1707,
      33,  2878,  1073,  1021,  2224,  2463,  2987,  2464,  2037,  1022,
    2111,    35,  1078,  1082,    34,  2407,  1053,  1053,  1525,  2498,
    2254,  2231,  1370,  2233,  1029,  1835,    26,   683,  1882,    69,
    1480,  1525,  1053,  1768,  2157,  1928,  1935,  2491,    35,  1053,
    1053,  2618,  1449,  2161,  2308,  1450,  1079,  1083,  2776,  1255,
     772,  1044,    36,  2777,   663,  2455,  -729,  -146,   664,   496,
    1769,  1658,  1054,    31,  1659,  2157,   675,    88,   676,  1929,
    1936,  1256,  1528,  1528,  1208,    89,   756,  2571,  1051,  1046,
      69,   629, -1196,  1582,  2490,  1259,  2499,  3070,  3071,  1584,
    3091,  2408,  1585,  1586,  2867,  1528,   484,  2868,  2387,  2388,
    2389,  2390,   756,   756,    33,  1660,  -146,  3054,  1661,  1045,
    2413,    90,  3043,  -109,  1055,  1055,   684,   756,    34,  2090,
     497,  2092,  2093,   496,  1047,  2409,  3072,  -109,  2117,  2437,
    1055,  1059,  -109,  1053,  1525,  1525,  1060,  1055,  1055,  2118,
    3098,  2410,    35,  1981,  1954,  1982, -1196,  1955,   644,  2298,
    2299,  2411,   685,  2135,  1077,  2136,    36,  1525,    91,  1995,
     869,  2157,  1661,  1054, -1812, -1812,    92,    69,  2269,   491,
    2137,   873,  2138,  1770,  1965,   543,  1208,  2001,  1771,  1081,
    2002,  -109,  3099,  1772,   497,  2412,   597,  1214,   686,   484,
     610,   484,  1218,  1689,  1665,   484,   484,  2157,    73,  2020,
    2237,  -109,  2021,  2238,  1220,   484,  2784,   484,   484,   484,
     484,   484,   484,   484,  2241,  2030,  1215,  2242,  1644,  2034,
    1662,  2035,  1222,  1663,  2290,    73,  1666,  1659, -1813, -1813,
    2435,  1055,   484,  2436,   484,   687, -1815, -1815,   498,   756,
     484,   484,   484,   484,   484,   484,   484,  1208,  2547,  1223,
    -109,   484,   484, -1816, -1816,  2440,   484,   772,  2441,  -109,
     484,   517,  1231,   484,   484,   484,   484,   484,   484,   484,
     484,   484,  2413,    26,   484, -1822, -1822,  2192,  1806,  2762,
    2234,   484,  2236,  1233,  1125,  2580,  1821,  1208,  1955,  1238,
     517,   517,   500,  1245,   501,  2498,  2157,  2454,  2599,  2456,
    2682,  2600,  1384,  1266,  2619,  1385,   484,  1661,   499,  1386,
      31,  1242, -1846, -1846, -1846,  1004,   503,  2764,  1246,   504,
    1661,  1668,  1837,   891,  1248,  1773,  2062,  1895,  2852,   484,
    2063,  1955,  1249, -1846, -1846, -1846,  1774,  1394,  1303,  2354,
     484,   484,  1265,   891,  1395,  1716,  2062, -1823, -1823,  2880,
    2063,    33,  1661,  2064,  2065,  2066,   500,  1296,   501,   870,
    2785,  2883,  1299,  2900,  2884,    34,  2901, -1825, -1825,  1396,
    2365,   756,  1268,   517,   502,   891,  1302,  1208,  2062,  1208,
     503,  2304,  2063,   504,   515,  2064,  2065,  2066,   544,    35,
    2904,  2320,  2919,  2901,   772,  2920,   589,  2961,  2962,  -109,
    2920,  1661,  2974,    36,  2407,  2901,  1668,   627,   627,  2327,
    2995,    69,  3026,  2996,  1048,  3027,  3063,  1322,  1125,  2901,
    1049,   484,   484,  1332,   484,  3081,  2598,  1061,  2920,  1338,
    3037,  2879,  3038,  1028,  1333,  1030,  2350,  1335,  2422,  1913,
    -343,  2556,  1208,  2355,  -350,  2652,  1062,  2655,  1341,  1346,
   -1826, -1826,  1342,  1125, -1827, -1827,  1344,  1972,  1343,   484,
    1345,   655,    36,   663, -1828, -1828,  1017,   664, -1829, -1829,
    1397, -1830, -1830,  1347,   756, -1831, -1831,  1716, -1832, -1832,
    2408, -1834, -1834,  2577,  2570,  -224,  1398,  1368, -1835, -1835,
    1320,  1399, -1836, -1836,  2029,  -225,  2710,  1063,   869, -1837,
   -1837, -1838, -1838,  1320,  1440, -1840, -1840, -1842, -1842,  3090,
    -340,   869,  1348,  1125,  2409,   756, -1845, -1845,   489,  1567,
    1568,  1871,  1872,   516,   484,  -341,  1050,   516,  1402,   484,
    2410,  1349,   586,   586,   588,   516,   593,  -198,  -198,   593,
    2411,  1351,   593,   618,  1352,  2850,   516,   516,  1353,  2192,
    1279,  1280,  1281,  1282,  2068,  -202,  -202,  -201,  -201,  1445,
    1447,   630,   644,   644,  2067,   644,   484,   484,   484,  1354,
    -344,   484,  1355,   772,  2412,  -342,  1356,  1357,  1358,   484,
     484,   484,   484,  1405,  1359,  1375,  2068,  1378,  1064,   484,
    2552,  1363,  1422,   484,   593,  1425,   484,  1427,  1693,   618,
     516,   618,   618,   618,  2069,  1694,  1452,  1428,  1695,  1696,
    1697,  1453,   630,  1443,   484,   484,  1457,  1462,  1645,   484,
    1032,  2308,  1034,  1498,  2069,  2719,  2720,  1500,  1505,  1524,
    1523,  1716,  1525,   484,  1530,  1531,   484,  1532,   484,  1065,
    1536,  1543,  1213,  1544,  2887,  1548,  1558,  1066,  2597,  1563,
    1570,  1571,  1575,  1580,   638,  1581,  2069,  1668,   484,  1067,
    1588,  2413,  2887,  1646,  1591,  1594,  1595,  1596,  -147,   484,
    1599,   892,  1254,  -147,  1605,  1407,  1612,  1625,  1614,  1615,
    1051,  2155,   630,  1635,  1621,   484,  1622,   488,  1626,  1647,
    1068,  1627,  1665,  1628,  1670,  1657,  1675,  2155,  1385,  1735,
    1737,  1741,  1374,   488,   484,  1776,  1739,  1648,  1758,  1740,
    1765,  1649,  1742,  1777,  1800,  1779,  1801,  1822,  1662,   484,
     484,  1663,   639,    73,  1666,  1370,  1815,  1829,  1828,  1830,
    2547,  1069,  1831,  1650,   772,  1053,  1651,  1070,   484,  1838,
     639,  1850,  -147,  1860,  1862,  1861,  1865,  1863,  1881,  1864,
    1884,  1652,  1888,  1889,  2240,  1890,  1208,  1208,  1208,  1071,
     772,   772,   640,   517,   517,  1072,  2971,  1952,  1956,  1960,
    1969,  1968,  1970,  1984,  1988,   772,  1989,  1408,  1990,  1073,
   -1846, -1846, -1846,  1992,  1412,  1413,  1414,  1415,  1416,  1417,
    2027,  -147,  1997,  1551,  2039,  1993,  1996,  1125,  2018,   670,
     640, -1846, -1846, -1846,  1998,  2073,  2074,  2075,  2076,  2077,
    2078,  1999,  2050,  2000,  2007,  2107,  2112,  2008,  2038,  2045,
    2047,  2070,  2071,  2072,  2048,  2073,  2074,  2075,  2076,  2077,
    2078,  2049,  2051,  1055,   756,  2696,  2052,  2054,  2128,  2058,
      69,  2055,   484,  1653,  2081,  2087,  2082,  2088,  2095,  2718,
    2105,  1654,  2119,  2070,  2071,  2072,  2129,  2073,  2074,  2075,
    2076,  2077,  2078,  2133,  2131,  2132,  2159,    69,  2169,  1320,
    2171,  2183,  2185,  2178,  2309,  1208,  2310,   869,  2187,  2191,
    2315,  2316,  -203,  -204,  2198,   691,  2199,  3021,  2203,  2201,
    2202,  2205,  2208,  2211,  1655,   484,  2207,   772,   756,  2230,
    2232,  2245,  2251,  2259,   484,  2260,  2252,   484,  2267,  2838,
     484,  2261,  2253,  2262,  2278,   781,   756,   484,   484,   484,
     484,   484,  2281,  2268,   484,   484,   484,   484,   484,   484,
     484,   484,   484,   484,  1766,  2382,   870,   484,   484,  2282,
     641,   484,  2271,   756,  2285,   630,   891,  2286,   484,  2062,
     756,  2289,   484,  2063,  2293,  2311,  2064,  2065,  2066,  2295,
    2319,   484,  2302,  2084,   484,  2303,   484,  2062,  2370,  2083,
    2351,  2385,  2352,   756,   484,  2371,   630,   484,   484,  2140,
    2353,  2396,   484,   484,  2420,  2406,   484,  2356,  2424,  2434,
    2368,  2438,  2432,   630,  2449,    69,  2374,   627,   484,  2447,
     484,  2453,  2547,  2486,  2582,  2459,  2590,   618,  2429,  2430,
    2155,   679,  2155,   484,   680,  2460,   488,  2466,   488,  2502,
    2594,  2596,  2567,   484,   516,  2930,  2568,  2569,  2573,   772,
    2606,  2583,  2609,  1955,  2648,  2603,  2610,  2611,  2639,   484,
    2613,  2612,  2627,  2642,  2640,  2649,  2645,  2656,   517,   517,
    2661,   517,   680,   516,   516,  2662,  2663,  2664,  2666,  2677,
    2685,  2683,  2684,  2689,  2693,  2694,  2695,  2703,  1384,  2706,
    2708,  1385,  2552,  2709,  2735,  1386,  1698,  1699,  1700,  2736,
    1701,  1702,  1703,  1704,  1705,  1706,  2713,  2726,  -751,  2554,
   -1812,  2738,  1208,   586, -1813,  2725,  1208,  2548,  1208,  2727,
    2745, -1814, -1815,  1394, -1816,  1061, -1817, -1818,  2964, -1819,
   -1846,   670,   985,   985,   593,   593, -1820,   593, -1821,  2754,
    2788,  2760, -1822, -1823,  1062,  2817,  1061,   618, -1825,  2574,
      69,  2994,   772, -1826,  1582,  1396,   516, -1827, -1828,  2902,
    1584,  2998,  2902,  1585,  1586,  1062,   618, -1829,  2739,   618,
    2975,  2591,  2977,  2592, -1830,   756, -1831,  2068, -1832, -1834,
    2752,  2823, -1835,  2811, -1836, -1837, -1838, -1839, -1840, -1841,
     654,   484,   657,   772,   661,  1063,  2492, -1842, -1843,  2840,
   -1844, -1845,  -752,  2757,  2493,  2761,  2815,  2775,  2793,  2826,
    2825,  2828,  2841,  2930,  2842,  2849,  1063,   618,   618,   618,
     618,  2851,  2856,  2857,  2860,  2942,  2871,  2881,  2872,  2885,
    2893,  2894,  2909,  2895,  2897,  2905,  2907,  2913,  2916,   484,
     484,  2921,  2935,  2702,   484,   756,  2939,  2069,   891,   484,
    2943,  2062,   484,   484,  2941,  2063, -1846,   484,  2064,  2065,
    2066,  2946,  2494,  2952,  2957,  2958,  2959,  2963,  2979,  1368,
    2967,  2980, -1846,  2968,  2976,  2366,  2982, -1846,   517,  2993,
     484,  2997,  3000,  2494,   484,  3011,  1064,  3005,   517,  3012,
     517,  3017,  2155,   517,  3013,  2668,  2155,  3018,   488,   517,
    3019,   517,   488,  3028,  2989,  3029,   484,  1064,  3030,  3035,
    3032,  3045,  2630,   517, -1846,  3048,  2670,  2672,   517,  3050,
    1368,  3062,   517,   517,   517,   517,  3064,   517,   517,  3046,
    3065,  3067,  3092,  3047,  3083,  3096,  3088,  1065,  1766,  3089,
     484,  3097,  3101,  1019,  1915,  1066,  2716,  2505,   484,  2501,
    2228,  1825,  2265,  2305,  2130,  2758,  3009,  1067,  1065,  2495,
    3079,  2836,  3044,  3051,  2552,  3073,  1066,   484,  1514,  1405,
    2147,  2870,  2210,  2235,  2589,  3041,   756,  2470,  1067,  3049,
    2506,  2471,  2206,  3040,  2270,    69,  2147,  2472,  1068,  2581,
     629,  2443,  1459,  1608,  1637,  2960,  1629,  2442,  2673,  2988,
    2473,  2816,  3039,  1454,  2167,  1435,  2190,   627,  1880,  1068,
    2970,  2984,  2548,  1495,  1494,  3068,  2200,  1857,  1334,  2428,
    3031,  2978,  2915,  2667,  2168,  1879,  2400,  2654,  2899,  2474,
    1499,  2475,  2395,  2966,  2638,  1070,  2965,  2972,  1679,  2973,
    2814,  1681,  1685,  1686,  2070,  2071,  2072,  3033,  2073,  2074,
    2075,  2076,  2077,  2078,  3034,  3061,  1070,  1071,  2103,  2068,
    1805, -1846,  2042,  2193,  2742,  2126,  1320,  1951,  2124,  2162,
    2427,  1824,   987,  2669,   869,     0,  2036,  1073,  1071,  2496,
     484,     0,  2497,   756,     0,   516,   484,     0,     0,     0,
       0,     0,     0,     0,     0,   484,   484,     0,  1073,   484,
       0,     0,   517,   763,     0,     0,     0,   765,     0,  1374,
       0,     0,   772,   484,     0,     0,  2476,     0,     0,     0,
       0,     0,   484,     0,     0,  2155,     0,   484,   618,  2069,
     484,   488,  2813,     0,  2155,     0,     0,   484,   484,  2155,
     488,     0,  2155,     0,     0,   488,   516,   516,   488,   484,
       0,   484,     0,   618,   618,     0,  1464,     0,     0,     0,
       0,  2155,     0, -1846,     0,     0,     0,   488,     0,   484,
    1412,  1413,  1414,  1415,  1416,  1417,   772,     0,     0,   618,
    1517,     0,     0,     0,  2477,     0,  1525,     0,     0,  2478,
       0,  2554,   618,     0,   772,     0,     0,   517,   672,  2548,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   618,
       0,     0,     0,   618,     0,     0,     0,     0,  2854,     0,
       0,   772,     0,     0,     0,     0,     0,     0,   772,     0,
       0,   484,  2479,     0,   484,   756,     0,     0,     0,     0,
       0,     0,     0,  2155,     0,     0,     0,     0,  2480,   488,
       0,   772,     0,  1368,     0,     0,     0,     0,   484,     0,
       0,     0,   484,     0,     0,     0,   756,     0,   630,   756,
       0,     0,     0,     0,  2155,   484,     0,     0,     0,     0,
     488,     0,     0,     0,  1368,     0,     0,     0,     0,   484,
       0,     0,   484,  1632,     0,  1633,     0,     0, -1571,  2394,
       0,  2397,  1208,     0,     0,     0,     0,   484,     0,     0,
     763,     0,     0,     0,   765,     0,     0,  2948,   997,     0,
       0,     0,     0,     0,     0,     0,  2070,  2071,  2072,     0,
    2073,  2074,  2075,  2076,  2077,  2078,     0,  1020,     0,  2954,
     517,     0,     0,     0,     0,     0,  2481,  1574,     0,     0,
       0,     0,     0,  2482,     0,   618,     0,     0,   484,     0,
       0,     0,     0,     0,  1604,     0,     0,     0,     0,     0,
    2155,     0,     0,     0,     0,   772,   488,     0,     0,   484,
       0,   484,     0,   484,     0,     0,     0,   484,  1225,  1228,
    1229,  1230,  1061, -1571,   484,     0,     0,  1620,  2985,     0,
       0,     0,     0,     0,     0,     0,  2155,     0,     0,     0,
       0,  1062,   488,     0,     0,     0,     0,   484,     0,     0,
       0,     0,    69,     0,     0,     0,     0,     0,   680,   680,
       0,   516,   516,   772,   516,   680,     0,   484,     0,     0,
       0,     0,     0,     0,    69, -1571,    69,   763,     0,     0,
     484,   765,     0,     0,     0,     0,     0,     0,     0, -1571,
       0,     0,  1063,  2554, -1571,     0,     0,     0,     0, -1571,
    1208,  2548,     0,     0,     0,     0,     0,     0, -1571,     0,
       0,     0, -1571,     0,  1709,     0,     0,     0,     0,     0,
       0,     0,     0,   484,  3052,  1734,   484,   484,     0,     0,
     766,     0,  1887,   772,     0,  2155,     0,     0,     0,     0,
       0,   488,  1896, -1571,  1899,     0,     0,  1910,     0,     0,
       0,     0,     0,  1914,   891,  1916,     0,  2062,   680,   484,
       0,  2063,     0, -1571,  2064,  2065,  2066,  1923,     0,     0,
       0,     0,  1926,     0,     0,     0,  1931,  1932,  1933,  1934,
       0,  1938,  1939,  1064,     0,     0,     0,     0,     0,   985,
     618,  2147,     0,     0,     0,  2147,   891,     0,     0,  2062,
     484,     0,   517,  2063,     0,     0,  2064,  2065,  2066,     0,
       0,   618, -1571,   618,     0, -1571,     0,     0,     0,    69,
      69, -1571,     0,  2621,  1844,  1845,     0,     0,     0,   517,
       0,     0,     0,     0,  1065,     0,     0,     0,     0,     0,
       0,     0,  1066,     0,   517,   517,   517,   517,   517,   517,
     517,   517,   517,   517,  1067, -1571,   763,     0,     0,     0,
     765,     0,   618,     0,   772,     0,     0,     0,     0,     0,
    1517,   516,     0,     0,     0,     0,     0,     0, -1571,     0,
       0,   516,  1897,   516,  1901,  1068,   516,     0,     0,     0,
       0,     0,   516,     0,   516,     0,     0,     0,     0,     0,
     772,     0,     0,     0,     0,   680,   516,     0,     0,     0,
     680,   516,     0,     0,     0,   516,   516,   516,   516,     0,
     516,   516,     0,     0,     0,     0,     0,     0,     0,  1448,
       0,     0,  1070,     0,  2140,     0,     0,   766,     0,     0,
     618,   618,  1964,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1071,  1461,     0,     0,  1980,     0,
       0, -1571,     0,     0,     0, -1846,     0,    69,     0, -1571,
       0,   772,     0,     0,  1073,     0,     0,     0,     0,     0,
    1506,     0,     0,     0,     0,     0, -1571,     0, -1571, -1571,
       0,     0,     0,  1533,     0,     0,     0,   768,     0,     0,
    2641,     0,     0,     0,     0,     0,     0,  2068,     0,     0,
       0,     0,     0,     0,  1557,  2659,     0,   763,     0,     0,
       0,   765,     0,     0,     0, -1571,     0,     0, -1571, -1571,
   -1571,     0,     0,  2147,     0,  2069,     0,     0,  2147,     0,
       0,  2147,     0,   763,   763,     0,     0,   765,   765,     0,
       0,  1632,   -39,     0,     0,     0,     0,     0,   763,     0,
       0,     0,   765,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   517,     1,   766,     0,     0,  2069,     0,     0,
       0,     0,     0,     2,     0,     3,     4,   772,     0,     0,
       0,     0,     0,     0,     0,   516,     0,     0,     0,     0,
       0,     5,   516,     0,     0,     0,     0,     0,   769,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    69,     7,   772,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     8,     0,     0,     0,     0,     0,  1709,
       0,     0,     0,     0,     0,     9,     0,    10,     0,     0,
    1269,  1270,     0,     0,   772,     0,  1590,   772,     0,     0,
       0,     0,     0,     0,     0,    11,     0,     0,     0,     0,
       0,   618,     0,  2147,     0,     0,     0,  2158,     0,    12,
     763,     0,     0,     0,   765,     0,  1368,     0,     0,    13,
     516,     0,     0,  2158,  2277,    14,     0,  2177,     0,     0,
    2180,  1844,     0,    15,   768,    16,    17,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
       0,     0,     0,     0,     0,     0,  1271,  1272,     0,     0,
       0,     0,  2070,  2071,  2072,     0,  2073,  2074,  2075,  2076,
    2077,  2078,    69,     0,   517,     0,     0,     0,    19,     0,
       0,     0,     0,   766,  1574,     0,     0,  2792,     0,     0,
    2795,     0,     0,    20,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2070,  2071,  2072,     0,  2073,  2074,
    2075,  2076,  2077,  2078,     0,     0,     0,     0,     0,    21,
       0,  1273,  1274,  1275,  1276,  1277,  1278,     0,     0,  1279,
    1280,    69,     0,     0,     0,   517,     0,     0,     0,     0,
       0,     0,   763,     0,   518,   769,   765,  1574,     0,     0,
       0,     0,   618,     0,     0,   517,   517,     0,     0,     0,
    1574,   618,   618,   516,     0,   618,     0,     0,     0,     0,
     517,   768,     0,     0,   891,     0,     0,  2062,     0,     0,
       0,  2063,   618,     0,  2064,  2065,  2066,     0,     0,   772,
       0,  1814,     0,     0,  2301,     0,    22,   519,     0,    23,
       0,  2622,     0,     0,   517,     0,     0,     0,     0,     0,
     680,     0,  1823,   520,  1826,  1269,  1270,     0,     0,     0,
       0,     0,  2795,     0,  1574,  1574,  1384,    69,    24,  1385,
       0,     0,     0,  1386,     0,  1281,  1282,    25,     0,     0,
       0,     0,     0,     0,   766,   763,   517,  1709,     0,   765,
     771,    26,     0,     0,     0,     0,  2451,     0,    27,     0,
       0,  1394,    28,  1875,     0,     0,     0,   521, -1846,     0,
     766,   766,    29,     0,     0,     0,     0,   522,     0,     0,
       0,     0,   769,  2503,    30,   766,   763,     0,    31,   523,
     765,  1271,  1272,  1396,   524,     0,     0,     0,  2557,  2558,
    2559,  2560,  2561,  2562,  2563,  2564,  2565,  2566,     0,     0,
       0,     0,  1678,     0,   583,     0,     0,     0,     0,     0,
       0,   525,     0,     0,    32,     0,   517,     0,     0,    33,
    2792,     0,     0,   618,   618,   618,   489,     0,  2158,  2404,
    2404,  1962,  1963,    34,     0,  2404,  2419,     0,  1283,  1284,
     768,     0,     0,     0,     0,     0,  1273,  1274,  1275,  1276,
    1277,  1278,     0,  2110,  1279,  1280,   526,    35,  1285,     0,
     527,     0,     0,     0,     0,  1844,     0,     0,     0,     0,
       0,    36,     0,     0,   -39,  2068,     0,     0,     0,     0,
       0,     0,     0,   618, -1846,   516,  2792,     0,     0,  1574,
    1517,  1574,     0,  1604,     0,     0,     0,   766,     0,     0,
   -1846,     0,     0,     0,     0, -1846,     0,     0,     0,     0,
    1269,  1270,   516,     0,  2504,     0,     0,     0,     0,     0,
       0,     0,     0,   528,     0,     0,     0,   516,   516,   516,
     516,   516,   516,   516,   516,   516,   516,   529,     0,     0,
       0,     0, -1846,     0,     0,  2069,     0,   771,     0,     0,
    1980,   769,     0,     0,   618,     0,   968,   968,     0,     0,
    1281,  1282,     0,     0,  1517,     0,     0,     0,     0,     0,
     530,     0,     0,   531,     0,  1604,     0,     0,     0,     0,
       0,   532,     0,     0,   533,     0,  1271,  1272,     0,     0,
       0,     0,     0,  1574,     0,     0,     0,  1405,     0,     0,
       0,   768,     0,   534,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2697,   535,  1127,  1132,
       0,     0,     0,     0,   536,     0,     0,   768,   768,   766,
       0,     0,     0,   537,     0,     0,     0,     0,     0,   538,
       0,     0,   768,  2614,     0,     0,     0,     0,     0,     0,
       0,  1273,  1274,  1275,  1276,  1277,  1278,     0,     0,  1279,
    1280,     0,  2139,     0,   539,     0,     0,  2632,     0,   618,
     618,   618,   618,  1283,  1284,     0,  2404,  2419,     0,  2404,
    2404,     0,     0,   516,   771,     0,     0,     0,  2158, -1846,
       0,     0,  2158,     0,     0,   763,     0,     0,   516,   765,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   769,     0,   985,     0,     0,     0,  2177,     0,
       0,     0,     0,  1844,     0,     0,     0,     0,     0,  1709,
       0,     0,   766,     0,     0,  1517,     0,     0,   769,   769,
       0,  1574,  2070,  2071,  2072,     0,  2073,  2074,  2075,  2076,
    2077,  2078,     0,   769,   680,   516,     0,     0,     0,   763,
       0,     0,   618,   765,   768,  1281,  1282,     0,     0,     0,
       0,     0,     0,   766,     0,     0,     0,   763,     0,  2717,
       0,   765,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1846,     0,     0,     0,     0,     0,     0,  1412,  1413,
    1414,  1415,  1416,  1417,   763,     0,     0,     0,   765,     0,
       0,   763,     0,  2266,     0,   765,     0,     0,     0,     0,
       0,     0,  2274,  2276,     0,     0,  2280,     0,     0,     0,
       0,     0,     0,     0,   763,     0,     0,  1127,   765,     0,
       0,     0,     0,  2294,     0,     0,     0,     0,     0,  2839,
       0,     0,     0,     0,  1339,  1574,     0,     0,     0,     0,
       0,     0,     0,   771,     0,  1980,     0,     0,     0,  2847,
    2848,     0,     0,     0,     0,   769,  2756,     0,  1283,  1284,
       0,     0,     0,  1350,  2858,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   768,     0,     0,     0,
       0,     0,     0,  1360,  1361,  1362,     0,     0,  1369,     0,
       0,     0,  2770,     0,     0,     0,     0,     0,     0,     0,
       0,   489,  2404,     0,  2781,     0,     0,   516,     0,     0,
    2158,  1426,     0,     0,     0,  2158,     0,     0,  2158,     0,
     516,     0,     0,   516,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2822,   763,     0,
    2917,     0,   765,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1471,     0,     0,   516,  1485,
    1490,     0,     0,     0,  2391,  2392,  2393,     0,     0,   768,
       0,     0,     0,     0,     0,     0,     0,   769,   516,   516,
       0,     0,     0,     0,     0,     0,   763,     0,     0,   618,
     765,  1517,     0,   516,   771,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   618,     0,     0,  2822,
     768,     0,  1127,     0,     0,     0,     0,     0, -1573,     0,
     771,   771,     0,  1127,  2450,     0,     0,   516,     0,     0,
       0,     0,     0,     0,     0,   771,     0,     0,     0,     0,
    2158,     0,     0,     0,     0,   516,     0,  1127,     0,     0,
       0,     0,     0,     0,     0,     0,   763,     0,     0,     0,
     765,     0,   766,  2912,     0,     0,     0,   985,     0,   516,
       0,     0,     0,     0,     0,     0,     0,     0,   618,     0,
     769,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   680,  2579,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   618,     0,
       0,     0,     0, -1573,     0,     0,     0,     0,     0,     0,
       0,   769,     0,     0,     0,     0,   766,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   489,     0,     0,     0,
       0,     0,     0,     0,   766,  2969,     0,     0,     0,   516,
       0,     0,     0,   516,     0,     0,     0,   771,     0,     0,
       0,     0,     0,     0,     0, -1573,     0,     0,     0,     0,
       0,   766,  2822,   680,   680,   680,     0,     0,   766, -1573,
       0,     0,     0,     0, -1573,     0,     0,   763,     0, -1573,
       0,   765,     0,     0,     0,     0,     0,     0, -1573,     0,
       0,   766, -1573,     0,  1517,     0,     0,     0,     0,     0,
    2633,  2634,  2635,  2636,     0,     0,     0,     0,     0,   516,
       0,     0,     0,   763,     0,     0,     0,   765,     0,     0,
       0,  2912,     0, -1573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1844,     0,     0,     0,     0,
       0,     0,     0, -1573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1517,     0,  1673,     0,     0,
       0,  2822,     0,     0,     0,     0,     0,  1692,     0,  1710,
       0,     0,  1721,  1724,  1729,  1732,     0,  2781,   680,   771,
       0,     0,     0,     0,   763,     0,     0,     0,   765,     0,
       0,     0, -1573,  2704,     0, -1573,  1744,     0,     0,     0,
       0, -1573,  1748,  1749,  1750,  1751,  1752,  1753,  1754,     0,
       0,     0,     0,  1763,  1764,   766,     0,     0,  1775,   768,
       0,     0,  1778,     0,     0,  1786,  1787,  1788,  1789,  1790,
    1791,  1792,  1793,  1794,  1319, -1573,  1795,     0,     0,  1319,
       0,     0,     0,   968,     0,     0,  1127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1573,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1827, -1587,
       0,     0,     0,   766,     0,     0,     0,     0,     0,     0,
       0,     0,   771,   768,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     763,   768,  1361,  1362,   765,     0,     0,     0,     0,     0,
    1384,     0,     0,  1385,  2140,     0,     0,  1386,  1387,  1388,
    1389,  1390,  1391,   771,     0,     0,  1381,     0,   768,     0,
     769,     0,     0,     0,     0,   768,   763,  1392,     0,     0,
     765, -1573,     0,   766,     0,  1394,     0,     0,     0, -1573,
       0,  1319,  1395,  1319,  1319,     0,     0,     0,   768,     0,
       0,     0,     0,     0, -1587,     0, -1573,   763, -1573, -1573,
     763,   765,     0,     0,   765,     0,     0,  1396,     0,     0,
    1127,     0,     0,  1948,  1949,     0,  1950,     0,     0,     0,
       0,     0,     0,     0,   769,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1573,     0,     0, -1573, -1573,
   -1573,     0,   769,     0,     0,  1127, -1587,     0,     0,     0,
       0,  1319,     0,     0,  1319,  1319,     0,     0,     0,     0,
   -1587,     0,     0,     0,     0, -1587,     0,     0,     0,   769,
   -1587,     0,     0,     0,     0,     0,   769,     0,     0, -1587,
    2855,     0,     0, -1587,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2876,     0,   769,
       0,     0,     0,     0,   766,  1127,     0,     0,  1397,     0,
       0,     0,   768,     0, -1587,     0,  2040,     0,     0,     0,
       0,  2046,     0,     0,  1398,     0,     0,     0,     0,  1399,
       0,     0,     0,     0, -1587,     0,     0,     0,     0,     0,
     766,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1400,  1401,     0,     0,     0,     0,     0,     0,     0,
    2061,     0,     0,     0,     0,     0,  1402,     0,     0,  2926,
     768,  1729,     0,  1729,  1729,     0,     0,     0,     0,     0,
       0,  2099,     0, -1587,     0,  2102, -1587,     0,  2104,     0,
       0,     0, -1587,     0,     0,     0,     0,     0,     0,  2953,
       0,     0,   763,     0,  1403,     0,   765,  1404,     0,     0,
       0,   766,     0,     0,     0,     0,     0,     0,     0,     0,
    1420,  1405,     0,   769,  1406,  2122, -1587,     0,  2125,     0,
    2127,     0,     0,     0,     0,  1607,     0,     0,     0,     0,
     768,     0,     0,     0,     0,     0,  1616,     0,  1617, -1587,
       0,     0,     0,     0,     0,     0,     0,  1623,     0,     0,
       0,  1420,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   771,     0,  1624,     0,     0,     0,     0,     0,
       0,   769,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1471,     0,     0,     0,
    1639,  1641,     0,     0,     0,  2140,     0,     0,     0,     0,
       0,  1490,  1793,  1407,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   766,     0,     0,
    2204,     0, -1587,  1676,  1677,     0,   771,  1690,  1691,     0,
   -1587,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   769,     0,     0,   771,     0,     0, -1587,     0, -1587,
   -1587,     0,     0,   766,     0,     0,     0,     0,     0,     0,
       0,   768,     0,     0,     0,     0,     0,     0,     0,  1420,
       0,   771,     0,     0,  1420,     0,     0,     0,   771,  1127,
       0,     0,     0,     0,   766,     0, -1587,   766,     0, -1587,
   -1587, -1587,     0,     0,     0,     0,     0,   768,     0,     0,
       0,   771,     0,     0,     0,  1408,     0,     0,  1409,  1410,
    1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,
       0,     0,     0,     0,  2292,  2053,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1869,  1869,     0,   768,     0,
       0,     0,   769,     0,     0,     0,     0,  2318,     0,     0,
       0,     0,     0,     0,     0,     0,  2322,     0,     0,  2323,
       0,     0,  2325,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   769,     0,
       0,     0,     0,     0,     0,     0,  1319,     0,     0,  2346,
    2347,     0,     0,  1827,     0,   771,  1319,     0,     0,  1319,
       0,     0,     0,     0,  2357,     0,     0,     0,     0,     0,
       0,     0,     0,  2364,     0,     0,  2367,     0,  2369,     0,
       0,     0,     0,     0,     0,     0,  2373,     0,     0,     0,
       0,     0,     0,     0,  2380,  2381,     0,     0,  2384,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   769,
       0,  1420,     0,   771,   768,     0,     0,     0,     0,   766,
       0,     0,  1420,     0,     0,  2423,  1717,     0,     0,     0,
    2004,  2006,  1420,  1420,  1420,  2431,     0,     0,     0,     0,
       0,  1420,     0,     0,     0,     0,     0,     0,     0,     0,
     768,  2444,     0,  1319,     0,     0,     0,     0,     0,     0,
       0,     0,  1383,     0,     0,     0,  1319,  1384,     0,     0,
    1385,     0,     0,     0,  1386,  1387,  1388,  1389,  1390,  1391,
       0,   768,     0,   771,   768,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1392,     0,     0,  1393,  1420,     0,
       0,     0,  1394,     0,     0,     0,     0,  1384,     0,  1395,
    1385,     0,     0,     0,  1386,     0,     0,  1389,  1390,  1391,
       0,     0,     0,     0,     0,   769,     0,     0,     0,     0,
       0,     0,     0,     0,  1396,     0,     0,     0,     0,     0,
       0,     0,  1394,  1420,     0,     0,     0,     0,     0,  1395,
       0,     0,     0,     0,     0,     0,     0,  1420,     0,     0,
       0,   769,  1420,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1396,     0,     0,     0,     0,     0,
       0,     0,     0,  2602,     0,     0,     0,     0,     0,     0,
       0,     0,   769,     0,     0,   769,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   771,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2164,
       0,  2615,  2616,     0,     0,  1397,  2617,     0,     0,     0,
       0,  2620,     0,     0,  2623,  2624,     0,     0,     0,  2628,
     771,  1398,     0,     0,     0,     0,  1399,     0,     0,     0,
       0,     0,     0,     0,  2196,  2196,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1397,     0,     0,  1400,  1401,
       0,     0,     0,     0,     0,     0,   768,     0,     0,     0,
       0,  1398,     0,  1402,     0,     0,  1399,     0,   968,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1400,  1401,
       0,   771,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1403,  2692,  1402,  1404,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1420,     0,     0,  1405,     0,
       0,  1406,     0,     0,     0,     0,     0,     0,     0,  2711,
       0,     0,     0,     0,  1420,     0,     0,     0,     0,     0,
       0,  1403,     0,     0,  1404,     0,     0,     0,     0,     0,
       0,     0,  1420,     0,  1717,  1717,     0,  2079,  1405,  1717,
       0,     0,     0,  1420,     0,     0,  1420,   769,     0,     0,
       0,  1420,     0,     0,  1420,  2297,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1420,     0,     0,     0,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,     0,     0,     0,
       0,     0,  1717,  1717,     0,  1420,  1420,   771,     0,     0,
    1407,     0,     0,     0,     0,     0,     0,  1420,     0,     0,
    1420,     0,     0,     0,     0,     0,     0,     0,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,     0,     0,
       0,     0,     0,   771,     0,     0,     0,     0,  2099,     0,
    1407,     0,     0,     0,     0,     0,     0,  2765,  2766,     0,
       0,  2767,     0,     0,     0,     0,     0,     0,     0,  1420,
       0,     0,     0,     0,   771,     0,     0,   771,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2809,
    2810,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1408,  2824,     0,  1409,  1410,  1411,     0,  1412,
    1413,  1414,  1415,  1416,  1417,     0,     0,     0,     0,     0,
       0,  2834,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1408,     0,     0,  1409,  1410,  1411,     0,  1412,
    1413,  1414,  1415,  1416,  1417,     0,     0,     0,     0,  1384,
       0,     0,  1385,     0,     0,     0,  1386,  1387,  1388,  1389,
    1390,  1391,     0,     0,     0,     0,     0,     0,     0,     0,
    1420,  1420,  1420,     0,     0,     0,  1392,     0,     0,  2361,
       0,     0,     0,     0,  1394,     0,     0,     0,     0,     0,
       0,  1395,     0,     0,     0,     0,     0,     0,     0,     0,
    2896,     0,  1319,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1396,  1369,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   968,     0,     0,  2918,     0,  1384,     0,     0,  1385,
       0,     0,     0,  1386,  1387,  1388,  1389,  1390,  1391,  2937,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   771,
       0,     0,  1420,  1392,     0,     0,     0,     0,  1420,     0,
       0,  1394,     0,     0,     0,     0,     0,     0,  1395,     0,
       0,  2079,  2079,  1420,     0,  1717,  1717,  1717,  1717,  1717,
       0,     0,  1717,  1717,  1717,  1717,  1717,  1717,  1717,  1717,
    1717,  1717,  2079,  1396,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1397,     0,     0,
       0,  1420,     0,     0,  1420,  2809,  1420,     0,     0,  2981,
    2079,  2079,     0,  1398,     0,     0,     0,     0,  1399,     0,
       0,     0,     0,     0,  1420,  1717,  1717,  1420,     0,  1420,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3010,
    1400,  1401,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1402,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2809,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1397,     0,     0,     0,     0,     0,
       0,     0,     0,  1403,     0,     0,  1404,     0,     0,     0,
    1398,     0,     0,     0,     0,  1399,  1420,     0,     0,     0,
    1405,     0,     0,  1406,     0,     0,     0,     0,  3058,  3058,
       0,     0,     0,     0,     0,     0,     0,  1400,  1401,     0,
    1319,     0,     0,     0,     0,  1319,     0,     0,     0,     0,
       0,     0,  1402,     0,     0,     0,     0,     0,     0,     0,
       0,  3058,     0,     0,     0,     0,  1384,     0,     0,  1385,
       0,     0,     0,  1386,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1403,     0,     0,  1404,  1639,  1641,     0,     0,     0,     0,
       0,  1394,  3058,     0,  1420,     0,     0,  1405, -1846,     0,
    1406,     0,  1407,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1420,     0,     0,  1396,  1420,  1420,     0,  1420,     0,     0,
    2079,  2079,  2079,  2079,  2079,     0,     0,     0,  2079,  2079,
    2079,  2079,  2079,  2079,  2079,  2079,  2079,  2079,  1420,  1420,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1420,
       0,     0,     0,     0,     0,     0,  1420,     0,     0,  1420,
       0,  1420,     0,     0,     0,  1420,     0,     0,  2079,  2079,
       0,     0,  1420,  1420,     0,  1384,  1420,     0,  1385,  1407,
       0,     0,  1386,  2120,     0,  1389,  1390,  1391,     0,     0,
       0,     0,     0,     0,  1408,     0,     0,  1409,  1410,  1411,
       0,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,     0,
    1394,  1738,     0,     0, -1846,  1420,     0,  1395,     0,     0,
       0,     0,     0,  1420,     0,     0,     0,     0,     0,     0,
   -1846,     0,     0,     0,     0, -1846,  1420,     0,  1384,     0,
       0,  1385,  1396,  1639,  1641,  1386,  1387,  1388,  1389,  1390,
    1391,     0,     0,     0,  1319,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1392,  1717,     0,     0,     0,
       0,     0, -1846,  1394,     0,     0,     0,     0,     0,     0,
    1395,  1408,     0,     0,  1409,  1410,  1411,     0,  1412,  1413,
    1414,  1415,  1416,  1417,     0,     0,     0,     0,  1738,  1384,
       0,     0,  1385,     0,     0,  1396,  1386,  1387,  1388,  1389,
    1390,  1391,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1048,     0,     0,     0,  1392,  1405,  1049,     0,
       0,     0,     0,     0,  1394,  1061,     0,     0,     0,     0,
       0,  1395,     0,  1397,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1062,     0,     0,     0,     0,  1398,
       0,     0,     0,     0,  1399,     0,  1396,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1846, -1846,     0,     0,
       0,     0,     0,     0,  1420,     0,     0,     0,  1717,     0,
       0,  1402,     0,     0,     0,  1063,  1397,  1420,  1420,  1420,
       0,     0,  1420,     0,     0,  1420,  1420,     0,     0, -1846,
    1420,     0,  1398,     0,     0,     0,     0,  1399,     0,     0,
       0,     0,     0,     0,  1050,     0,     0,     0,     0,     0,
       0,     0, -1846,     0,     0,     0,     0,     0,     0,  1400,
    1401,     0,     0,     0,     0,     0,  1405,     0,     0,     0,
       0,     0,     0,     0,  1402,     0,     0,  1397,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1398,  1420,     0,     0,     0,  1399,     0,
    2079,     0,     0,     0,     0,     0,  1064,     0,     0,     0,
       0,     0,  1403,  1420,     0,  1404,     0,     0,     0,     0,
    1400,  1401,     0,     0,     0,     0,     0,     0,     0,  1405,
       0, -1846,  1406,     0,     0,  1402,  1319,     0,  1412,  1413,
    1414,  1415,  1416,  1417,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1065,  1407,     0,
       0,  2079,  1717,     0,     0,  1066,     0,  1420,  1420,  1420,
       0,     0,     0,  1403,     0,     0,  1404,  1067,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1405,     0,     0,  1406,     0,     0,     0,     0,  1051,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1068,     0,
       0,  1420,  1420,     0,     0,     0,     0,     0,     0,     0,
       0,  1407,     0,     0,     0,     0,  1420,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1420,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1917,
       0,     0,     0,  1053,     0,  1070,     0,     0,     0,     0,
    1408,     0,     0,  1409,  1410,  1411,     0,  1412,  1413,  1414,
    1415,  1416,  1417,     0,     0,     0,     0,  1071,     0,     0,
    2079,     0,  1407,  1918,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1073,  1420,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1420,     0,     0,  1408,     0,     0,  1409,  1410,  1411,     0,
    1412,  1413,  1414,  1415,  1416,  1417,     0,     0,     0,  1420,
    2106,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1055,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1420,  1408,     0,     0,  1409,  1410,  1411,
       0,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,     0,
       0,  2321,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1420,     0,     0,     0,     0,     0,     0,     0,
       0,  1085,   888,   583,   889,   890,   891,   892,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,  1086,   102,   103,
     104,     0,     0,     0,     0,   894,     0,     0,   105,   106,
    1420,   107,   108,   109,  1087,   111,   112,   113,   114,   895,
    1088,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,  1089,     0,   136,   137,   138,   139,
     140,   141,  1090,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,  1091,   153,   154,   155,  1092,  1093,
    1094,  1095,   908,   909,  1096,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,   913,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
    1097,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,  1098,     0,
    1099,   214,   215,  1100,  1101,   218,     0,   219,     0,   918,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
    1102,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,  1103,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,  1104,  1105,   255,
    1106,   257,   258,   259,   260,   261,   262,     0,     0,   263,
    1107,   265,  1108,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,  1109,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,  1110,   926,   297,   298,   299,   300,
     927,   301,   302,  1111,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,  1112,   319,  1113,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,  1114,   371,   372,   373,   935,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1115,   392,   393,   394,   395,   396,  1116,
     398,   399,   937,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,  1117,   415,   938,
     417,     0,   418,   419,     0,   420,  1118,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,  1119,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,  1120,     0,
     448,   449,   450,   451,   452,   453,   946,  1121,   455,  1122,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   947,     0,     0,     0,     0,     0,     0,   948,   949,
    1123,     0,     0,     0,     0,   951,     0,   952,  1124,     0,
       0,     0,   953,     0,   954,   955,    93,   888,   583,   889,
     890,   891,   892,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     894,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   895,   116,   896,   897,     0,   119,
     120,   121,   122,   123,   124,   898,   899,   125,   126,   900,
     901,   129,     0,   130,   131,   132,   133,   902,     0,   903,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   904,   905,   906,   907,   908,   909,   910,
     161,   162,   163,   164,   165,   166,   167,   911,   912,   170,
     913,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   717,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   914,   199,   200,   201,   202,
     203,   915,   916,   205,     0,   206,   207,   917,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   918,   919,   222,     0,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   920,   921,     0,   922,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,     0,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   923,   924,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   925,   295,
     926,   297,   298,   299,   300,   927,   301,   302,   303,   304,
     928,   929,   306,   930,   308,   309,   310,     0,   311,   312,
       0,     0,   931,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   932,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   933,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   934,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,   370,   371,   372,   373,
     935,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,    26,   386,   387,   388,   389,   390,   936,   392,
     393,   394,   395,   396,   397,   398,   399,   937,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   938,   417,     0,   418,   419,    31,
     420,   421,   422,   423,   424,   425,   426,     0,   939,   940,
       0,     0,   429,   430,   941,   432,   942,   943,   434,   435,
     944,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,   945,     0,   448,   449,   450,   451,   452,
     611,   946,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,    34,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   947,     0,    35,     0,
       0,     0,     0,   948,   949,     0,     0,     0,     0,     0,
     951,     0,   952,  2908,     0,     0,     0,   953,     0,   954,
     955,    93,   888,   583,   889,   890,   891,   892,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,   894,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,   114,   895,
     116,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,   903,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   904,   905,
     906,   907,   908,   909,   910,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,   913,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   918,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,   295,   926,   297,   298,   299,   300,
     927,   301,   302,   303,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,   373,   935,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,    26,   386,   387,
     388,   389,   390,   936,   392,   393,   394,   395,   396,   397,
     398,   399,   937,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   938,
     417,     0,   418,   419,    31,   420,   421,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,   944,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   945,     0,
     448,   449,   450,   451,   452,   611,   946,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,    34,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   947,     0,    35,     0,     0,     0,     0,   948,   949,
       0,     0,     0,     0,     0,   951,     0,   952,     0,     0,
       0,     0,   953,     0,   954,   955,    93,   888,   583,   889,
     890,   891,   892,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     894,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   895,   116,   896,   897,  1725,   119,
     120,   121,   122,   123,   124,   898,   899,   125,   126,   900,
     901,   129,     0,   130,   131,   132,   133,   902,     0,   903,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   904,   905,   906,   907,   908,   909,   910,
     161,   162,   163,   164,   165,   166,   167,   911,   912,   170,
     913,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   717,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   914,   199,   200,   201,   202,
     203,   915,   916,   205,     0,   206,   207,   917,   209,     0,
     210,     0,   211,   212,  1726,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   918,   919,   222,     0,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   920,   921,     0,   922,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,     0,  1727,   263,   264,   265,   266,     0,   267,
     268,   269,   923,   924,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   925,   295,
     926,   297,   298,   299,   300,   927,   301,   302,   303,   304,
     928,   929,   306,   930,   308,   309,   310,     0,   311,   312,
       0,     0,   931,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   932,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   933,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   934,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,   370,   371,   372,   373,
     935,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   936,   392,
     393,   394,   395,   396,   397,   398,   399,   937,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   938,   417,     0,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,     0,   939,   940,
       0,  1728,   429,   430,   941,   432,   942,   943,   434,   435,
     944,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,   945,     0,   448,   449,   450,   451,   452,
     453,   946,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   947,     0,     0,     0,
       0,     0,     0,   948,   949,     0,     0,     0,     0,     0,
     951,     0,   952,     0,     0,     0,     0,   953,     0,   954,
     955,    93,   888,   583,   889,   890,   891,   892,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,  -608,   102,   103,
     104,     0,     0,     0,  -608,   894,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,   114,   895,
     116,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,   903,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   904,   905,
     906,   907,   908,   909,   910,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,   913,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   918,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,   295,   926,   297,   298,   299,   300,
     927,   301,   302,   303,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,   373,   935,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   936,   392,   393,   394,   395,   396,   397,
     398,   399,   937,   401,  -608,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   938,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,   944,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   945,     0,
     448,   449,   450,   451,   452,   453,   946,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   947,     0,     0,     0,     0,     0,     0,   948,   949,
       0,     0,     0,     0,     0,   951,     0,   952,     0,     0,
       0,     0,   953,     0,   954,   955,    93,   888,   583,   889,
     890,   891,   892,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,  1467,   102,   103,   104,     0,     0,     0,     0,
     894,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   895,   116,   896,   897,     0,   119,
     120,   121,   122,   123,   124,   898,   899,   125,   126,   900,
     901,   129,     0,   130,   131,   132,   133,   902,     0,   903,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   904,   905,   906,   907,   908,   909,   910,
     161,   162,   163,   164,   165,   166,   167,   911,   912,   170,
     913,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   717,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   914,   199,   200,   201,   202,
     203,   915,   916,   205,     0,   206,   207,   917,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   918,   919,   222,     0,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   920,   921,     0,   922,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,     0,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   923,   924,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   925,   295,
     926,   297,   298,   299,   300,   927,   301,   302,   303,   304,
     928,   929,   306,   930,   308,   309,   310,     0,   311,   312,
       0,     0,   931,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   932,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   933,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   934,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,   370,   371,   372,   373,
     935,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   936,   392,
     393,   394,   395,   396,   397,   398,   399,   937,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   938,   417,     0,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,     0,   939,   940,
       0,     0,   429,   430,   941,   432,   942,   943,   434,   435,
     944,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,   945,     0,   448,   449,   450,   451,   452,
     453,   946,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   947,     0,     0,     0,
       0,     0,     0,   948,   949,  1468,     0,     0,     0,     0,
     951,     0,   952,     0,     0,     0,     0,   953,     0,   954,
     955,    93,   888,   583,   889,   890,   891,   892,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,  2796,   102,   103,
     104,     0,     0,     0,     0,   894,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,   114,   895,
     116,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,   903,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,  2797,   155,   904,   905,
     906,   907,   908,   909,   910,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,   913,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,  2798,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,   295,   926,   297,   298,   299,   300,
     927,   301,   302,   303,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,  2799,   935,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   936,   392,   393,   394,   395,   396,   397,
     398,   399,   937,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   938,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,   944,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   945,     0,
     448,   449,   450,   451,   452,   453,   946,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   947,     0,     0,     0,     0,     0,     0,   948,   949,
    2800,     0,     0,     0,     0,   951,     0,  2801,     0,     0,
       0,     0,   953,     0,   954,   955,    93,   888,   583,   889,
     890,   891,   892,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     894,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   895,   116,   896,   897,     0,   119,
     120,   121,   122,   123,   124,   898,   899,   125,   126,   900,
     901,   129,     0,   130,   131,   132,   133,   902,     0,   903,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   904,   905,   906,   907,   908,   909,   910,
     161,   162,   163,   164,   165,   166,   167,   911,   912,   170,
     913,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   717,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   914,   199,   200,   201,   202,
     203,   915,   916,   205,     0,   206,   207,   917,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   918,   919,   222,     0,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   920,   921,     0,   922,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,     0,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   923,   924,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   925,   295,
     926,   297,   298,   299,   300,   927,   301,   302,   303,   304,
     928,   929,   306,   930,   308,   309,   310,     0,   311,   312,
       0,     0,   931,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   932,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   933,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   934,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,   370,   371,   372,   373,
     935,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   936,   392,
     393,   394,   395,   396,   397,   398,   399,   937,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   938,   417,     0,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,     0,   939,   940,
       0,     0,   429,   430,   941,   432,   942,   943,   434,   435,
     944,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,   945,     0,   448,   449,   450,   451,   452,
     453,   946,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   947,     0,     0,     0,
       0,     0,     0,   948,   949,   950,     0,     0,     0,     0,
     951,     0,   952,     0,     0,     0,     0,   953,     0,   954,
     955,    93,  1481,   583,   889,   890,   891,  1482,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,  1483,   102,   103,
     104,     0,     0,     0,     0,   894,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,   114,   895,
     116,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,   903,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   904,   905,
     906,   907,   908,   909,   910,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,   913,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   918,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,   295,   926,   297,   298,   299,   300,
     927,   301,   302,   303,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,   373,   935,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   936,   392,   393,   394,   395,   396,   397,
     398,   399,   937,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   938,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,   944,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   945,     0,
     448,   449,   450,   451,   452,   453,   946,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   947,     0,     0,     0,     0,     0,     0,   948,   949,
       0,     0,     0,     0,     0,   951,     0,   952,     0,     0,
       0,     0,   953,     0,   954,   955,    93,   888,   583,   889,
     890,   891,   892,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     894,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   895,   116,   896,   897,     0,   119,
     120,   121,   122,   123,   124,   898,   899,   125,   126,   900,
     901,   129,     0,   130,   131,   132,   133,   902,     0,   903,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   904,   905,   906,   907,   908,   909,   910,
     161,   162,   163,   164,   165,   166,   167,   911,   912,   170,
     913,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   717,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   914,   199,   200,   201,   202,
     203,   915,   916,   205,     0,   206,   207,   917,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   918,   919,   222,     0,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   920,   921,     0,   922,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,     0,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   923,   924,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   925,   295,
     926,   297,   298,   299,   300,   927,   301,   302,   303,   304,
     928,   929,   306,   930,   308,   309,   310,     0,   311,   312,
       0,     0,   931,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   932,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   933,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   934,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,   370,   371,   372,   373,
     935,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   936,   392,
     393,   394,   395,   396,   397,   398,   399,   937,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   938,   417,     0,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,     0,   939,   940,
       0,     0,   429,   430,   941,   432,   942,   943,   434,   435,
     944,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,   945,     0,   448,   449,   450,   451,   452,
     453,   946,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   947,     0,     0,     0,
       0,     0,     0,   948,   949,     0,     0,     0,     0,     0,
     951,     0,   952,  1719,     0,     0,     0,   953,     0,   954,
     955,  1085,   888,   583,   889,   890,   891,   892,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,   894,     0,     0,   105,   106,
       0,   107,   108,   109,  1087,   111,   112,   113,   114,   895,
    1088,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,  1089,     0,   136,   137,   138,   139,
     140,   141,  1090,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,  1091,   153,   154,   155,  1092,  1093,
    1094,  1095,   908,   909,  1096,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,   913,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,  1098,     0,
    1099,   214,   215,  1100,  1101,   218,     0,   219,     0,   918,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
    1102,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,  1103,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,  1104,  1105,   255,
    1106,   257,   258,   259,   260,   261,   262,     0,     0,   263,
    1107,   265,  1108,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,  1109,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,  1110,   926,   297,   298,   299,   300,
     927,   301,   302,  1111,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,  1112,   319,  1113,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,  1114,   371,   372,   373,   935,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1115,   392,   393,   394,   395,   396,  1116,
     398,   399,   937,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,  1117,   415,   938,
     417,     0,   418,   419,     0,   420,  1118,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,  1119,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,  1120,     0,
     448,   449,   450,   451,   452,   453,   946,  1943,   455,  1122,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   947,     0,     0,     0,     0,     0,     0,   948,   949,
       0,     0,     0,     0,     0,   951,     0,   952,     0,     0,
       0,     0,   953,     0,   954,   955,  1085,   888,   583,   889,
     890,   891,   892,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     894,     0,     0,   105,   106,     0,   107,   108,   109,  1087,
     111,   112,   113,   114,   895,  1088,   896,   897,     0,   119,
     120,   121,   122,   123,   124,   898,   899,   125,   126,   900,
     901,   129,     0,   130,   131,   132,   133,   902,     0,  1089,
       0,   136,   137,   138,   139,   140,   141,  1090,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,  1091,
     153,   154,   155,  1092,  1093,  1094,  1095,   908,   909,  1096,
     161,   162,   163,   164,   165,   166,   167,   911,   912,   170,
     913,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   717,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   914,   199,   200,   201,   202,
     203,   915,   916,   205,     0,   206,   207,   917,   209,     0,
     210,     0,   211,  1098,     0,  1099,   214,   215,  1100,  1101,
     218,     0,   219,     0,   918,   919,   222,     0,   223,   224,
     225,   226,   227,   228,   229,  1102,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,  1103,
     243,   244,   245,   246,   247,   248,   920,   921,     0,   922,
       0,   252,  1104,  1105,   255,  1106,   257,   258,   259,   260,
     261,   262,     0,     0,   263,  1107,   265,  1108,     0,   267,
     268,   269,   923,   924,   270,   271,   272,   273,   274,  1109,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   925,  1110,
     926,   297,   298,   299,   300,   927,   301,   302,  1111,   304,
     928,   929,   306,   930,   308,   309,   310,     0,   311,   312,
       0,     0,   931,   314,   315,     0,     0,   316,   317,  1112,
     319,  1113,   932,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   933,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   934,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,  1114,   371,   372,   373,
     935,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,  1115,   392,
     393,   394,   395,   396,  1116,   398,   399,   937,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,  1117,   415,   938,   417,     0,   418,   419,     0,
     420,  1118,   422,   423,   424,   425,   426,     0,   939,   940,
       0,     0,   429,   430,   941,   432,   942,   943,   434,   435,
    1119,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,  1120,     0,   448,   449,   450,   451,   452,
     453,   946,     0,   455,  1122,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   947,     0,     0,     0,
       0,     0,     0,   948,   949,     0,     0,     0,     0,     0,
     951,     0,   952,  1986,     0,     0,     0,   953,     0,   954,
     955,    93,   888,   583,   889,   890,   891,   892,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,   894,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,   114,   895,
     116,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,   903,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   904,   905,
     906,   907,   908,   909,   910,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,   913,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,   212,  1726,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   918,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,   295,   926,   297,   298,   299,   300,
     927,   301,   302,   303,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,   373,   935,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   936,   392,   393,   394,   395,   396,   397,
     398,   399,   937,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   938,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,   944,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   945,     0,
     448,   449,   450,   451,   452,   453,   946,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   947,     0,     0,     0,     0,     0,     0,   948,   949,
       0,     0,     0,     0,     0,   951,     0,   952,     0,     0,
       0,     0,   953,     0,   954,   955,    93,   888,   583,   889,
     890,   891,   892,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     894,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   895,   116,   896,   897,     0,   119,
     120,   121,   122,   123,   124,   898,   899,   125,   126,   900,
     901,   129,     0,   130,   131,   132,   133,   902,     0,   903,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   904,   905,   906,   907,   908,   909,   910,
     161,   162,   163,   164,   165,   166,   167,   911,   912,   170,
     913,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   717,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   914,   199,   200,   201,   202,
     203,   915,   916,   205,     0,   206,   207,   917,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   918,   919,   222,     0,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   920,   921,     0,   922,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,     0,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   923,   924,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   925,   295,
     926,   297,   298,   299,   300,   927,   301,   302,   303,   304,
     928,   929,   306,   930,   308,   309,   310,     0,   311,   312,
       0,     0,   931,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   932,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   933,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   934,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,   370,   371,   372,   373,
     935,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   936,   392,
     393,   394,   395,   396,   397,   398,   399,   937,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   938,   417,     0,   418,   419,  2291,
     420,   421,   422,   423,   424,   425,   426,     0,   939,   940,
       0,     0,   429,   430,   941,   432,   942,   943,   434,   435,
     944,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,   945,     0,   448,   449,   450,   451,   452,
     453,   946,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   947,     0,     0,     0,
       0,     0,     0,   948,   949,     0,     0,     0,     0,     0,
     951,     0,   952,     0,     0,     0,     0,   953,     0,   954,
     955,    93,   888,   583,   889,   890,   891,   892,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,   894,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,   114,   895,
     116,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,   903,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   904,   905,
     906,   907,   908,   909,   910,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,   913,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   918,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,   295,   926,   297,   298,   299,   300,
     927,   301,   302,   303,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,   373,   935,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   936,   392,   393,   394,   395,   396,   397,
     398,   399,   937,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   938,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,   944,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   945,     0,
     448,   449,   450,   451,   452,   453,   946,     0,   455,   456,
     457,   458,   459,   460,   461,     0,  2383,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   947,     0,     0,     0,     0,     0,     0,   948,   949,
       0,     0,     0,     0,     0,   951,     0,   952,     0,     0,
       0,     0,   953,     0,   954,   955,    93,   888,   583,   889,
     890,   891,   892,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     894,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   895,   116,   896,   897,     0,   119,
     120,   121,   122,   123,   124,   898,   899,   125,   126,   900,
     901,   129,     0,   130,   131,   132,   133,   902,     0,   903,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   904,   905,   906,   907,   908,   909,   910,
     161,   162,   163,   164,   165,   166,   167,   911,   912,   170,
     913,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   717,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   914,   199,   200,   201,   202,
     203,   915,   916,   205,     0,   206,   207,   917,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   918,   919,   222,     0,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   920,   921,     0,   922,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,     0,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   923,   924,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   925,   295,
     926,   297,   298,   299,   300,   927,   301,   302,   303,   304,
     928,   929,   306,   930,   308,   309,   310,     0,   311,   312,
       0,     0,   931,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   932,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   933,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   934,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,   370,   371,   372,   373,
     935,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   936,   392,
     393,   394,   395,   396,   397,   398,   399,   937,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   938,   417,     0,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,     0,   939,   940,
       0,     0,   429,   430,   941,   432,   942,   943,   434,   435,
     944,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,   945,     0,   448,   449,   450,   451,   452,
     453,   946,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   947,     0,     0,     0,
       0,     0,     0,   948,   949,     0,     0,     0,     0,     0,
     951,     0,   952,     0,     0,     0,     0,   953,     0,   954,
     955,  1085,   888,   583,   889,   890,   891,   892,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,   894,     0,     0,   105,   106,
       0,   107,   108,   109,  1087,   111,   112,   113,   114,   895,
    1088,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,  1089,     0,   136,   137,   138,   139,
     140,   141,  1090,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,  1091,   153,   154,   155,  1092,  1093,
    1094,  1095,   908,   909,  1096,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,   913,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,  1098,     0,
    1099,   214,   215,  1100,  1101,   218,     0,   219,     0,   918,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
    1102,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,  1103,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,  1104,  1105,   255,
    1106,   257,   258,   259,   260,   261,   262,     0,     0,   263,
    1107,   265,  1108,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,  1109,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,  1110,   926,   297,   298,   299,   300,
     927,   301,   302,  1111,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,  1112,   319,  1113,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,  1114,   371,   372,   373,   935,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1115,   392,   393,   394,   395,   396,  1116,
     398,   399,   937,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,  1117,   415,   938,
     417,     0,   418,   419,     0,   420,  1118,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,  1119,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,  1120,     0,
     448,   449,   450,   451,   452,   453,   946,     0,   455,  1122,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   947,     0,     0,     0,     0,     0,     0,   948,   949,
       0,     0,     0,     0,     0,   951,     0,   952,     0,     0,
       0,     0,   953,     0,   954,   955,    93,   888,   583,   889,
     890,   891,   892,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     894,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   895,   116,   896,   897,     0,   119,
     120,   121,   122,   123,   124,   898,   899,   125,   126,   900,
     901,   129,     0,   130,   131,   132,   133,   902,     0,   903,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   904,   905,   906,   907,   908,   909,   910,
     161,   162,   163,   164,   165,   166,   167,   911,   912,   170,
     913,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   717,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   914,   199,   200,   201,   202,
     203,   915,   916,   205,     0,   206,   207,   917,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   918,   919,   222,     0,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   920,   921,     0,   922,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,     0,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   923,   924,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   925,   295,
     926,   297,   298,   299,   300,   927,   301,   302,   303,   304,
     928,   929,   306,   930,   308,   309,   310,     0,   311,   312,
       0,     0,   931,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   932,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   933,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   934,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,   370,   371,   372,   373,
     935,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   936,   392,
     393,   394,   395,   396,   397,   398,   399,   937,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   938,   417,     0,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,     0,   939,   940,
       0,     0,   429,   430,   941,   432,   942,   943,   434,   435,
     944,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,   945,     0,   448,   449,   450,   451,   452,
     453,   946,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   947,     0,     0,     0,
       0,     0,     0,  1486,  1487,     0,     0,     0,     0,     0,
     951,     0,   952,     0,     0,     0,     0,   953,     0,   954,
     955,    93,  1867,   583,   889,   890,   891,   892,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,   894,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,   114,   895,
     116,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,   903,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   904,   905,
     906,   907,   908,   909,   910,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,   913,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   918,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,   295,   926,   297,   298,   299,   300,
     927,   301,   302,   303,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,   373,   935,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   936,   392,   393,   394,   395,   396,   397,
     398,   399,   937,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   938,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,   944,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   945,     0,
     448,   449,   450,   451,   452,   453,   946,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   947,     0,     0,     0,     0,     0,     0,   948,   949,
       0,     0,     0,     0,     0,   951,     0,   952,     0,     0,
       0,     0,   953,     0,   954,   955,    93,   888,   583,   889,
     890,   891,   892,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     894,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   895,   116,   896,   897,     0,   119,
     120,   121,   122,   123,   124,   898,   899,   125,   126,   900,
     901,   129,     0,   130,   131,   132,   133,   902,     0,   903,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
     153,   154,   155,   904,   905,   906,   907,   908,   909,   910,
     161,   162,   163,   164,   165,   166,   167,   911,   912,   170,
     913,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   717,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   914,   199,   200,   201,   202,
     203,   915,   916,   205,     0,   206,   207,   917,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   918,   919,   222,     0,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   920,   921,     0,   922,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,     0,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   923,   924,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   925,   295,
     926,   297,   298,   299,   300,   927,   301,   302,   303,   304,
     928,   929,   306,   930,   308,   309,   310,     0,   311,   312,
       0,     0,   931,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   932,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   933,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   934,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,   370,   371,   372,   373,
     935,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   936,   392,
     393,   394,   395,   396,   397,   398,   399,   937,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   938,   417,     0,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,     0,   939,   940,
       0,     0,   429,   430,   941,   432,   942,   943,   434,   435,
     944,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,   945,     0,   448,   449,   450,   451,   452,
     453,   946,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   947,     0,     0,     0,
       0,     0,     0,   948,   949,     0,     0,     0,     0,     0,
     951,     0,  2098,     0,     0,     0,     0,   953,     0,   954,
     955,    93,   888,   583,   889,   890,   891,   892,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,   894,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,   114,   895,
     116,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,   903,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,  2797,   155,   904,   905,
     906,   907,   908,   909,   910,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,   913,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,  2798,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,   295,   926,   297,   298,   299,   300,
     927,   301,   302,   303,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,  2799,   935,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   936,   392,   393,   394,   395,   396,   397,
     398,   399,   937,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   938,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,   944,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   945,     0,
     448,   449,   450,   451,   452,   453,   946,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   947,     0,     0,     0,     0,     0,     0,   948,   949,
       0,     0,     0,     0,     0,   951,     0,  2801,     0,     0,
       0,     0,   953,     0,   954,   955,    93,   888,   583,   889,
     890,   891,   892,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     894,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,  3055,   895,   116,   896,   897,     0,   119,
     120,   121,   122,   123,   124,   898,   899,   125,   126,   900,
     901,   129,     0,   130,   131,   132,   133,   902,     0,   903,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
     153,   154,  3056,   904,   905,   906,   907,   908,   909,   910,
     161,   162,   163,   164,   165,   166,   167,   911,   912,   170,
     913,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   717,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   914,   199,   200,   201,   202,
     203,   915,   916,   205,     0,   206,   207,   917,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   219,     0,   918,   919,   222,     0,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   920,   921,     0,   922,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,     0,     0,   263,   264,   265,   266,     0,   267,
     268,   269,   923,   924,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   925,   295,
     926,   297,   298,   299,   300,   927,   301,   302,   303,   304,
     928,   929,   306,   930,   308,   309,   310,     0,   311,   312,
       0,     0,   931,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   932,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   933,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   934,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,   370,   371,   372,   373,
     935,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   936,   392,
     393,   394,   395,   396,   397,   398,   399,   937,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   938,   417,     0,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,     0,   939,   940,
       0,     0,   429,   430,   941,   432,   942,   943,   434,   435,
     944,   437,   438,  3057,   440,   441,     0,     0,   442,   443,
     444,   445,   446,   945,     0,   448,   449,   450,   451,   452,
     453,   946,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   947,     0,     0,     0,
       0,     0,     0,   948,   949,     0,     0,     0,     0,     0,
     951,     0,   952,     0,     0,     0,     0,   953,     0,   954,
     955,    93,   888,   583,   889,   890,   891,   892,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,   894,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,   114,   895,
     116,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,   903,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,   154,  3056,   904,   905,
     906,   907,   908,   909,   910,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,   913,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   918,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,   295,   926,   297,   298,   299,   300,
     927,   301,   302,   303,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,   373,   935,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   936,   392,   393,   394,   395,   396,   397,
     398,   399,   937,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   938,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,   944,   437,   438,  3057,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   945,     0,
     448,   449,   450,   451,   452,   453,   946,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   947,     0,     0,     0,     0,     0,     0,   948,   949,
       0,     0,     0,     0,     0,   951,     0,   952,     0,     0,
       0,     0,   953,     0,   954,   955,    93,   888,   583,   889,
     890,   891,   892,   893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     894,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113, -1846,   895,   116,   896,   897,     0,   119,
     120,   121,   122,   123,   124,   898,   899,   125,   126,   900,
     901,   129,     0,   130,   131,   132,   133,   902,     0,   903,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
     153,   154,  3056,   904,   905,   906,   907,   908,   909,   910,
     161,   162,   163,   164,   165,   166,   167,   911,   912,   170,
     913,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   717,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   914,   199,   200,   201,   202,
     203,   915,   916,   205,     0,   206,   207,   917,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216, -1846,
     218,     0,   219,     0,   918,   919,   222,     0,   223,   224,
     225,   226,   227,   228,   229, -1846,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   920,   921,     0,   922,
       0,   252,     0,     0,   255,   256,   257,   258,   259,   260,
     261,   262,     0,     0,   263,   264,   265, -1846,     0,   267,
     268,   269,   923,   924,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   925,   295,
     926,   297,   298,   299,   300,     0,   301,   302,     0,   304,
     928,   929,   306,   930,   308,   309,   310,     0,   311,   312,
       0,     0,   931,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   932,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   933,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   934,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,   370,   371,   372,   373,
     935,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   936,   392,
     393,   394,   395,   396, -1846,   398,   399,   937,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   938,   417,     0,   418,   419,     0,
     420,   421,   422,   423,   424,   425,   426,     0,   939,   940,
       0,     0,   429,   430,   941,   432,   942,   943,   434,   435,
     944,   437,   438,  3057,   440,   441,     0,     0,   442,   443,
     444,   445,   446,   945,     0,   448,   449,   450,   451,   452,
     453,   946,     0,   455,   456,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483, -1846,     0,     0,     0,
       0,     0,     0,   948,   949,     0,     0,     0,     0,     0,
     951,     0,   952,     0,     0,     0,     0,   953,     0,   954,
     955,    93,   888,   583,   889,   890,   891,   892,   893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,   114,   895,
     116,   896,   897,     0,   119,   120,   121,   122,   123,   124,
     898,   899,   125,   126,   900,   901,   129,     0,   130,   131,
     132,   133,   902,     0,   903,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   904,   905,
     906,   907,   908,   909,   910,   161,   162,   163,   164,   165,
     166,   167,   911,   912,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     914,   199,   200,   201,   202,   203,   915,   916,   205,     0,
     206,   207,   917,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   918,
     919,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   920,   921,     0,   922,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   923,   924,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   925,   295,   926,   297,   298,   299,   300,
       0,   301,   302,   303,   304,   928,   929,   306,   930,   308,
     309,   310,     0,   311,   312,     0,     0,   931,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   932,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   933,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   934,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   936,   392,   393,   394,   395,   396,   397,
     398,   399,   937,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   938,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   939,   940,     0,     0,   429,   430,   941,
     432,   942,   943,   434,   435,   944,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   945,     0,
     448,   449,   450,   451,   452,   453,   946,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     0,     0,     0,     0,     0,     0,     0,  1712,  1713,
       0,     0,    93,   888,   583,   889,   890,  1714,   892,   893,
       0,     0,     0,     0,   954,   955,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     895,   116,   896,   897,     0,   119,   120,   121,   122,   123,
     124,   898,   899,   125,   126,   900,   901,   129,     0,   130,
     131,   132,   133,   902,     0,   903,     0,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   904,
     905,   906,   907,   908,   909,   910,   161,   162,   163,   164,
     165,   166,   167,   911,   912,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   717,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   914,   199,   200,   201,   202,   203,   915,   916,   205,
       0,   206,   207,   917,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     918,   919,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,   920,   921,     0,   922,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,     0,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   923,   924,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   925,   295,   926,   297,   298,   299,
     300,     0,   301,   302,   303,   304,   928,   929,   306,   930,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,   318,   319,   320,   932,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   933,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     934,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,   370,   371,   372,   373,  1853,  1854,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   936,   392,   393,   394,   395,   396,
     397,   398,   399,   937,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     938,   417,     0,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,     0,   939,   940,     0,     0,   429,   430,
     941,   432,   942,   943,   434,   435,   944,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,   945,
       0,   448,   449,   450,   451,   452,   453,   946,     0,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     0,     0,     0,     0,     0,     0,     0,  1855,
    1856,     0,     0,     0,     0,     0,     0,     0,  1714,     0,
       0,     0,     0,     0,     0,   954,   955,    93,   888,   583,
     889,   890,   891,   892,   893,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
     110,   111,   112,   113,   114,   895,   116,   896,   897,     0,
     119,   120,   121,   122,   123,   124,   898,   899,   125,   126,
     900,   901,   129,     0,   130,   131,   132,   133,   902,     0,
     903,     0,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   904,   905,   906,   907,   908,   909,
     910,   161,   162,   163,   164,   165,   166,   167,   911,   912,
     170,     0,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     717,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   914,   199,   200,   201,
     202,   203,   915,   916,   205,     0,   206,   207,   917,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   918,   919,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   920,   921,     0,
     922,     0,   252,     0,   254,   255,   256,   257,   258,   259,
     260,   261,   262,     0,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   923,   924,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   925,
     295,   926,   297,   298,   299,   300,     0,   301,   302,   303,
     304,   928,   929,   306,   930,   308,   309,   310,     0,   311,
     312,     0,     0,   931,   314,   315,     0,     0,   316,   317,
     318,   319,   320,   932,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   933,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   934,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   936,
     392,   393,   394,   395,   396,   397,   398,   399,   937,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   938,   417,     0,   418,   419,
       0,   420,   421,   422,   423,   424,   425,   426,     0,   939,
     940,     0,     0,   429,   430,   941,   432,   942,   943,   434,
     435,   944,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,   945,     0,   448,   449,   450,   451,
     452,   453,   946,     0,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,     0,  1712,  1713,     0,     0,     0,     0,
       0,     0,     0,  1714,     0,     0,     0,     0,     0,     0,
     954,   955,    93,   888,   583,   889,   890,   891,   892,   893,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,   894,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,     0,
     895,   116,   896,   897,     0,   119,   120,   121,   122,   123,
     124,   898,   899,   125,   126,   900,   901,   129,     0,   130,
     131,   132,   133,   902,     0,   903,     0,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   904,
     905,   906,   907,   908,   909,   910,   161,   162,   163,   164,
     165,   166,   167,   911,   912,   170,   913,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   717,   186,   187,     0,   188,
     189,   190,     0,   191,     0,   193,     0,   194,   195,   196,
     197,   914,   199,   200,   201,   202,   203,   915,   916,   205,
       0,   206,   207,   917,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,     0,   218,     0,   219,     0,
     918,   919,   222,     0,   223,   224,   225,   226,   227,   228,
     229,     0,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,   920,   921,     0,   922,     0,   252,     0,     0,
     255,   256,   257,   258,   259,   260,   261,   262,     0,     0,
     263,   264,   265,     0,     0,   267,   268,   269,   923,   924,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   925,   295,   926,   297,   298,   299,
     300,     0,   301,   302,     0,   304,   928,   929,   306,   930,
     308,   309,   310,     0,   311,   312,     0,     0,   931,   314,
     315,     0,     0,   316,   317,   318,   319,   320,   932,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   933,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     934,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,   370,   371,   372,   373,   935,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   936,   392,   393,   394,   395,   396,
       0,   398,   399,   937,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     938,   417,     0,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,     0,   939,   940,     0,     0,   429,   430,
     941,   432,   942,   943,   434,   435,   944,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,   945,
       0,   448,   449,   450,   451,   452,   453,   946,     0,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     0,     0,     0,     0,     0,     0,     0,   948,
     949,   699,     0,     0,     0,     0,   951,     0,   952,     0,
       0,     0,     0,   953,     0,   954,   955,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,   700,   111,   112,   113,     0,   701,
     702,   703,   704,     0,   119,   120,   121,   122,   123,   124,
       0,     0,   125,   126,   705,   706,   129,     0,   130,   131,
     132,   133,     0,     0,   707,     0,   136,   137,   138,   139,
     140,   141,   708,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   709,   153,   154,   155,   710,   711,
     712,   713,     0,     0,   714,   161,   162,   163,   164,   165,
     166,   167,   715,   716,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   717,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
       0,   199,   200,   201,   202,   203,     0,     0,   205,     0,
     206,   207,   718,   209,     0,   210,     0,   211,   719,     0,
     720,   214,   215,     0,   721,   218,     0,   219,     0,     0,
       0,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     723,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   724,     0,   244,   245,   246,   247,
     248,   725,   726,     0,   727,     0,   252,   728,   729,   255,
     730,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     731,   265,   732,     0,   267,   268,   269,     0,     0,   270,
     271,   272,   273,   274,   733,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   734,   735,   736,   297,   298,   299,     0,
       0,   301,   302,   737,   304,     0,     0,   306,   738,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,   739,   319,   740,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,     0,   335,   336,     0,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   741,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   742,   371,   372,   373,   743,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   744,   392,   745,   394,   395,   396,   746,
     398,   399,   747,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   748,   415,     0,
     417,     0,   418,   419,     0,   420,   749,   422,   423,   424,
     425,   426,     0,   750,   751,     0,     0,   429,   430,     0,
     432,     0,     0,   434,   435,   752,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   753,     0,
     448,   449,   450,   451,   452,     0,   754,     0,   455,   755,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,     0,   507,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   480,   481,   482,
     483,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,  -928,     0,
       0,  -928,  2401,     0,   105,   106,     0,   107,   108,   109,
       0,   111,   112,   113,   114,   115,     0,   117,   118,     0,
     119,   120,   121,   122,   123,   124,     0,     0,   125,   126,
     127,   128,   129,     0,   130,   131,   132,   133,   134,     0,
       0,     0,   136,   137,   138,   139,   140,   141,     0,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
    -275,   153,   154,   155,     0,     0,     0,     0,     0,     0,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,  -275,   214,   215,   510,
       0,   218,     0,   219,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   228,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
    -275,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,  -275,   257,   258,   259,
     260,   261,   262,     0,     0,   263,  -275,   265,     0,     0,
     267,   268,   269,     0,     0,   270,   271,   272,   273,   274,
     511,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
    -275,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,  -275,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,     0,
     392,   393,   394,   395,   396,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   513,   415,   416,   417,     0,   418,   419,
       0,   420,  -275,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,     0,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    93,     0,   508,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1017,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,   122,   123,   124,     0,   899,   125,   126,
     127,   128,   129,     0,   130,   131,   132,   133,   902,     0,
     903,     0,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   904,   905,   906,   907,   908,   909,
     910,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   915,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,  2144,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   923,   924,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
     304,     0,   929,   306,   307,   308,   309,   310,     0,   311,
     312,     0,   615,   313,   314,   315,     0,     0,   316,   317,
     318,   319,   320,   932,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   933,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,   370,   371,   372,
     373,   374,  2145,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    26,   386,   387,   388,   389,   390,   936,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   938,   417,     0,   418,   419,
      31,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   941,   432,   942,     0,   434,
     435,   944,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,   945,     0,   448,   449,   450,   451,
     452,   611,   454,     0,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,     0,    34,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     0,     0,    35,
     785,  1307,   583,     0,     0,     0,   892,     0,     0,     0,
       0,     0,     0,  2146,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,   786,   111,   112,   113,   787,   788,   789,
     790,   791,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   792,   793,   129,     0,   130,   131,   132,
     133,   794,     0,   795,     0,   136,   137,   138,   139,   140,
     141,   796,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   797,   153,   154,   155,   798,   799,   800,
     801,     0,     0,   802,   161,   162,   163,   164,   165,   166,
     167,   803,   804,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   805,
     199,   200,   201,   202,   203,   806,  1308,   205,     0,   206,
     207,   807,   209,     0,   210,     0,   211,   808,     0,   809,
     214,   215,   810,   811,   218,     0,   219,     0,   812,   813,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   814,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   815,   816,   244,   245,   246,   247,   248,
     817,   818,     0,   819,     0,   252,   820,   821,   255,   822,
     257,   258,   259,   260,   261,   262,     0,     0,   263,   823,
     265,   824,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   825,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   826,   827,   828,   297,   298,   299,   829,     0,
     301,   302,   830,   304,     0,   831,   306,   832,   308,   309,
     310,     0,   311,   312,  1309,     0,   313,   314,   315,     0,
       0,   316,   833,   834,   319,   835,   836,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     837,   335,   336,   838,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   839,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
     840,   371,   372,   373,   841,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   842,   392,   843,   394,   395,   396,   844,   398,
     399,   845,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   846,   415,   847,   417,
       0,   418,   419,     0,   420,   848,   422,   423,   424,   425,
     426,     0,   849,   850,     0,     0,   429,   430,   851,   432,
     852,  1310,   434,   435,   853,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,   854,     0,   448,
     449,   450,   451,   452,  1202,   856,     0,   455,   857,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   858,   859,   860,   861,   862,
     863,   864,   865,   866,   867,   868,   480,   481,   482,   483,
      93,     0,   508,     0,     0,     0,     0,  1311,  1312,  2022,
       0,     0,     0,     0,     0,     0,  2023,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
     899,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   902,     0,   903,     0,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   904,   905,   906,
     907,   908,   909,   910,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   915,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,  2144,     0,   263,   264,
     265,   266,     0,   267,   268,   269,   923,   924,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,     0,
     301,   302,   303,   304,     0,   929,   306,   307,   308,   309,
     310,     0,   311,   312,     0,   615,   313,   314,   315,     0,
       0,   316,   317,   318,   319,   320,   932,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     933,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
     370,   371,   372,   373,   374,  2145,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   936,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   938,   417,
       0,   418,   419,     0,   420,   421,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   941,   432,
     942,     0,   434,   435,   944,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,   945,     0,   448,
     449,   450,   451,   452,   611,   454,     0,   455,   456,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     785,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2146,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       3,     4,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,   786,   111,   112,   113,   787,   788,   789,
     790,   791,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   792,   793,   129,     0,   130,   131,   132,
     133,   794,     0,   795,     0,   136,   137,   138,   139,   140,
     141,   796,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   797,   153,   154,   155,   798,   799,   800,
     801,     0,     0,   802,   161,   162,   163,   164,   165,   166,
     167,   803,   804,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   805,
     199,   200,   201,   202,   203,   806,     0,   205,     0,   206,
     207,   807,   209,     0,   210,     0,   211,   808,     0,   809,
     214,   215,   810,   811,   218,     0,   219,     0,   812,   813,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   814,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   815,   816,   244,   245,   246,   247,   248,
     817,   818,     0,   819,     0,   252,   820,   821,   255,   822,
     257,   258,   259,   260,   261,   262,     0,     0,   263,   823,
     265,   824,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   825,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   826,   827,   828,   297,   298,   299,   829,     0,
     301,   302,   830,   304,     0,   831,   306,   832,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   833,   834,   319,   835,   836,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     837,   335,   336,   838,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   839,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
     840,   371,   372,   373,   841,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    26,   386,   387,   388,
     389,   390,   842,   392,   843,   394,   395,   396,   844,   398,
     399,   845,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   846,   415,   847,   417,
       0,   418,   419,    31,   420,   848,   422,   423,   424,   425,
     426,     0,   849,   850,     0,     0,   429,   430,   851,   432,
     852,     0,   434,   435,   853,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,   854,     0,   448,
     449,   450,   451,   452,   855,   856,     0,   455,   857,   457,
     458,   459,   460,   461,     0,     0,   462,     0,    34,   463,
     464,   465,   466,   467,   468,   858,   859,   860,   861,   862,
     863,   864,   865,   866,   867,   868,   480,   481,   482,   483,
      93,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
     899,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   902,     0,   903,     0,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   904,   905,   906,
     907,   908,   909,   910,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   915,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,     0,   263,   264,
     265,   266,     0,   267,   268,   269,   923,   924,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,     0,
     301,   302,   303,   304,     0,   929,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,   318,   319,   320,   932,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     933,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
     370,   371,   372,   373,   374,  2145,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   936,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   938,   417,
       0,   418,   419,     0,   420,   421,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   941,   432,
     942,     0,   434,   435,   944,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,   945,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,   456,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      93,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
     899,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   902,     0,   903,     0,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   904,   905,   906,
     907,   908,   909,   910,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   915,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,     0,   263,   264,
     265,   266,     0,   267,   268,   269,   923,   924,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,     0,
     301,   302,   303,   304,     0,   929,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,   318,   319,   320,   932,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     933,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   936,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   938,   417,
       0,   418,   419,     0,   420,   421,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   941,   432,
     942,     0,   434,   435,   944,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,   945,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,   456,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2818,     0,    94,    95,
      96,    97,    98,    99,   100,   101,   648,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
     141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
       0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,     0,     0,     0,
     214,   215,   510,     0,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   228,   229,     0,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,   255,     0,
     257,   258,   259,   260,   261,   262,     0,     0,   263,     0,
     265,     0,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   511,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,     0,   296,   297,   298,   299,   300,     0,
     301,   302,     0,   304,     0,   305,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,     0,   319,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    26,   386,   387,   388,
     389,   390,     0,   392,   393,   394,   395,   396,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   513,   415,   416,   417,
       0,   418,   419,    31,   420,     0,   422,   423,   424,   425,
     426,     0,   649,   428,     0,     0,   650,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,   452,   611,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,    34,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     507,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
     141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
       0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,     0,     0,     0,
     214,   215,   510,     0,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   228,   229,     0,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,   255,     0,
     257,   258,   259,   260,   261,   262,     0,     0,   263,     0,
     265,     0,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   511,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,     0,   296,   297,   298,   299,   300,     0,
     301,   302,     0,   304,     0,   305,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,     0,   319,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    26,   386,   387,   388,
     389,   390,     0,   392,   393,   394,   395,   396,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   513,   415,   416,   417,
       0,   418,   419,    31,   420,     0,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,   452,   611,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,    34,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       0,   507,    35,   508,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,   123,   124,
       0,     0,   125,   126,   127,   128,   129,     0,   130,   131,
     132,   133,   134,     0,     0,     0,   136,   137,   138,   139,
     140,   141,     0,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   153,   154,   155,     0,     0,
       0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   510,     0,   218,     0,   219,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,   262,     0,     0,   263,
       0,   265,     0,     0,   267,   268,   269,     0,     0,   270,
     271,   272,   273,   274,   511,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,     0,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,     0,   392,   393,   394,   395,   396,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   513,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,   452,   453,   454,     0,   455,     0,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   507,     0,   508,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   996,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,   123,   124,
       0,     0,   125,   126,   127,   128,   129,     0,   130,   131,
     132,   133,   134,     0,     0,     0,   136,   137,   138,   139,
     140,   141,     0,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   153,   154,   155,     0,     0,
       0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   510,     0,   218,     0,   219,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,   262,     0,     0,   263,
       0,   265,     0,     0,   267,   268,   269,     0,     0,   270,
     271,   272,   273,   274,   511,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,     0,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,     0,   392,   393,   394,   395,   396,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   513,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,   452,   453,   454,     0,   455,     0,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   507,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2658,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,   123,   124,
       0,     0,   125,   126,   127,   128,   129,     0,   130,   131,
     132,   133,   134,     0,     0,     0,   136,   137,   138,   139,
     140,   141,     0,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   153,   154,   155,     0,     0,
       0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   510,     0,   218,     0,   219,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,   262,     0,     0,   263,
       0,   265,     0,     0,   267,   268,   269,     0,     0,   270,
     271,   272,   273,   274,   511,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,     0,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,     0,   392,   393,   394,   395,   396,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   513,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,   452,   453,   454,     0,   455,     0,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   507,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1733,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,   123,   124,
       0,     0,   125,   126,   127,   128,   129,     0,   130,   131,
     132,   133,   134,     0,     0,     0,   136,   137,   138,   139,
     140,   141,     0,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   153,   154,   155,     0,     0,
       0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   510,     0,   218,     0,   219,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,   262,     0,     0,   263,
       0,   265,     0,     0,   267,   268,   269,     0,     0,   270,
     271,   272,   273,   274,   511,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,     0,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,     0,   392,   393,   394,   395,   396,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   513,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,   452,   453,   454,     0,   455,     0,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   507,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1839,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,   123,   124,
       0,     0,   125,   126,   127,   128,   129,     0,   130,   131,
     132,   133,   134,     0,     0,     0,   136,   137,   138,   139,
     140,   141,     0,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   153,   154,   155,     0,     0,
       0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   510,     0,   218,     0,   219,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,   262,     0,     0,   263,
       0,   265,     0,     0,   267,   268,   269,     0,     0,   270,
     271,   272,   273,   274,   511,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,     0,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,     0,   392,   393,   394,   395,   396,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   513,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,   452,   453,   454,     0,   455,     0,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     0,     0,  2507,  1307,   583,     0,     0,  1693,   892,
       0,     0,     0,     0,     0,  1694,     0,  2630,  1695,  1696,
    1697,    94,    95,    96,    97,    98,    99,   100,   101,  1135,
     102,   103,   104,  1136,  1137,  1138,  1139,  1140,  1141,  1142,
     105,   106,  1143,   107,   108,   109,  2508,   111,   112,   113,
       0,   701,  2509,   703,   704,  1144,   119,   120,   121,   122,
     123,   124,  1145,  1146,   125,   126,   705,   706,   129,  1147,
     130,   131,   132,   133,     0,  1148,  2510,  1149,   136,   137,
     138,   139,   140,   141,  2511,   143,   144,   145,  1150,   146,
     147,   148,   149,   150,   151,  1151,  2512,   153,   154,   155,
    2513,  2514,  2515,  2516,  1152,  1153,  2517,   161,   162,   163,
     164,   165,   166,   167,   715,   716,   170,  1154,   171,  1155,
     172,   173,   174,   175,   176,   177,  1156,   178,   179,   180,
     181,   182,  1157,  1158,   183,   184,   717,   186,   187,  1159,
     188,   189,   190,  1160,   191,   192,   193,  1161,   194,   195,
     196,   197,     0,   199,   200,   201,   202,   203,     0,  1162,
     205,  1163,   206,   207,   718,   209,  1164,   210,  1165,   211,
    2518,  1166,  2519,   214,   215,  2520,  2521,   218,  1167,   219,
    1168,     0,     0,   222,  1169,   223,   224,   225,   226,   227,
     228,   229,  2522,   231,   232,   233,   234,  1170,   235,   236,
     237,   238,   239,   240,  1171,   241,  2523,     0,   244,   245,
     246,   247,   248,   725,   726,  1172,   727,  1173,   252,  2524,
    2525,   255,  2526,   257,   258,   259,   260,   261,   262,  1174,
    1175,   263,  2527,   265,  2528,  1176,   267,   268,   269,  1177,
    1178,   270,   271,   272,   273,   274,  2529,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   734,  2530,   736,   297,   298,
     299,  2531,  1179,   301,   302,  2532,   304,  1180,     0,   306,
     738,   308,   309,   310,  1181,   311,   312,  1182,  1183,  2533,
     314,   315,  1184,  1185,   316,     0,  2534,   319,  2535,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1186,   332,   333,     0,   335,   336,     0,   338,   339,   340,
    1187,   341,   342,   343,   344,   345,   346,  1188,   347,   348,
     349,   741,   351,   352,   353,   354,  1189,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
    1190,   368,   369,  2536,   371,   372,   373,   743,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,  1191,
     386,   387,   388,   389,   390,  2537,   392,  2538,   394,   395,
     396,  2539,   398,   399,   747,   401,  1192,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,  2540,
     415,     0,   417,  1193,   418,   419,  1194,   420,  2541,   422,
     423,   424,   425,   426,  1195,   750,   751,  1196,  1197,   429,
     430,     0,   432,     0,  1198,   434,   435,  2542,   437,   438,
     439,   440,   441,  1199,  1200,   442,   443,   444,   445,   446,
    2543,  1201,   448,   449,   450,   451,   452,     0,   754,  1203,
     455,  2544,   457,   458,   459,   460,   461,  1204,  1205,   462,
    1206,  1207,   463,   464,   465,   466,   467,   468,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   480,
     481,   482,   483,     0,   507,     0,  1698,  1699,  1700,  1693,
    2545,  2546,  1703,  1704,  1705,  1706,  1694,     0,     0,  1695,
    1696,  1697,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,   123,   124,     0,     0,   125,   126,   127,   128,   129,
       0,   130,   131,   132,   133,   134,     0,     0,     0,   136,
     137,   138,   139,   140,   141,     0,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   153,   154,
     155,     0,     0,     0,     0,     0,     0,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   185,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
       0,   205,     0,   206,   207,   208,   209,     0,   210,     0,
     211,     0,     0,     0,   214,   215,   510,     0,   218,     0,
     219,     0,   220,   221,   222,     0,   223,   224,   225,   226,
     227,   228,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,     0,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,   255,     0,   257,   258,   259,   260,   261,   262,
       0,     0,   263,     0,   265,     0,     0,   267,   268,   269,
       0,     0,   270,   271,   272,   273,   274,   511,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,     0,   296,   297,
     298,   299,   300,     0,   301,   302,     0,   304,     0,   305,
     306,   307,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   317,     0,   319,     0,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,     0,   392,   393,   394,
     395,   396,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     513,   415,   416,   417,     0,   418,   419,     0,   420,     0,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     0,     0,     0,  1698,  1699,  1700,
       0,  1701,  1702,  1703,  1704,  1705,  1706,  1384,     0,     0,
    1385,     0,     0,     0,  1386,  1387,  1388,  1389,  1390,  1391,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1392,     0,  1384,     0,     0,  1385,
       0,     0,  1394,  1386,  1387,  1388,  1389,  1390,  1391,  1395,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1392,     0,     0,     0,     0,     0,     0,
       0,  1394,  1384,     0,  1396,  1385,     0,     0,  1395,  1386,
    1387,  1388,  1389,  1390,  1391,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1392,
       0,  1384,     0,  1396,  1385,     0,     0,  1394,  1386,  1387,
    1388,  1389,  1390,  1391,  1395,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1392,     0,
       0,     0,     0,     0,     0,     0,  1394,     0,     0,  1396,
       0,     0,     0,  1395,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1396,     0,
       0,     0,     0,     0,     0,  1397,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1398,     0,     0,     0,     0,  1399,     0,     0,  1384,
       0,     0,  1385,     0,  1397,     0,  1386,  1387,  1388,  1389,
    1390,  1391,     0,     0,     0,     0,     0,     0,  1400,  1401,
    1398,     0,     0,     0,     0,  1399,  1392,     0,     0,     0,
       0,     0,     0,  1402,  1394,     0,     0,     0,     0,     0,
    1397,  1395,     0,     0,     0,     0,     0,  1400,  1401,     0,
       0,     0,     0,     0,     0,     0,  1398,     0,     0,     0,
       0,  1399,  1402,     0,     0,     0,  1396,     0,     0,  1397,
       0,  1403,     0,     0,  1404,     0,     0,     0,     0,     0,
       0,     0,     0,  1400,  1401,  1398,     0,     0,  1405,     0,
    1399,  1406,     0,     0,     0,     0,     0,     0,  1402,     0,
    1403,     0,     0,  1404,     0,     0,     0,     0,     0,     0,
       0,     0,  1400,  1401,     0,     0,     0,  1405,     0,     0,
    1406,     0,     0,     0,     0,     0,     0,  1402,     0,     0,
       0,     0,     0,     0,     0,     0,  1403,     0,     0,  1404,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1405,     0,     0,  1406,     0,     0,     0,
       0,     0,     0,     0,     0,  1403,     0,  1397,  1404,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1407,     0,  1405,  1398,     0,  1406,     0,     0,  1399,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1407,
    1400,  1401,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1402,     0,     0,     0,  1384,
       0,     0,  1385,     0,     0,     0,  1386,  1387,  1388,  1389,
    1390,  1391,     0,     0,     0,  1407,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1392,     0,     0,     0,
       0,     0,     0,  1403,  1394,     0,  1404,     0,     0,     0,
       0,  1395,     0,     0,  1407,     0,     0,     0,     0,     0,
    1405,     0,  1408,  1406,     0,  1409,  1410,  1411,     0,  1412,
    1413,  1414,  1415,  1416,  1417,     0,  1396,     0,     0,  2362,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1408,     0,     0,  1409,  1410,  1411,     0,  1412,  1413,
    1414,  1415,  1416,  1417,     0,     0,     0,     0,  2452,     0,
       0,     0,     0,  1384,     0,     0,  1385,     0,     0,     0,
    1386,  1387,  1388,  1389,  1390,  1391,     0,  1408,     0,     0,
    1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,
    1392,     0,     0,     0,  2604,     0,  1384,     0,  1394,  1385,
       0,     0,  1407,  1386,     0,  1395,  1408,     0,     0,  1409,
    1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,     0,
       0,     0,     0,  2626,     0,  1384,     0,  1397,  1385,     0,
    1396,  1394,  1386,  1387,  1388,  1389,  1390,  1391, -1846,  1384,
       0,     0,  1385,  1398,     0,     0,  1386,     0,  1399,     0,
       0,     0,  1392,     0,     0,     0,     0,     0,     0,     0,
    1394,     0,     0,  1396,     0,     0,     0,  1395,     0,     0,
    1400,  1401,     0,     0,  1394,     0,     0,     0,     0,     0,
       0, -1846,     0,     0,     0,  1402,     0,     0,     0,     0,
    1384,     0,  1396,  1385,     0,     0,     0,  1386,  1387,  1388,
    1389,  1390,  1391,     0,  1408,     0,  1396,  1409,  1410,  1411,
       0,  1412,  1413,  1414,  1415,  1416,  1417,  1392,     0,     0,
       0,  2629,     0,  1403,     0,  1394,  1404,     0,     0,     0,
       0,  1397,  1395,  2375,     0,     0,     0,     0,     0,     0,
    1405,     0,     0,  1406,     0,     0,     0,  1398,     0,     0,
       0,     0,  1399,     0,     0,     0,     0,  1396,     0,     0,
       0,     0,     0,     0, -1846,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1400,  1401,  2378,     0,     0,     0,
   -1846,     0,     0,     0,     0, -1846,     0,     0,     0,  1402,
       0,     0,     0,  1397,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1846,  1384,  1398,
       0,  1385,     0,     0,  1399,  1386,  1387,  1388,  1389,  1390,
    1391,     0, -1846, -1846,     0,     0,     0,  1403, -1846,     0,
    1404,     0,  1407,     0,     0,  1392,  1400,  1401,     0,     0,
       0,     0,     0,  1394,  1405,     0,     0,  1406,     0,     0,
    1395,  1402,     0,     0,     0,     0,     0,     0,  1397,     0,
       0,     0,     0,     0,     0, -1846,     0,     0,     0,     0,
       0,     0,     0,     0,  1398,  1396,     0,  1405,     0,  1399,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1403,
       0,     0,  1404,     0,     0,     0,     0,     0,     0,     0,
       0,  1400,  1401,     0,     0,     0,  1405,     0,     0,  1406,
       0,     0,     0,     0,     0,     0,  1402,     0,     0,     0,
    1405,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1408,     0,  1407,  1409,  1410,  1411,
       0,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,     0,
       0,  2768,     0,     0,  1403,     0,     0,  1404,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1846,
       0,  1405,  1384,     0,  1406,  1385,  1397,     0,     0,  1386,
    1387,  1388,  1389,  1390,  1391,     0,     0,     0,     0,     0,
       0,     0,  1398,     0,     0,     0,     0,  1399,  1407,  1392,
       0,     0,     0,     0,     0,     0,     0,  1394,     0,     0,
       0,     0, -1846,     0,  1395,     0,     0,     0,     0,  1400,
    1401,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1402,     0,     0,     0,  1408,  1396,
       0,  1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,
    1417,     0,     0,     0,     0,  2831,     0,     0,     0,     0,
       0,     0,     0,  1407,     0,     0,     0,     0,     0,     0,
       0, -1846,  1403,     0,     0,  1404,     0,     0,  1412,  1413,
    1414,  1415,  1416,  1417,     0,     0,     0,     0,     0,  1405,
       0,     0,  1406,     0,     0,     0,     0,     0,     0,     0,
    1408,     0,     0,  1409,  1410,  1411,     0,  1412,  1413,  1414,
    1415,  1416,  1417,     0, -1846,     0,     0,  2938,     0,     0,
       0,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1397,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1398,     0,     0,     0,
       0,  1399,     0,     0,     0,  1408,     0,     0,  1409,  1410,
    1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,
       0,  1407,  2986,  1400,  1401,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1402,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1403,     0,     0,  1404,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1405,     0,     0,  1406,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1408,     0,     0,  1409,  1410,  1411,     0,
    1412,  1413,  1414,  1415,  1416,  1417,     0,     0,     0,     0,
    2999,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1407,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1134,     0,  1408,     0,     0,
    1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,
       0,     0,  1569,    94,    95,    96,    97,    98,    99,   100,
     101,  1135,   102,   103,   104,  1136,  1137,  1138,  1139,  1140,
    1141,  1142,   105,   106,  1143,   107,   108,   109,   786,   111,
     112,   113,   787,   788,   789,   790,   791,  1144,   119,   120,
     121,   122,   123,   124,  1145,  1146,   125,   126,   792,   793,
     129,  1147,   130,   131,   132,   133,   794,  1148,   795,  1149,
     136,   137,   138,   139,   140,   141,   796,   143,   144,   145,
    1150,   146,   147,   148,   149,   150,   151,  1151,   797,   153,
     154,   155,   798,   799,   800,   801,  1152,  1153,   802,   161,
     162,   163,   164,   165,   166,   167,   803,   804,   170,  1154,
     171,  1155,   172,   173,   174,   175,   176,   177,  1156,   178,
     179,   180,   181,   182,  1157,  1158,   183,   184,   185,   186,
     187,  1159,   188,   189,   190,  1160,   191,   192,   193,  1161,
     194,   195,   196,   197,   805,   199,   200,   201,   202,   203,
     806,  1162,   205,  1163,   206,   207,   807,   209,  1164,   210,
    1165,   211,   808,  1166,   809,   214,   215,   810,   811,   218,
    1167,   219,  1168,   812,   813,   222,  1169,   223,   224,   225,
     226,   227,   228,   229,   814,   231,   232,   233,   234,  1170,
     235,   236,   237,   238,   239,   240,  1171,   241,   815,   816,
     244,   245,   246,   247,   248,   817,   818,  1172,   819,  1173,
     252,   820,   821,   255,   822,   257,   258,   259,   260,   261,
     262,  1174,  1175,   263,   823,   265,   824,  1176,   267,   268,
     269,  1177,  1178,   270,   271,   272,   273,   274,   825,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   826,   827,   828,
     297,   298,   299,   829,  1179,   301,   302,   830,   304,  1180,
     831,   306,   832,   308,   309,   310,  1181,   311,   312,  1182,
    1183,   313,   314,   315,  1184,  1185,   316,   833,   834,   319,
     835,   836,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1186,   332,   333,   837,   335,   336,   838,   338,
     339,   340,  1187,   341,   342,   343,   344,   345,   346,  1188,
     347,   348,   349,   839,   351,   352,   353,   354,  1189,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,  1190,   368,   369,   840,   371,   372,   373,   841,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,  1191,   386,   387,   388,   389,   390,   842,   392,   843,
     394,   395,   396,   844,   398,   399,   845,   401,  1192,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   846,   415,   847,   417,  1193,   418,   419,  1194,   420,
     848,   422,   423,   424,   425,   426,  1195,   849,   850,  1196,
    1197,   429,   430,   851,   432,   852,  1198,   434,   435,   853,
     437,   438,   439,   440,   441,  1199,  1200,   442,   443,   444,
     445,   446,   854,  1201,   448,   449,   450,   451,   452,  1202,
     856,  1203,   455,   857,   457,   458,   459,   460,   461,  1204,
    1205,   462,  1206,  1207,   463,   464,   465,   466,   467,   468,
     858,   859,   860,   861,   862,   863,   864,   865,   866,   867,
     868,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,  1818,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   785,  1307,   583,     0,     0,
       0,   892,     0,     0,  2313,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,   786,   111,
     112,   113,   787,   788,   789,   790,   791,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   792,   793,
     129,     0,   130,   131,   132,   133,   794,     0,   795,     0,
     136,   137,   138,   139,   140,   141,   796,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   797,   153,
     154,   155,   798,   799,   800,   801,     0,     0,   802,   161,
     162,   163,   164,   165,   166,   167,   803,   804,   170,  1444,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   805,   199,   200,   201,   202,   203,
     806,  1308,   205,     0,   206,   207,   807,   209,     0,   210,
       0,   211,   808,     0,   809,   214,   215,   810,   811,   218,
       0,   219,     0,   812,   813,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   814,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   815,   816,
     244,   245,   246,   247,   248,   817,   818,     0,   819,     0,
     252,   820,   821,   255,   822,   257,   258,   259,   260,   261,
     262,     0,     0,   263,   823,   265,   824,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   825,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   826,   827,   828,
     297,   298,   299,   829,     0,   301,   302,   830,   304,     0,
     831,   306,   832,   308,   309,   310,     0,   311,   312,  1309,
       0,   313,   314,   315,     0,     0,   316,   833,   834,   319,
     835,   836,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   837,   335,   336,   838,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   839,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,   840,   371,   372,   373,   841,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   842,   392,   843,
     394,   395,   396,   844,   398,   399,   845,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   846,   415,   847,   417,     0,   418,   419,     0,   420,
     848,   422,   423,   424,   425,   426,     0,   849,   850,     0,
       0,   429,   430,   851,   432,   852,  1310,   434,   435,   853,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,   854,     0,   448,   449,   450,   451,   452,  1202,
     856,     0,   455,   857,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     858,   859,   860,   861,   862,   863,   864,   865,   866,   867,
     868,   480,   481,   482,   483,   785,  1307,   583,     0,     0,
       0,   892,  1311,  1312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,   786,   111,
     112,   113,   787,   788,   789,   790,   791,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   792,   793,
     129,     0,   130,   131,   132,   133,   794,     0,   795,     0,
     136,   137,   138,   139,   140,   141,   796,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   797,   153,
     154,   155,   798,   799,   800,   801,     0,     0,   802,   161,
     162,   163,   164,   165,   166,   167,   803,   804,   170,  1446,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   805,   199,   200,   201,   202,   203,
     806,  1308,   205,     0,   206,   207,   807,   209,     0,   210,
       0,   211,   808,     0,   809,   214,   215,   810,   811,   218,
       0,   219,     0,   812,   813,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   814,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   815,   816,
     244,   245,   246,   247,   248,   817,   818,     0,   819,     0,
     252,   820,   821,   255,   822,   257,   258,   259,   260,   261,
     262,     0,     0,   263,   823,   265,   824,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   825,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   826,   827,   828,
     297,   298,   299,   829,     0,   301,   302,   830,   304,     0,
     831,   306,   832,   308,   309,   310,     0,   311,   312,  1309,
       0,   313,   314,   315,     0,     0,   316,   833,   834,   319,
     835,   836,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   837,   335,   336,   838,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   839,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,   840,   371,   372,   373,   841,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   842,   392,   843,
     394,   395,   396,   844,   398,   399,   845,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   846,   415,   847,   417,     0,   418,   419,     0,   420,
     848,   422,   423,   424,   425,   426,     0,   849,   850,     0,
       0,   429,   430,   851,   432,   852,  1310,   434,   435,   853,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,   854,     0,   448,   449,   450,   451,   452,  1202,
     856,     0,   455,   857,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     858,   859,   860,   861,   862,   863,   864,   865,   866,   867,
     868,   480,   481,   482,   483,   785,  1307,   583,     0,     0,
       0,   892,  1311,  1312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,   786,   111,
     112,   113,   787,   788,   789,   790,   791,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   792,   793,
     129,     0,   130,   131,   132,   133,   794,     0,   795,     0,
     136,   137,   138,   139,   140,   141,   796,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   797,   153,
     154,   155,   798,   799,   800,   801,     0,     0,   802,   161,
     162,   163,   164,   165,   166,   167,   803,   804,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   805,   199,   200,   201,   202,   203,
     806,  1308,   205,     0,   206,   207,   807,   209,     0,   210,
       0,   211,   808,     0,   809,   214,   215,   810,   811,   218,
       0,   219,     0,   812,   813,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   814,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   815,   816,
     244,   245,   246,   247,   248,   817,   818,     0,   819,     0,
     252,   820,   821,   255,   822,   257,   258,   259,   260,   261,
     262,     0,     0,   263,   823,   265,   824,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   825,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   826,   827,   828,
     297,   298,   299,   829,     0,   301,   302,   830,   304,     0,
     831,   306,   832,   308,   309,   310,     0,   311,   312,  1309,
       0,   313,   314,   315,     0,     0,   316,   833,   834,   319,
     835,   836,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   837,   335,   336,   838,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   839,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,   840,   371,   372,   373,   841,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   842,   392,   843,
     394,   395,   396,   844,   398,   399,   845,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   846,   415,   847,   417,     0,   418,   419,     0,   420,
     848,   422,   423,   424,   425,   426,     0,   849,   850,     0,
       0,   429,   430,   851,   432,   852,  1310,   434,   435,   853,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,   854,     0,   448,   449,   450,   451,   452,  1202,
     856,     0,   455,   857,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     858,   859,   860,   861,   862,   863,   864,   865,   866,   867,
     868,   480,   481,   482,   483,     0,     0,  1384,     0,     0,
    1385,     0,  1311,  1312,  1386,  1387,  1388,  1389,  1390,  1391,
    1384,     0,     0,  1385,     0,     0,     0,  1386,  1387,  1388,
    1389,  1390,  1391,     0,  1392,     0,     0,     0,  1846,     0,
       0,     0,  1394,     0,     0,     0,     0,  1392,     0,  1395,
       0,     0,     0,     0,     0,  1394,  1384,     0,     0,  1385,
       0,     0,  1395,  1386,  1387,  1388,  1389,  1390,  1391,  1384,
       0,     0,  1385,     0,  1396,     0,  1386,  1387,  1388,  1389,
    1390,  1391,     0,  1392,     0,     0,     0,  1396,     0,     0,
       0,  1394,     0,     0,     0,     0,  1392,     0,  1395,  2044,
       0,     0,     0,     0,  1394,  1384,     0,     0,  1385,     0,
       0,  1395,  1386,  1387,  1388,  1389,  1390,  1391,     0,     0,
       0,     0,     0,  1396,     0,  1847,     0,     0,     0,     0,
       0,     0,  1392,     0,     0,     0,  1396,     0,     0,     0,
    1394,     0,     0,     0,     0,     0,     0,  1395,     0,     0,
    1384,     0,     0,  1385,     0,     0,     0,  1386,  1387,  1388,
    1389,  1390,  1391,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1396,     0,     0,  1397,     0,  1392,  2083,     0,
    2089,     0,     0,  2084,     0,  1394,     0,     0,  1397,     0,
       0,  1398,  1395,     0,     0,     0,  1399,     0,     0,     0,
       0,     0,     0,     0,  1398,     0,     0,     0,     0,  1399,
       0,     0,     0,  3086,     0,     0,     0,  1396,  1400,  1401,
       0,     0,     0,     0,  1397,     0,     0,     0,     0,     0,
       0,  1400,  1401,  1402,     0,     0,     0,  1397,     0,     0,
    1398,     0,     0,     0,     0,  1399,  1402,     0,     0,     0,
       0,     0,     0,  1398,     0,     0,     0,     0,  1399,     0,
       0,     0,     0,     0,     0,     0,     0,  1400,  1401,     0,
       0,  1403,     0,  1397,  1404,     0,     0,     0,     0,     0,
    1400,  1401,  1402,     0,  1403,     0,     0,  1404,  1405,  1398,
       0,  1406,     0,     0,  1399,  1402,     0,     0,     0,     0,
       0,  1405,     0,     0,  1406,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1400,  1401,  1397,     0,
    1403,     0,     0,  1404,     0,     0,     0,     0,     0,     0,
       0,  1402,     0,  1403,  1398,     0,  1404,  1405,     0,  1399,
    1406,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1405,     0,     0,  1406,     0,     0,     0,     0,     0,     0,
       0,  1400,  1401,  3087,     0,     0,     0,     0,     0,  1403,
       0,     0,  1404,     0,     0,     0,  1402,     0,     0,     0,
    1407,     0,     0,     0,     0,     0,  1405,     0,     0,  1406,
       0,     0,     0,  1407,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2056,     0,     0,
       0,     0,     0,     0,  1403,     0,     0,  1404,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1407,
       0,  1405,     0,     0,  1406,     0,     0,     0,     0,     0,
    1851,     0,  1407,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1407,     0,
       0,     0,  1408,     0,     0,  1409,  1410,  1411,     0,  1412,
    1413,  1414,  1415,  1416,  1417,  1408,     0,     0,  1409,  1410,
    1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1407,     0,     0,     0,     0,     0,     0,
       0,  1408,     0,     0,  1409,  1410,  1411,     0,  1412,  1413,
    1414,  1415,  1416,  1417,  1408,     0,     0,  1409,  1410,  1411,
       0,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,  1384,
       0,     0,  1385,     0,     0,     0,  1386,  1387,  1388,  1389,
    1390,  1391,     0,     0,     0,     0,     0,     0,     0,     0,
    1408,     0,     0,  1409,  1410,  1411,  1392,  1412,  1413,  1414,
    1415,  1416,  1417,     0,  1394,     0,     0,     0,     0,     0,
       0,  1395,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1408,  1396,     0,  1409,  1410,
    1411,     0,  1412,  1413,  1414,  1415,  1416,  1417,  1384,     0,
       0,  1385,     0,     0,     0,  1386,  1387,  1388,  1389,  1390,
    1391,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1392,     0,  1384,  2096,     0,
    1385,     0,     0,  1394,  1386,  1387,  1388,  1389,  1390,  1391,
    1395,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1392,     0,     0,     0,     0,     0,
       0,     0,  1394,     0,     0,  1396,     0,     0,     0,  1395,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2094,     0,     0,     0,     0,  1397,     0,     0,
       0,     0,     0,     0,  1396,     0,     0,     0,     0,     0,
       0,     0,     0,  1398,     0,     0,  1384,     0,  1399,  1385,
       0,     0,     0,  1386,  1387,  1388,  1389,  1390,  1391,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1400,  1401,     0,  1392,     0,     0,  2361,     0,     0,     0,
       0,  1394,     0,     0,     0,  1402,     0,     0,  1395,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1397,     0,     0,     0,
       0,     0,     0,  1396,     0,     0,     0,     0,     0,     0,
       0,     0,  1398,  1403,     0,     0,  1404,  1399,     0,     0,
    1384,     0,     0,  1385,     0,  1397,     0,  1386,     0,     0,
    1405,     0,     0,  1406,     0,     0,     0,     0,     0,  1400,
    1401,  1398,     0,     0,     0,     0,  1399,     0,     0,     0,
       0,     0,     0,     0,  1402,  1394,     0,     0,     0,     0,
       0,     0, -1846,     0,     0,     0,     0,     0,  1400,  1401,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1402,     0,     0,     0,  1396,     0,     0,
       0,     0,  1403,     0,     0,  1404,     0,     0,     0,     0,
       0,     0,     0,     0,  1397,     0,     0,  1384,     0,  1405,
    1385,     0,  1406,     0,  1386,  1387,  1388,  1389,  1390,  1391,
    1398,  1403,  1407,     0,  1404,  1399,     0,     0,     0,     0,
       0,     0,     0,     0,  1392,     0,     0,     0,  1405,     0,
       0,  1406,  1394,     0,     0,     0,     0,  1400,  1401,  1395,
       0,     0,     0,     0,     0,     0,     0,  2379,     0,     0,
       0,     0,  1402,     0,     0,     0,     0,     0,     0,     0,
    1384,     0,     0,  1385,  1396,     0,     0,  1386,  1387,  1388,
    1389,  1390,  1391,  1384,     0,     0,  1385,     0, -1846,     0,
    1386,     0,     0,  1389,  1390,  1391,     0,  1392,     0,     0,
    1403,  1407,     0,  1404, -1846,  1394,     0,     0,     0, -1846,
    1392,     0,  1395,     0,     0,     0,     0,  1405,  1394,     0,
    1406,     0,     0,     0,  1408,  1395,     0,  1409,  1410,  1411,
    1407,  1412,  1413,  1414,  1415,  1416,  1417,  1396,     0,     0,
       0,     0,     0,     0,     0,     0, -1846,     0,     0,     0,
    1396,     0,     0,     0,     0,     0,     0,  1384,     0,     0,
    1385,     0,     0,  2317,  1386,     0,     0,  1389,  1390,  1391,
       0,     0,     0,     0,     0,  1397,     0,     0,     0,     0,
       0,     0,     0,     0,  1392,     0,     0,     0,     0,     0,
       0,  1398,  1394,     0,     0,     0,  1399,     0,     0,  1395,
       0,  1405,     0,  1408,     0,     0,  1409,  1410,  1411,  1407,
    1412,  1413,  1414,  1415,  1416,  1417,     0,     0,  1400,  1401,
       0,     0,     0,     0,  1396,     0,     0,     0,     0,     0,
       0,     0,  1408,  1402,     0,  1409,  1410,  1411,  1397,  1412,
    1413,  1414,  1415,  1416,  1417,  1384,     0,     0,  1385,     0,
       0,  1397,  1386,     0,  1398,     0,     0,     0,     0,  1399,
       0,     0,     0,     0,     0,     0,     0,  1398,     0,     0,
       0,  1403,  1399,     0,  1404,     0,     0,     0,     0,     0,
    1394,  1400,  1401,     0,     0,     0,     0, -1846,  1405,     0,
       0,  1406,     0, -1846,  1400,  1401,  1402,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1402,
       0,  1408,  1396,     0,  1409,  1410,  1411,     0,  1412,  1413,
    1414,  1415,  1416,  1417,     0,  1397,     0,     0,     0,     0,
       0,     0,     0,     0,  1403,     0,     0,  1404,     0,     0,
       0,  1398,     0,     0,     0,     0,  1399,  1403,     0,     0,
    1404,  1405,     0,     0,  1406,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1405,     0,     0,  1406,  1400,  1401,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1407,     0,  2625,  1402,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1846,     0,     0,     0,     0,
       0,     0,  1412,  1413,  1414,  1415,  1416,  1417,     0,     0,
       0,     0,     0, -1846,     0,     0,     0,     0,     0,     0,
       0,  1403,     0,     0,  1404,     0,     0,     0,     0, -1846,
       0,     0,     0,     0, -1846,     0,     0,     0,  1405,     0,
       0,     0,     0,  1407,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1407,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1846,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1408,     0,     0,  1409,  1410,  1411,     0,  1412,
    1413,  1414,  1415,  1416,  1417,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1405,     0,     0,     0,
    1407,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1408,     0,     0,  1409,  1410,
    1411,     0,  1412,  1413,  1414,  1415,  1866,  1417,  1408,     0,
       0,  1409,  1410,  1411,     0,  1412,  1413,  1414,  1415,  1416,
    1417,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1846,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1408,     0,     0,  1409,  1410,  1411,     0,  1412,
    1413,  1414,  1415,  1416,  1417,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1134,     0,  1755,     0,     0,
   -1846,     0,     0,     0,     0,     0,     0,  1412,  1413,  1414,
    1415,  1416,  1417,    94,    95,    96,    97,    98,    99,   100,
     101,  1135,   102,   103,   104,  1136,  1137,  1138,  1139,  1140,
    1141,  1142,   105,   106,  1143,   107,   108,   109,   786,   111,
     112,   113,   787,   788,   789,   790,   791,  1144,   119,   120,
     121,   122,   123,   124,  1145,  1146,   125,   126,   792,   793,
     129,  1147,   130,   131,   132,   133,   794,  1148,   795,  1149,
     136,   137,   138,   139,   140,   141,   796,   143,   144,   145,
    1150,   146,   147,   148,   149,   150,   151,  1151,   797,   153,
     154,   155,   798,   799,   800,   801,  1152,  1153,   802,   161,
     162,   163,   164,   165,   166,   167,   803,   804,   170,  1154,
     171,  1155,   172,   173,   174,   175,   176,   177,  1156,   178,
     179,   180,   181,   182,  1157,  1158,   183,   184,   185,   186,
     187,  1159,   188,   189,   190,  1160,   191,   192,   193,  1161,
     194,   195,   196,   197,   805,   199,   200,   201,   202,   203,
     806,  1162,   205,  1163,   206,   207,   807,   209,  1164,   210,
    1165,   211,   808,  1166,   809,   214,   215,   810,   811,   218,
    1167,   219,  1168,   812,   813,   222,  1169,   223,   224,   225,
     226,   227,   228,   229,   814,   231,   232,   233,   234,  1170,
     235,   236,   237,   238,   239,   240,  1171,   241,   815,   816,
     244,   245,   246,   247,   248,   817,   818,  1172,   819,  1173,
     252,   820,   821,   255,   822,   257,   258,   259,   260,   261,
     262,  1174,  1175,   263,   823,   265,   824,  1176,   267,   268,
     269,  1177,  1178,   270,   271,   272,   273,   274,   825,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   826,   827,   828,
     297,   298,   299,   829,  1179,   301,   302,   830,   304,  1180,
     831,   306,   832,   308,   309,   310,  1181,   311,   312,  1182,
    1183,   313,   314,   315,  1184,  1185,   316,   833,   834,   319,
     835,   836,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1186,   332,   333,   837,   335,   336,   838,   338,
     339,   340,  1187,   341,   342,   343,   344,   345,   346,  1188,
     347,   348,   349,   839,   351,   352,   353,   354,  1189,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,  1190,   368,   369,   840,   371,   372,   373,   841,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,  1191,   386,   387,   388,   389,   390,   842,   392,   843,
     394,   395,   396,   844,   398,   399,   845,   401,  1192,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   846,   415,   847,   417,  1193,   418,   419,  1194,   420,
     848,   422,   423,   424,   425,   426,  1195,   849,   850,  1196,
    1197,   429,   430,   851,   432,   852,  1198,   434,   435,   853,
     437,   438,   439,   440,   441,  1199,  1200,   442,   443,   444,
     445,   446,   854,  1201,   448,   449,   450,   451,   452,  1202,
     856,  1203,   455,   857,   457,   458,   459,   460,   461,  1204,
    1205,   462,  1206,  1207,   463,   464,   465,   466,   467,   468,
     858,   859,   860,   861,   862,   863,   864,   865,   866,   867,
     868,   480,   481,   482,   483,  1134,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,  1135,   102,   103,   104,  1136,  1137,  1138,  1139,  1140,
    1141,  1142,   105,   106,  1143,   107,   108,   109,   786,   111,
     112,   113,   787,   788,   789,   790,   791,  1144,   119,   120,
     121,   122,   123,   124,  1145,  1146,   125,   126,   792,   793,
     129,  1147,   130,   131,   132,   133,   794,  1148,   795,  1149,
     136,   137,   138,   139,   140,   141,   796,   143,   144,   145,
    1150,   146,   147,   148,   149,   150,   151,  1151,   797,   153,
     154,   155,   798,   799,   800,   801,  1152,  1153,   802,   161,
     162,   163,   164,   165,   166,   167,   803,   804,   170,  1154,
     171,  1155,   172,   173,   174,   175,   176,   177,  1156,   178,
     179,   180,   181,   182,  1157,  1158,   183,   184,   185,   186,
     187,  1159,   188,   189,   190,  1160,   191,   192,   193,  1161,
     194,   195,   196,   197,   805,   199,   200,   201,   202,   203,
     806,  1162,   205,  1163,   206,   207,   807,   209,  1164,   210,
    1165,   211,   808,  1166,   809,   214,   215,   810,   811,   218,
    1167,   219,  1168,   812,   813,   222,  1169,   223,   224,   225,
     226,   227,   228,   229,   814,   231,   232,   233,   234,  1170,
     235,   236,   237,   238,   239,   240,  1171,   241,   815,   816,
     244,   245,   246,   247,   248,   817,   818,  1172,   819,  1173,
     252,   820,   821,   255,   822,   257,   258,   259,   260,   261,
     262,  1174,  1175,   263,   823,   265,   824,  1176,   267,   268,
     269,  1177,  1178,   270,   271,   272,   273,   274,   825,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   826,   827,   828,
     297,   298,   299,   829,  1179,   301,   302,   830,   304,  1180,
     831,   306,   832,   308,   309,   310,  1181,   311,   312,  1182,
    1183,   313,   314,   315,  1184,  1185,   316,   833,   834,   319,
     835,   836,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1186,   332,   333,   837,   335,   336,   838,   338,
     339,   340,  1187,   341,   342,   343,   344,   345,   346,  1188,
     347,   348,   349,   839,   351,   352,   353,   354,  1189,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,  1190,   368,   369,   840,   371,   372,   373,   841,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,  1191,   386,   387,   388,   389,   390,   842,   392,   843,
     394,   395,   396,   844,   398,   399,   845,   401,  1192,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   846,   415,   847,   417,  1193,   418,   419,  1194,   420,
     848,   422,   423,   424,   425,   426,  1195,   849,   850,  1196,
    1197,   429,   430,   851,   432,   852,  1198,   434,   435,   853,
     437,   438,   439,   440,   441,  1199,  1200,   442,   443,   444,
     445,   446,   854,  1201,   448,   449,   450,   451,   452,  1202,
     856,  1203,   455,   857,   457,   458,   459,   460,   461,  1204,
    1205,   462,  1206,  1207,   463,   464,   465,   466,   467,   468,
     858,   859,   860,   861,   862,   863,   864,   865,   866,   867,
     868,   480,   481,   482,   483,  1134,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,  1902,    99,   100,
     101,  1135,   102,   103,   104,  1136,  1137,  1138,  1139,  1140,
    1141,  1142,   105,   106,  1143,   107,   108,   109,   786,   111,
     112,   113,   787,   788,   789,   790,   791,  1144,   119,   120,
     121,   122,   123,   124,  1145,  1146,   125,   126,   792,   793,
     129,  1147,   130,   131,   132,   133,   794,  1148,   795,  1149,
     136,   137,   138,   139,   140,   141,   796,   143,   144,   145,
    1150,   146,   147,   148,   149,   150,   151,  1151,   797,   153,
     154,   155,   798,   799,   800,   801,  1152,  1153,   802,   161,
     162,   163,   164,   165,   166,   167,   803,   804,   170,  1154,
     171,  1155,   172,   173,   174,   175,   176,   177,  1156,   178,
     179,   180,   181,   182,  1157,  1158,   183,   184,   185,  1903,
     187,  1159,   188,   189,   190,  1160,   191,   192,   193,  1161,
     194,   195,   196,   197,   805,   199,   200,   201,   202,   203,
     806,  1162,   205,  1163,   206,   207,   807,   209,  1164,   210,
    1165,   211,   808,  1166,   809,   214,   215,   810,   811,   218,
    1167,   219,  1168,   812,   813,   222,  1169,   223,   224,   225,
     226,   227,   228,   229,   814,   231,   232,   233,   234,  1170,
     235,   236,   237,   238,   239,   240,  1171,   241,   815,   816,
     244,   245,   246,   247,   248,   817,   818,  1172,   819,  1173,
     252,   820,   821,   255,   822,   257,   258,   259,   260,   261,
     262,  1174,  1175,   263,   823,   265,   824,  1176,   267,   268,
     269,  1177,  1178,   270,   271,   272,   273,   274,   825,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   826,   827,   828,
     297,   298,   299,   829,  1179,   301,   302,   830,   304,  1180,
     831,   306,   832,   308,   309,   310,  1181,   311,   312,  1182,
    1183,   313,   314,   315,  1184,  1185,   316,   833,   834,   319,
     835,   836,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1186,   332,   333,   837,   335,   336,   838,   338,
     339,   340,  1187,   341,   342,   343,   344,   345,   346,  1188,
     347,   348,   349,   839,   351,   352,   353,   354,  1189,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,  1190,   368,   369,   840,   371,   372,   373,   841,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,  1191,   386,   387,   388,   389,   390,   842,  1904,   843,
     394,   395,   396,   844,   398,   399,   845,   401,  1192,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   846,   415,   847,   417,  1193,   418,   419,  1194,   420,
     848,   422,   423,   424,   425,   426,  1195,   849,   850,  1196,
    1197,   429,   430,   851,   432,   852,  1198,   434,   435,   853,
     437,   438,   439,   440,   441,  1199,  1200,   442,   443,   444,
     445,   446,   854,  1201,   448,   449,   450,   451,   452,  1202,
     856,  1203,   455,   857,   457,   458,   459,   460,   461,  1204,
    1205,   462,  1206,  1207,   463,   464,   465,   466,   467,   468,
     858,   859,   860,   861,   862,   863,   864,   865,   866,   867,
     868,   480,   481,   482,   483,    93,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,   899,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   902,     0,   903,     0,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   904,   905,   906,   907,   908,   909,   910,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     915,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   923,   924,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,   304,     0,
     929,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,   318,   319,
     320,   932,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   933,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   936,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   938,   417,     0,   418,   419,     0,   420,
     421,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   941,   432,   942,     0,   434,   435,   944,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,   945,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   785,     0,   583,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,   786,   111,
     112,   113,   787,   788,   789,   790,   791,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   792,   793,
     129,     0,   130,   131,   132,   133,   794,     0,   795,     0,
     136,   137,   138,   139,   140,   141,   796,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   797,   153,
     154,   155,   798,   799,   800,   801,     0,     0,   802,   161,
     162,   163,   164,   165,   166,   167,   803,   804,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   805,   199,   200,   201,   202,   203,
     806,  1308,   205,     0,   206,   207,   807,   209,     0,   210,
       0,   211,   808,     0,   809,   214,   215,   810,   811,   218,
       0,   219,     0,   812,   813,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   814,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   815,   816,
     244,   245,   246,   247,   248,   817,   818,     0,   819,     0,
     252,   820,   821,   255,   822,   257,   258,   259,   260,   261,
     262,     0,     0,   263,   823,   265,   824,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   825,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   826,   827,   828,
     297,   298,   299,   829,     0,   301,   302,   830,   304,     0,
     831,   306,   832,   308,   309,   310,     0,   311,   312,  1309,
       0,   313,   314,   315,     0,     0,   316,   833,   834,   319,
     835,   836,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   837,   335,   336,   838,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   839,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,   840,   371,   372,   373,   841,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   842,   392,   843,
     394,   395,   396,   844,   398,   399,   845,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   846,   415,   847,   417,     0,   418,   419,     0,   420,
     848,   422,   423,   424,   425,   426,     0,   849,   850,     0,
       0,   429,   430,   851,   432,   852,  1310,   434,   435,   853,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,   854,     0,   448,   449,   450,   451,   452,  1202,
     856,     0,   455,   857,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     858,   859,   860,   861,   862,   863,   864,   865,   866,   867,
     868,   480,   481,   482,   483,   785,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     3,     4,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,   786,   111,
     112,   113,   787,   788,   789,   790,   791,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   792,   793,
     129,     0,   130,   131,   132,   133,   794,     0,   795,     0,
     136,   137,   138,   139,   140,   141,   796,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   797,   153,
     154,   155,   798,   799,   800,   801,     0,     0,   802,   161,
     162,   163,   164,   165,   166,   167,   803,   804,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   805,   199,   200,   201,   202,   203,
     806,     0,   205,     0,   206,   207,   807,   209,     0,   210,
       0,   211,   808,     0,   809,   214,   215,   810,   811,   218,
       0,   219,     0,   812,   813,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   814,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   815,   816,
     244,   245,   246,   247,   248,   817,   818,     0,   819,     0,
     252,   820,   821,   255,   822,   257,   258,   259,   260,   261,
     262,     0,     0,   263,   823,   265,   824,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   825,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   826,   827,   828,
     297,   298,   299,   829,     0,   301,   302,   830,   304,     0,
     831,   306,   832,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   833,   834,   319,
     835,   836,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   837,   335,   336,   838,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   839,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,   840,   371,   372,   373,   841,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   842,   392,   843,
     394,   395,   396,   844,   398,   399,   845,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   846,   415,   847,   417,     0,   418,   419,     0,   420,
     848,   422,   423,   424,   425,   426,     0,   849,   850,     0,
       0,   429,   430,   851,   432,   852,     0,   434,   435,   853,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,   854,     0,   448,   449,   450,   451,   452,  1202,
     856,     0,   455,   857,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     858,   859,   860,   861,   862,   863,   864,   865,   866,   867,
     868,   480,   481,   482,   483,    93,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   156,   157,   158,   159,     0,     0,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,     0,   263,   264,   265,   266,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,     0,   301,   302,   303,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,   418,   419,     0,   420,
     421,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,  1507,   130,   131,   132,   133,   134,     0,     0,  1508,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
    1509,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
    1510,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,  1511,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,  1512,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,  1513,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,  1507,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
    1509,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
    1510,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,  1973,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,  1512,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,  1513,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     3,     4,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,   509,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   512,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
     615,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   658,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
     615,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,   690,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,  1807,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
    1808,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,  1809,   420,
       0,   422,  1810,   424,  1811,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,  1812,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,  2776,     0,     0,     0,
       0,  2777,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   583,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,   590,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   591,   428,     0,
       0,   592,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   624,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   653,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   656,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   660,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   699,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,   700,   111,
     112,   113,     0,   701,   702,   703,   704,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   705,   706,
     129,     0,   130,   131,   132,   133,     0,     0,   707,     0,
     136,   137,   138,   139,   140,   141,   708,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   709,   153,
     154,   155,   710,   711,   712,   713,     0,     0,   714,   161,
     162,   163,   164,   165,   166,   167,   715,   716,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   717,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,     0,   199,   200,   201,   202,   203,
       0,     0,   205,     0,   206,   207,   718,   209,     0,   210,
       0,   211,   719,     0,   720,   214,   215,     0,   721,   218,
       0,   219,     0,     0,     0,   222,     0,   223,   224,   225,
     226,   227,   722,   229,   723,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   724,     0,
     244,   245,   246,   247,   248,   725,   726,     0,   727,     0,
     252,   728,   729,   255,   730,   257,   258,   259,   260,   261,
     262,     0,     0,   263,   731,   265,   732,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   733,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   734,   735,   736,
     297,   298,   299,     0,     0,   301,   302,   737,   304,     0,
       0,   306,   738,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,   739,   319,
     740,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,     0,   335,   336,     0,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   741,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,   742,   371,   372,   373,   743,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   744,   392,   745,
     394,   395,   396,   746,   398,   399,   747,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   748,   415,     0,   417,     0,   418,   419,     0,   420,
     749,   422,   423,   424,   425,   426,     0,   750,   751,     0,
       0,   429,   430,     0,   432,     0,     0,   434,   435,   752,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,   753,     0,   448,   449,   450,   451,   452,     0,
     754,     0,   455,   755,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     507,     0,   508,     0,     0,     0,     0,     0,     0,     0,
       0,   480,   481,   482,   483,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
     141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
       0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,     0,     0,     0,
     214,   215,   510,     0,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   777,   229,     0,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,   255,     0,
     257,   258,   259,   260,   261,   262,     0,     0,   263,     0,
     265,     0,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   511,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,     0,   296,   297,   298,   299,   300,     0,
     301,   302,     0,   304,     0,   305,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,     0,   319,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,     0,   392,   393,   394,   395,   396,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   513,   415,   416,   417,
       0,   418,   419,     0,   420,     0,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     507,     0,   508,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
     141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
       0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,     0,     0,     0,
     214,   215,   510,     0,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   780,   229,     0,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,   255,     0,
     257,   258,   259,   260,   261,   262,     0,     0,   263,     0,
     265,     0,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   511,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,     0,   296,   297,   298,   299,   300,     0,
     301,   302,     0,   304,     0,   305,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,     0,   319,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,     0,   392,   393,   394,   395,   396,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   513,   415,   416,   417,
       0,   418,   419,     0,   420,     0,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     507,     0,   508,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
     141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
       0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,     0,     0,     0,
     214,   215,   510,     0,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,  1224,   229,     0,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,   255,     0,
     257,   258,   259,   260,   261,   262,     0,     0,   263,     0,
     265,     0,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   511,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,     0,   296,   297,   298,   299,   300,     0,
     301,   302,     0,   304,     0,   305,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,     0,   319,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,     0,   392,   393,   394,   395,   396,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   513,   415,   416,   417,
       0,   418,   419,     0,   420,     0,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     507,     0,   508,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
     141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
       0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,     0,     0,     0,
     214,   215,   510,     0,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,  1226,   229,     0,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,   255,     0,
     257,   258,   259,   260,   261,   262,     0,     0,   263,     0,
     265,     0,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   511,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,     0,   296,   297,   298,   299,   300,     0,
     301,   302,     0,   304,     0,   305,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,     0,   319,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,     0,   392,   393,   394,   395,   396,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   513,   415,   416,   417,
       0,   418,   419,     0,   420,     0,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     699,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,   700,   111,   112,   113,     0,   701,   702,
     703,   704,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   705,   706,   129,     0,   130,   131,   132,
     133,     0,     0,   707,     0,   136,   137,   138,   139,   140,
     141,   708,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   709,   153,   154,   155,   710,   711,   712,
     713,     0,     0,   714,   161,   162,   163,   164,   165,   166,
     167,   715,   716,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   717,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,     0,
     199,   200,   201,   202,   203,     0,     0,   205,     0,   206,
     207,   718,   209,     0,   210,     0,   211,   719,     0,   720,
     214,   215,     0,   721,   218,     0,   219,     0,     0,     0,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   723,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   724,     0,   244,   245,   246,   247,   248,
     725,   726,     0,   727,     0,   252,   728,   729,   255,   730,
     257,   258,   259,   260,   261,   262,     0,     0,   263,   731,
     265,   732,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   733,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   734,   735,   736,   297,   298,   299,     0,     0,
     301,   302,   737,   304,     0,     0,   306,   738,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,   739,   319,   740,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
       0,   335,   336,     0,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   741,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
     742,   371,   372,   373,   743,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   744,   392,   745,   394,   395,   396,   746,   398,
     399,   747,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   748,   415,     0,   417,
       0,   418,   419,     0,   420,   749,   422,   423,   424,   425,
     426,     0,   750,   751,     0,     0,   429,   430,     0,   432,
       0,     0,   434,   435,   752,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,   753,     0,   448,
     449,   450,   451,   452,     0,   754,     0,   455,   755,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,   480,   481,   482,   483,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,  1898,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
    2401,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
    2416,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,   508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,  2578,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   602,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     603,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   604,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   605,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   606,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   678,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   774,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   604,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   606,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
    1463,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,     0,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,  1601,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,  1885,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,  1900,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,  2507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,  2508,   111,
     112,   113,     0,   701,  2509,   703,   704,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   705,   706,
     129,     0,   130,   131,   132,   133,     0,     0,  2510,     0,
     136,   137,   138,   139,   140,   141,  2511,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,  2512,   153,
     154,   155,  2513,  2514,  2515,  2516,     0,     0,  2517,   161,
     162,   163,   164,   165,   166,   167,   715,   716,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   717,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,     0,   199,   200,   201,   202,   203,
       0,     0,   205,     0,   206,   207,   718,   209,     0,   210,
       0,   211,  2518,     0,  2519,   214,   215,  2520,  2521,   218,
       0,   219,     0,     0,     0,   222,     0,   223,   224,   225,
     226,   227,   228,   229,  2522,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,  2523,     0,
     244,   245,   246,   247,   248,   725,   726,     0,   727,     0,
     252,  2524,  2525,   255,  2526,   257,   258,   259,   260,   261,
     262,     0,     0,   263,  2527,   265,  2528,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,  2721,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   734,  2530,   736,
     297,   298,   299,     0,     0,   301,   302,  2532,   304,     0,
       0,   306,   738,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,  2534,   319,
    2535,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,     0,   335,   336,     0,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   741,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,  2536,   371,   372,   373,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,  2537,   392,     0,
     394,   395,   396,  2539,   398,   399,   747,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,  2722,   415,     0,   417,     0,   418,   419,     0,   420,
    2541,   422,   423,   424,   425,   426,     0,   750,   751,     0,
       0,   429,   430,     0,   432,     0,     0,   434,   435,  2542,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,  2543,     0,   448,   449,   450,   451,   452,     0,
     754,     0,   455,  2544,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     699,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   480,   481,   482,   483,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,   700,   111,   112,   113,     0,   701,   702,
     703,   704,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   705,   706,   129,     0,   130,   131,   132,
     133,     0,     0,   707,     0,   136,   137,   138,   139,   140,
     141,   708,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   709,   153,   154,   155,   710,   711,   712,
     713,     0,     0,   714,   161,   162,   163,   164,   165,   166,
     167,   715,   716,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   717,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,     0,
     199,   200,   201,   202,   203,     0,     0,   205,     0,   206,
     207,   718,   209,     0,   210,     0,   211,   719,     0,   720,
     214,   215,     0,   721,   218,     0,   219,     0,     0,     0,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   723,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   724,     0,   244,   245,   246,   247,   248,
     725,   726,     0,   727,     0,   252,   728,   729,   255,   730,
     257,   258,   259,   260,   261,   262,     0,     0,   263,   731,
     265,   732,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,     0,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   734,   735,   736,   297,   298,   299,     0,     0,
     301,   302,   737,   304,     0,     0,   306,   738,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,   739,   319,   740,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
       0,   335,   336,     0,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   741,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
     742,   371,   372,   373,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   744,   392,     0,   394,   395,   396,   746,   398,
     399,   747,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,     0,   415,     0,   417,
       0,   418,   419,     0,   420,   749,   422,   423,   424,   425,
     426,     0,   750,   751,     0,     0,   429,   430,     0,   432,
       0,     0,   434,   435,   752,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,   753,     0,   448,
     449,   450,   451,   452,     0,   754,     0,   455,   755,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   480,   481,   482,   483,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   510,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   511,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,     0,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,     0,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
       0,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   513,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     1,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     2,     3,     4,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     5,     5,     0,     0,     0,     0,     0,
       0,     0,     6,     6,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     7,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     8,     8,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     9,     9,    10,
      10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    11,    11,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    12,    12,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    13,     0,     0,     0,     0,    14,    14,     0,
       0,     0,     0,     0,     0,    15,    15,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    18,    18,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    20,    20,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    21,    21,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    22,    22,
       0,    23,    23,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      24,    24,     0,     0,     0,     0,     0,     0,     0,    25,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    26,    26,     0,     0,     0,     0,     0,
      27,    27,     0,     0,    28,    28,     0,     0,     0,     0,
       0,     0,     0,     0,    29,    29,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    30,    30,     0,     0,
      31,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    32,    32,     0,     0,
       0,    33,    33,     0,     0,   545,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
      35,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   546,    36
};

static const yytype_int16 yycheck[] =
{
       6,   664,     0,   657,     0,   502,    20,    21,   623,  1074,
       0,   645,     6,     0,     0,    71,   952,   672,     6,   745,
     875,    16,   546,    36,  1015,   538,   666,  1073,     0,   677,
    1427,     0,    30,     0,     0,  1048,   875,   775,   618,  1849,
     778,   751,  1852,   540,  1352,  1034,  1819,   955,  1468,    16,
    1020,  1471,    73,  1896,  1050,  1053,  1815,    73,    31,  1249,
    1121,  2269,   657,   971,   659,   545,   661,  2243,   546,  1254,
    2243,   541,  1831,   881,  2268,  1777,   984,  1381,  1382,  1839,
    1892,     0,  1078,     0,    82,     0,     0,     0,    35,     0,
    2277,  2281,    21,  1712,  1713,   705,   706,     0,  1717,     0,
       0,     0,     0,  1955,  2146,  2098,     0,  2148,     5,     0,
     564,     0,     0,  2154,  1435,    52,     9,    90,     5,     0,
       0,     5,     0,     0,     0,  2588,   736,     0,     0,    11,
       0,   642,    60,    15,  1940,  1941,  1942,   992,    60,     5,
       3,  1760,  1761,     5,     5,     5,   642,    13,    14,     5,
      60,    13,    14,     5,     5,     5,  1968,    13,    14,     9,
       5,     5,    13,    14,  1578,     9,  1489,   782,    13,    14,
      33,    34,   171,     5,     0,     5,    13,    14,     5,  1220,
     172,    13,    14,    13,    14,     5,    13,    14,   151,     5,
       5,     5,     5,    13,    14,     5,     5,    13,    14,    13,
      14,  1487,    60,    13,    14,     5,     5,  1062,     5,     5,
    1065,  1066,     5,     5,     5,   119,     5,  1953,     5,   139,
    2032,  2033,     5,    42,    42,    95,    29,   122,  2639,    77,
     940,     5,  1815,    36,   171,  2574,   122,  1347,   189,  2725,
      88,   124,    11,  2854,  2179,  2584,    15,  2571,  1831,  2661,
    2757,  1347,   285,   716,  2555,     5,    77,   309,   293,    25,
    2153,  2481,   287,   109,  2675,    31,    29,    88,     5,    95,
     273,    75,  2085,    36,    43,   738,   109,   309,  1086,     3,
       4,     5,     4,   244,   122,     9,    61,     9,   378,  1097,
     900,   901,  1347,    50,    69,   369,    11,    13,    14,   137,
      15,  2822,  2923,  2211,     9,   276,    75,   170,    69,   172,
     773,    29,   334,   419,   334,    69,   926,     4,    36,   334,
     163,    29,     9,   396,   210,   293,   358,   117,    43,    39,
      11,   171,   406,  1242,    15,  1061,   951,    70,   120,   119,
     108,   120,   147,  2954,   191,   405,  2757,  3055,    38,   161,
     370,   875,   110,  2055,  2395,  2161,   880,  2398,   464,   999,
      75,   110,  2538,   117,  2406,  1354,    11,  2210,  2410,    38,
      15,   137,  2580,   447,   348,   461,   956,   172,   357,   488,
     440,  2793,   455,  2193,   406,  2293,   406,  2146,  3096,  2583,
    2853,   406,   501,   117,   499,  2207,   876,  2209,    43,   485,
     132,   362,   376,  2742,    11,   985,   369,   168,    15,   499,
     215,   193,   383,     0,   193,  3036,   126,   287,   417,   176,
    1356,   349,  2723,   235,   132,   499,   269,   349,  1337,  1044,
      75,   453,  1012,   453,   502,   192,   439,   270,   453,   349,
     197,  3052,   494,   406,  2063,  2064,  2065,  2066,  2067,   912,
     166,  2070,  2071,  2072,  2073,  2074,  2075,  2076,  2077,  2078,
    2079,   287,   494,   238,  2684,  2986,   499,   930,   503,  1777,
     994,   995,   284,  2884,   499,    85,   437,   234,   211,   493,
     350,   319,   250,  2703,   447,   175,  1475,   277,   293,   488,
     258,   349,   216,  2956,  1128,  1508,   494,   277,   461,  2311,
     347,  2394,   501,  1564,  2123,  2124,   175,   499,  2443,  2920,
     305,  2997,  3019,  2326,   238,  1625,  1347,  1821,   272,   129,
     499,  1842,   485,   277,   350,   291,  2850,  1592,   451,  2265,
    1626,  1042,   538,   546,  1857,   503,   499,   457,   499,   443,
     546,   393,   394,  1851,   439,  2735,  1042,  1588,   499,  2725,
     282,   546,  2725,   439,  1008,  2967,  1970,  1220,   441,   320,
     406,  2144,   499,  2146,   132,   579,   320,   581,   582,   417,
    1856,  1626,  1627,  1628,  1229,   503,   342,   417,   545,   463,
     346,   503,   336,   386,   403,   403,   200,   382,   451,   645,
     604,   461,   613,   503,   600,   601,   417,   613,  1659,  2640,
     497,   485,   499,   463,   501,   498,  2648,  2459,  3019,  2452,
     376,  2653,   499,   495,  2656,   499,  2955,   623,   497,  2612,
     499,    60,  1430,   386,   381,   485,   621,  1242,   433,    32,
     500,   165,   502,   499,   632,   461,   632,   499,   499,   499,
    1250,  1251,   632,   499,  2852,   632,   632,  2406,   499,   499,
     450,  2410,   581,    56,   499,   499,   662,   663,   664,  1322,
     632,   503,   499,   632,   637,   632,   632,   499,   386,   499,
    2860,  2858,   499,   434,   500,     0,   502,   624,   444,   499,
     434,  2441,  1537,   499,   499,   499,   499,   441,   499,   499,
     499,    16,  1547,   497,   304,  1550,  1336,   501,   344,   499,
     499,   117,   499,   499,   272,    30,   499,   499,   499,  1222,
     499,    36,   499,   632,   282,   632,   499,   632,   632,   632,
    1335,   632,  1337,  1712,  1713,   499,   495,  1342,  1717,   632,
    1393,   632,   632,   632,   632,  1248,  1376,  1377,   632,   745,
    1355,   632,  1733,   632,   632,  2447,  2788,  2055,    73,   499,
    1263,   632,   632,  2961,   632,   632,   632,    82,  2952,   632,
     632,  2573,   499,  1378,  2570,   177,   490,   491,   490,   491,
    1433,  1760,  1761,   189,   461,   244,   782,   492,   493,   494,
     495,   315,  1306,   117,  1424,   490,   491,   163,  1368,  1644,
      38,  1599,  1432,    25,  1434,  1626,  1627,   251,   485,  1296,
    1297,   411,  2106,   490,   491,  1644,  1303,   256,   257,    57,
    1995,   492,   493,   494,   495,   406,  2001,   224,   149,  3013,
     441,  2997,   441,  2406,  2997,  1305,   238,  2410,  1306,  1299,
    1738,   270,  2486,   422,   161,    25,    25,   187,   188,   365,
    2494,    31,    31,  2686,   151,   490,   491,   492,   493,   494,
     495,    25,   228,  1823,  1919,  2474,   272,    31,    25,    25,
     108,   875,  1525,   270,    31,    31,   880,   198,  1804,   875,
    1608,    29,  1385,  3081,   880,   881,   882,   497,   499,  1533,
     499,   501,  1943,   490,   491,   492,   493,   494,   495,  2648,
     161,  1629,   898,  1631,  2653,   166,  1634,  2656,   453,  1396,
      11,    11,    29,   244,    15,   137,   256,   257,   235,   876,
     349,  1506,    23,   499,  1811,  1812,   244,   366,   367,     5,
     329,   927,    80,    34,    35,  1588,  1560,  1561,  1562,  2119,
    2057,    89,  1928,  1581,    24,  2243,  1844,   376,  1533,   952,
      30,   947,   948,   949,   958,   951,   952,   137,   137,   358,
     488,   199,    25,   967,   410,   224,   412,  1552,    31,  2086,
     118,   499,  1557,   137,   235,    75,   300,   981,   437,   975,
     137,   137,   379,   463,     4,   499,   132,    88,   992,     9,
     994,   995,    77,  1981,  2827,   221,  1984,  2606,   994,   995,
    1605,   272,    82,    88,   119,   485,   277,    77,   410,   482,
     412,   270,   250,   159,  1517,   132,  1027,  1028,    88,  1030,
     258,  1027,  1028,   284,  1030,   501,   366,   367,   463,   244,
     244,   362,   270,  1029,   287,   437,  2405,  1033,  1034,  2788,
     499,   189,   439,   492,   362,   369,  2415,   494,  1044,  2418,
     485,   482,   244,   201,   501,   200,  1543,   328,  1021,   500,
     494,  1548,   503,   301,   499,  1061,  2639,   501,     4,   291,
     503,   330,   369,     9,   137,  2648,    11,   497,   170,   172,
    2653,   501,   406,  2656,  2063,  2064,  2065,  2066,  2067,   204,
    1086,  2070,  2071,  2072,  2073,  2074,  2075,  2076,  2077,  2078,
    2079,  1097,  2675,    66,    67,   173,   437,   300,    43,   406,
     348,   291,   291,   206,  1077,   602,   603,  1620,   605,   437,
     379,  1726,   499,   447,   346,  1121,   348,   291,   500,   222,
    1644,   277,   370,   161,   291,   291,   282,   461,   166,   232,
      75,     4,   500,  1657,  2123,  2124,     9,   362,   362,  2447,
     447,  2760,   390,   171,   376,   270,  2919,   272,  1661,   217,
    1765,   485,   342,   342,   461,    96,   346,   346,   499,  2224,
     362,  1899,  2098,  1901,    56,   499,   369,   245,   342,   494,
     439,   499,   346,   132,  2757,   342,   342,  2223,   485,   346,
     346,  2371,   500,  1817,  2023,   503,   376,   376,     4,   463,
     538,   499,   499,     9,   497,  2208,   499,   235,   501,   177,
     159,   500,   376,   406,   503,  2788,   410,   362,   412,   376,
     376,   485,   437,   437,  1220,   370,  1222,  2263,   291,   221,
     545,   546,   200,  1219,  2222,   499,  2224,  3037,  3038,  1219,
    3073,   172,  1219,  1219,   392,   437,  1242,   395,  2135,  2136,
    2137,  2138,  1248,  1249,   447,   500,   284,  3020,   503,   482,
     353,   406,   500,   147,   444,   444,   334,  1263,   461,  1725,
     238,  1727,  1728,   177,   152,   206,  3039,   161,   424,  2177,
     444,   342,   166,   346,   499,   499,   152,   444,   444,   435,
    3090,   222,   485,   461,   500,   463,   200,   503,   613,  1999,
    2000,   232,   370,   410,   152,   412,   499,   499,   453,   500,
    1306,  2884,   503,   376,    13,    14,     5,   632,  1963,     8,
     410,  1306,   412,   272,   292,    14,  1322,   500,   277,   152,
     503,   215,  3095,   282,   238,   266,    25,   500,   406,  1335,
      29,  1337,   272,  1347,  1332,  1341,  1342,  2920,  1305,   500,
     500,   235,   503,   503,   501,  1351,   287,  1353,  1354,  1355,
    1356,  1357,  1358,  1359,   500,  1649,   499,   503,  2021,  1653,
    1332,  1655,    38,  1332,   500,  1332,  1332,   503,    13,    14,
     500,   444,  1378,   503,  1380,   453,    13,    14,   292,  1385,
    1386,  1387,  1388,  1389,  1390,  1391,  1392,  1393,  2243,   453,
     284,  1397,  1398,    13,    14,   500,  1402,   745,   503,   293,
    1406,   512,    84,  1409,  1410,  1411,  1412,  1413,  1414,  1415,
    1416,  1417,   353,   369,  1420,    13,    14,  2725,  2815,  2609,
    1902,  1427,  1904,   465,  1430,   500,  1440,  1433,   503,   450,
     541,   542,   410,   316,   412,  2500,  3019,  2207,   500,  2209,
    2453,   503,     8,    37,   500,    11,  1452,   503,   362,    15,
     406,   499,    18,    19,    20,  1450,   434,   500,   499,   437,
     503,  2101,  1460,     8,   152,   424,    11,  1980,   500,  1475,
      15,   503,   499,    18,    19,    20,   435,    43,   287,  2094,
    1486,  1487,   499,     8,    50,  2474,    11,    13,    14,   500,
      15,   447,   503,    18,    19,    20,   410,   152,   412,  2023,
     441,   500,   152,   500,   503,   461,   503,    13,    14,    75,
      35,  1517,   499,   624,   428,     8,   152,  1523,    11,  1525,
     434,  2018,    15,   437,    11,    18,    19,    20,    15,   485,
     500,  2044,   500,   503,   882,   503,    23,   500,   500,   433,
     503,   503,   500,   499,    96,   503,  2186,    34,    35,  2062,
     500,   876,   500,   503,    25,   503,   500,   499,  1564,   503,
      31,  1567,  1568,    38,  1570,   500,  2304,    38,   503,   894,
    2990,  2761,  2992,   639,   233,   641,  2089,   499,  2158,  2242,
       5,  2244,  1588,  2096,     5,  2411,    57,  2413,   499,   914,
      13,    14,   499,  1599,    13,    14,   499,  1595,   166,  1605,
     499,    88,   499,   497,    13,    14,   500,   501,    13,    14,
     176,    13,    14,   499,  1620,    13,    14,  2606,    13,    14,
     172,    13,    14,  2271,  2258,   499,   192,   952,    13,    14,
    1644,   197,    13,    14,  1648,   499,  2491,   108,  1644,    13,
      14,    13,    14,  1657,   992,    13,    14,    13,    14,  3069,
       5,  1657,   499,  1659,   206,  1661,    13,    14,     6,    13,
      14,   357,   358,    11,  1670,     5,   137,    15,   234,  1675,
     222,   499,    20,    21,    22,    23,    24,   357,   358,    27,
     232,   499,    30,    31,   499,  2731,    34,    35,   499,  2997,
     260,   261,   366,   367,   219,   357,   358,   357,   358,   994,
     995,  1714,  1027,  1028,   197,  1030,  1712,  1713,  1714,   499,
       5,  1717,   499,  1061,   266,     5,   499,   499,   499,  1725,
    1726,  1727,  1728,   289,   499,     9,   219,   499,   199,  1735,
    2243,   148,   462,  1739,    82,   298,  1742,   503,     8,    87,
      88,    89,    90,    91,   289,    15,   503,   217,    18,    19,
      20,   500,  1765,    99,  1760,  1761,    38,   376,    52,  1765,
     166,  2600,   284,   166,   289,  2503,  2504,   282,   233,   417,
     499,  2760,   499,  1779,    88,   503,  1782,   417,  1784,   250,
      56,    56,  2422,   417,  2775,   263,   417,   258,  2301,   500,
     508,   417,   461,   152,   147,    95,   289,  2437,  1804,   270,
     501,   353,  2793,    97,   272,   272,    38,   499,   161,  1815,
     499,     9,  2538,   166,   499,   381,    37,   417,   415,   415,
     291,  1815,  1835,   500,   497,  1831,   497,  1815,   417,   123,
     301,   417,  1830,   417,   457,   503,   499,  1831,    11,   344,
     498,   505,   953,  1831,  1850,   277,   503,   141,   415,   503,
     499,   145,   508,   499,   180,   417,   162,   500,  1830,  1865,
    1866,  1830,   215,  1830,  1830,  2801,   171,   500,   503,   499,
    2725,   342,   441,   167,  1222,   346,   170,   348,  1884,    38,
     215,   503,   235,   379,   288,   224,   503,   309,   500,   309,
     499,   185,   224,   272,  1908,   224,  1902,  1903,  1904,   370,
    1248,  1249,   293,  1014,  1015,   376,  2897,   325,   285,   453,
     152,   499,   152,   461,    38,  1263,   272,   483,   287,   390,
     486,   487,   488,   500,   490,   491,   492,   493,   494,   495,
      38,   284,   482,  2998,   498,   500,   497,  1943,   287,  1953,
     293,   486,   487,   488,   482,   490,   491,   492,   493,   494,
     495,   500,   171,   500,   500,   482,   171,   500,   500,   500,
     500,   486,   487,   488,   500,   490,   491,   492,   493,   494,
     495,   500,   500,   444,  1980,  2472,   500,   500,   417,   500,
    1305,   501,  1988,   277,   500,   503,   500,   500,   500,  2502,
     500,   285,   499,   486,   487,   488,   499,   490,   491,   492,
     493,   494,   495,   155,   499,   499,   458,  1332,   458,  2023,
     447,   503,   488,   287,  2028,  2021,  2030,  2023,   484,   289,
    2034,  2035,   288,   288,   288,   512,   439,  2963,   417,   503,
     243,   272,   152,   200,   328,  2041,   499,  1385,  2044,   152,
     152,   417,   417,   279,  2050,   279,   417,  2053,    38,  2704,
    2056,   500,   417,   498,   461,   542,  2062,  2063,  2064,  2065,
    2066,  2067,   500,   499,  2070,  2071,  2072,  2073,  2074,  2075,
    2076,  2077,  2078,  2079,  1399,  2131,  2600,  2083,  2084,   503,
     433,  2087,   344,  2089,   285,  2098,     8,   287,  2094,    11,
    2096,    38,  2098,    15,   152,   277,    18,    19,    20,   500,
     143,  2107,   498,   171,  2110,   498,  2112,    11,   171,   166,
     500,   297,   500,  2119,  2120,   499,  2129,  2123,  2124,   406,
     500,   171,  2128,  2129,   485,   503,  2132,   500,   180,   446,
     500,    86,   350,  2146,   288,  1460,   500,   624,  2144,   499,
    2146,   152,  2997,   175,    38,   503,    81,   495,   500,   500,
    2144,   499,  2146,  2159,   502,   500,  2144,   499,  2146,   428,
     441,   498,   500,  2169,   512,  2828,   500,   500,   499,  1517,
     171,   499,   499,   503,   222,   500,   500,   500,   499,  2185,
     500,   503,   500,   408,   500,   296,   499,   222,  1299,  1300,
     499,  1302,   540,   541,   542,   294,    56,   184,   500,   488,
     461,   500,   500,   202,   117,    38,   499,   224,     8,    83,
     190,    11,  2725,   277,   500,    15,   486,   487,   488,    38,
     490,   491,   492,   493,   494,   495,   277,   417,   501,  2243,
     501,   272,  2238,   581,   501,   488,  2242,  2243,  2244,   417,
     109,   501,   501,    43,   501,    38,   501,   501,  2882,   501,
      50,  2265,   600,   601,   602,   603,   501,   605,   501,   287,
     222,   171,   501,   501,    57,    88,    38,   615,   501,  2267,
    1595,  2926,  1620,   501,  2270,    75,   624,   501,   501,  2792,
    2270,  2935,  2795,  2270,  2270,    57,   634,   501,   499,   637,
    2905,  2289,  2907,  2291,   501,  2301,   501,   219,   501,   501,
     461,   133,   501,   460,   501,   501,   501,   501,   501,   501,
      87,  2317,    89,  1661,    91,   108,   109,   501,   501,    38,
     501,   501,   501,   499,   117,   499,   503,   499,   499,   336,
     500,   499,   152,  2996,    75,   500,   108,   685,   686,   687,
     688,   124,   152,    38,   500,  2842,   358,   306,   358,    38,
     499,   499,   503,   500,   499,   499,   499,   327,   446,  2365,
    2366,    75,   499,   277,  2370,  2371,   248,   289,     8,  2375,
     441,    11,  2378,  2379,   189,    15,   176,  2383,    18,    19,
      20,   428,   175,   499,    69,   290,    69,    56,   503,  1714,
     499,    38,   192,   500,   499,    35,   441,   197,  1509,   376,
    2406,   488,   270,   175,  2410,   428,   199,   287,  1519,    38,
    1521,   290,  2406,  1524,   499,  2429,  2410,   290,  2406,  1530,
     499,  1532,  2410,   500,  2921,   500,  2432,   199,   500,   360,
     500,   202,   499,  1544,   234,   287,  2434,  2435,  1549,   287,
    1765,   500,  1553,  1554,  1555,  1556,     9,  1558,  1559,   122,
     343,   500,    24,   439,   357,    35,   500,   250,  1783,   499,
    2466,     9,   500,   632,  1531,   258,  2496,  2238,  2474,  2225,
    1897,  1451,  1959,  2021,  1799,  2600,  2941,   270,   250,   272,
    3047,  2697,  2999,  3008,  2997,  3040,   258,  2493,  1048,   289,
    1815,  2747,  1890,  1903,  2282,  2996,  2502,  2217,   270,  3006,
    2242,    69,  1887,  2994,  1964,  1830,  1831,    75,   301,  2274,
    1835,  2184,  1021,  1248,  1306,  2876,  1296,  2183,  2436,  2920,
      88,  2671,  2993,  1014,  1830,   986,  1850,  1014,  1503,   301,
    2894,  2915,  2538,  1037,  1036,  3035,  1865,  1475,   886,  2163,
    2976,  2909,  2814,  2428,  1831,  1502,  2146,  2412,  2789,   117,
    1039,   119,  2144,  2884,  2395,   348,  2883,  2901,  1347,  2902,
    2667,  1347,  1347,  1347,   486,   487,   488,  2979,   490,   491,
     492,   493,   494,   495,  2980,  3023,   348,   370,  1740,   219,
    1425,   381,  1671,  1851,  2582,  1783,  2600,  1570,  1780,  1818,
    2162,  1450,   601,  2432,  2600,    -1,  1657,   390,   370,   392,
    2606,    -1,   395,  2609,    -1,   953,  2612,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2621,  2622,    -1,   390,  2625,
      -1,    -1,  1733,   538,    -1,    -1,    -1,   538,    -1,  1740,
      -1,    -1,  1980,  2639,    -1,    -1,   204,    -1,    -1,    -1,
      -1,    -1,  2648,    -1,    -1,  2639,    -1,  2653,   996,   289,
    2656,  2639,  2666,    -1,  2648,    -1,    -1,  2663,  2664,  2653,
    2648,    -1,  2656,    -1,    -1,  2653,  1014,  1015,  2656,  2675,
      -1,  2677,    -1,  1021,  1022,    -1,  1024,    -1,    -1,    -1,
      -1,  2675,    -1,   483,    -1,    -1,    -1,  2675,    -1,  2695,
     490,   491,   492,   493,   494,   495,  2044,    -1,    -1,  1047,
    1048,    -1,    -1,    -1,   272,    -1,   499,    -1,    -1,   277,
      -1,  2725,  1060,    -1,  2062,    -1,    -1,  1828,   495,  2725,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1077,
      -1,    -1,    -1,  1081,    -1,    -1,    -1,    -1,  2736,    -1,
      -1,  2089,    -1,    -1,    -1,    -1,    -1,    -1,  2096,    -1,
      -1,  2757,   320,    -1,  2760,  2761,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2757,    -1,    -1,    -1,    -1,   336,  2757,
      -1,  2119,    -1,  2098,    -1,    -1,    -1,    -1,  2784,    -1,
      -1,    -1,  2788,    -1,    -1,    -1,  2792,    -1,  2801,  2795,
      -1,    -1,    -1,    -1,  2788,  2801,    -1,    -1,    -1,    -1,
    2788,    -1,    -1,    -1,  2129,    -1,    -1,    -1,    -1,  2815,
      -1,    -1,  2818,  1300,    -1,  1302,    -1,    -1,     0,  2144,
      -1,  2146,  2828,    -1,    -1,    -1,    -1,  2833,    -1,    -1,
     745,    -1,    -1,    -1,   745,    -1,    -1,  2851,   615,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,   634,    -1,  2857,
    1971,    -1,    -1,    -1,    -1,    -1,   434,  1215,    -1,    -1,
      -1,    -1,    -1,   441,    -1,  1223,    -1,    -1,  2884,    -1,
      -1,    -1,    -1,    -1,  1232,    -1,    -1,    -1,    -1,    -1,
    2884,    -1,    -1,    -1,    -1,  2243,  2884,    -1,    -1,  2905,
      -1,  2907,    -1,  2909,    -1,    -1,    -1,  2913,   685,   686,
     687,   688,    38,    95,  2920,    -1,    -1,  1265,  2916,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2920,    -1,    -1,    -1,
      -1,    57,  2920,    -1,    -1,    -1,    -1,  2943,    -1,    -1,
      -1,    -1,  2267,    -1,    -1,    -1,    -1,    -1,  1296,  1297,
      -1,  1299,  1300,  2301,  1302,  1303,    -1,  2963,    -1,    -1,
      -1,    -1,    -1,    -1,  2289,   147,  2291,   882,    -1,    -1,
    2976,   882,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,
      -1,    -1,   108,  2997,   166,    -1,    -1,    -1,    -1,   171,
    2996,  2997,    -1,    -1,    -1,    -1,    -1,    -1,   180,    -1,
      -1,    -1,   184,    -1,  1352,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3019,  3012,  1363,  3022,  3023,    -1,    -1,
     538,    -1,  1509,  2371,    -1,  3019,    -1,    -1,    -1,    -1,
      -1,  3019,  1519,   215,  1521,    -1,    -1,  1524,    -1,    -1,
      -1,    -1,    -1,  1530,     8,  1532,    -1,    11,  1396,  3055,
      -1,    15,    -1,   235,    18,    19,    20,  1544,    -1,    -1,
      -1,    -1,  1549,    -1,    -1,    -1,  1553,  1554,  1555,  1556,
      -1,  1558,  1559,   199,    -1,    -1,    -1,    -1,    -1,  1427,
    1428,  2406,    -1,    -1,    -1,  2410,     8,    -1,    -1,    11,
    3096,    -1,  2203,    15,    -1,    -1,    18,    19,    20,    -1,
      -1,  1449,   284,  1451,    -1,   287,    -1,    -1,    -1,  2434,
    2435,   293,    -1,    35,  1462,  1463,    -1,    -1,    -1,  2230,
      -1,    -1,    -1,    -1,   250,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   258,    -1,  2245,  2246,  2247,  2248,  2249,  2250,
    2251,  2252,  2253,  2254,   270,   327,  1061,    -1,    -1,    -1,
    1061,    -1,  1500,    -1,  2502,    -1,    -1,    -1,    -1,    -1,
    1508,  1509,    -1,    -1,    -1,    -1,    -1,    -1,   350,    -1,
      -1,  1519,  1520,  1521,  1522,   301,  1524,    -1,    -1,    -1,
      -1,    -1,  1530,    -1,  1532,    -1,    -1,    -1,    -1,    -1,
    2538,    -1,    -1,    -1,    -1,  1543,  1544,    -1,    -1,    -1,
    1548,  1549,    -1,    -1,    -1,  1553,  1554,  1555,  1556,    -1,
    1558,  1559,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   996,
      -1,    -1,   348,    -1,   406,    -1,    -1,   745,    -1,    -1,
    1578,  1579,  1580,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   370,  1022,    -1,    -1,  1596,    -1,
      -1,   433,    -1,    -1,    -1,   219,    -1,  2582,    -1,   441,
      -1,  2609,    -1,    -1,   390,    -1,    -1,    -1,    -1,    -1,
    1047,    -1,    -1,    -1,    -1,    -1,   458,    -1,   460,   461,
      -1,    -1,    -1,  1060,    -1,    -1,    -1,   538,    -1,    -1,
    2401,    -1,    -1,    -1,    -1,    -1,    -1,   219,    -1,    -1,
      -1,    -1,    -1,    -1,  1081,  2416,    -1,  1222,    -1,    -1,
      -1,  1222,    -1,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,    -1,    -1,  2648,    -1,   289,    -1,    -1,  2653,    -1,
      -1,  2656,    -1,  1248,  1249,    -1,    -1,  1248,  1249,    -1,
      -1,  1828,     0,    -1,    -1,    -1,    -1,    -1,  1263,    -1,
      -1,    -1,  1263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2473,    21,   882,    -1,    -1,   289,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    33,    34,  2725,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1733,    -1,    -1,    -1,    -1,
      -1,    49,  1740,    -1,    -1,    -1,    -1,    -1,   538,    -1,
      58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2736,    70,  2761,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,  1777,
      -1,    -1,    -1,    -1,    -1,    93,    -1,    95,    -1,    -1,
     111,   112,    -1,    -1,  2792,    -1,  1223,  2795,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,
      -1,  1809,    -1,  2788,    -1,    -1,    -1,  1815,    -1,   127,
    1385,    -1,    -1,    -1,  1385,    -1,  2801,    -1,    -1,   137,
    1828,    -1,    -1,  1831,  1971,   143,    -1,  1835,    -1,    -1,
    1838,  1839,    -1,   151,   745,   153,   154,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,
      -1,    -1,    -1,    -1,    -1,    -1,   187,   188,    -1,    -1,
      -1,    -1,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,  2857,    -1,  2645,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,  1061,  1892,    -1,    -1,  2658,    -1,    -1,
    2661,    -1,    -1,   211,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,   237,
      -1,   252,   253,   254,   255,   256,   257,    -1,    -1,   260,
     261,  2916,    -1,    -1,    -1,  2706,    -1,    -1,    -1,    -1,
      -1,    -1,  1517,    -1,    23,   745,  1517,  1955,    -1,    -1,
      -1,    -1,  1960,    -1,    -1,  2726,  2727,    -1,    -1,    -1,
    1968,  1969,  1970,  1971,    -1,  1973,    -1,    -1,    -1,    -1,
    2741,   882,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,  1990,    -1,    18,    19,    20,    -1,    -1,  2997,
      -1,  1428,    -1,    -1,  2002,    -1,   314,    76,    -1,   317,
      -1,    35,    -1,    -1,  2775,    -1,    -1,    -1,    -1,    -1,
    2018,    -1,  1449,    92,  1451,   111,   112,    -1,    -1,    -1,
      -1,    -1,  2793,    -1,  2032,  2033,     8,  3012,   346,    11,
      -1,    -1,    -1,    15,    -1,   366,   367,   355,    -1,    -1,
      -1,    -1,    -1,    -1,  1222,  1620,  2817,  2055,    -1,  1620,
     538,   369,    -1,    -1,    -1,    -1,  2203,    -1,   376,    -1,
      -1,    43,   380,  1500,    -1,    -1,    -1,   146,    50,    -1,
    1248,  1249,   390,    -1,    -1,    -1,    -1,   156,    -1,    -1,
      -1,    -1,   882,  2230,   402,  1263,  1661,    -1,   406,   168,
    1661,   187,   188,    75,   173,    -1,    -1,    -1,  2245,  2246,
    2247,  2248,  2249,  2250,  2251,  2252,  2253,  2254,    -1,    -1,
      -1,    -1,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,   442,    -1,  2897,    -1,    -1,   447,
    2901,    -1,    -1,  2141,  2142,  2143,  2144,    -1,  2146,  2147,
    2148,  1578,  1579,   461,    -1,  2153,  2154,    -1,   479,   480,
    1061,    -1,    -1,    -1,    -1,    -1,   252,   253,   254,   255,
     256,   257,    -1,   145,   260,   261,   245,   485,   499,    -1,
     249,    -1,    -1,    -1,    -1,  2183,    -1,    -1,    -1,    -1,
      -1,   499,    -1,    -1,   502,   219,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2201,   176,  2203,  2967,    -1,    -1,  2207,
    2208,  2209,    -1,  2211,    -1,    -1,    -1,  1385,    -1,    -1,
     192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,
     111,   112,  2230,    -1,  2232,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   312,    -1,    -1,    -1,  2245,  2246,  2247,
    2248,  2249,  2250,  2251,  2252,  2253,  2254,   326,    -1,    -1,
      -1,    -1,   234,    -1,    -1,   289,    -1,   745,    -1,    -1,
    2268,  1061,    -1,    -1,  2272,    -1,   600,   601,    -1,    -1,
     366,   367,    -1,    -1,  2282,    -1,    -1,    -1,    -1,    -1,
     359,    -1,    -1,   362,    -1,  2293,    -1,    -1,    -1,    -1,
      -1,   370,    -1,    -1,   373,    -1,   187,   188,    -1,    -1,
      -1,    -1,    -1,  2311,    -1,    -1,    -1,   289,    -1,    -1,
      -1,  1222,    -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2473,   406,   662,   663,
      -1,    -1,    -1,    -1,   413,    -1,    -1,  1248,  1249,  1517,
      -1,    -1,    -1,   422,    -1,    -1,    -1,    -1,    -1,   428,
      -1,    -1,  1263,  2361,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   252,   253,   254,   255,   256,   257,    -1,    -1,   260,
     261,    -1,  1809,    -1,   453,    -1,    -1,  2385,    -1,  2387,
    2388,  2389,  2390,   479,   480,    -1,  2394,  2395,    -1,  2397,
    2398,    -1,    -1,  2401,   882,    -1,    -1,    -1,  2406,   381,
      -1,    -1,  2410,    -1,    -1,  1980,    -1,    -1,  2416,  1980,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1222,    -1,  2432,    -1,    -1,    -1,  2436,    -1,
      -1,    -1,    -1,  2441,    -1,    -1,    -1,    -1,    -1,  2447,
      -1,    -1,  1620,    -1,    -1,  2453,    -1,    -1,  1248,  1249,
      -1,  2459,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,  1263,  2472,  2473,    -1,    -1,    -1,  2044,
      -1,    -1,  2480,  2044,  1385,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,  1661,    -1,    -1,    -1,  2062,    -1,  2497,
      -1,  2062,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
     492,   493,   494,   495,  2089,    -1,    -1,    -1,  2089,    -1,
      -1,  2096,    -1,  1960,    -1,  2096,    -1,    -1,    -1,    -1,
      -1,    -1,  1969,  1970,    -1,    -1,  1973,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2119,    -1,    -1,   881,  2119,    -1,
      -1,    -1,    -1,  1990,    -1,    -1,    -1,    -1,    -1,  2706,
      -1,    -1,    -1,    -1,   898,  2573,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1061,    -1,  2583,    -1,    -1,    -1,  2726,
    2727,    -1,    -1,    -1,    -1,  1385,  2594,    -1,   479,   480,
      -1,    -1,    -1,   927,  2741,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1517,    -1,    -1,    -1,
      -1,    -1,    -1,   947,   948,   949,    -1,    -1,   952,    -1,
      -1,    -1,  2630,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2639,  2640,    -1,  2642,    -1,    -1,  2645,    -1,    -1,
    2648,   975,    -1,    -1,    -1,  2653,    -1,    -1,  2656,    -1,
    2658,    -1,    -1,  2661,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2675,  2243,    -1,
    2817,    -1,  2243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1029,    -1,    -1,  2706,  1033,
    1034,    -1,    -1,    -1,  2141,  2142,  2143,    -1,    -1,  1620,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1517,  2726,  2727,
      -1,    -1,    -1,    -1,    -1,    -1,  2301,    -1,    -1,  2737,
    2301,  2739,    -1,  2741,  1222,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2754,    -1,    -1,  2757,
    1661,    -1,  1086,    -1,    -1,    -1,    -1,    -1,     0,    -1,
    1248,  1249,    -1,  1097,  2201,    -1,    -1,  2775,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1263,    -1,    -1,    -1,    -1,
    2788,    -1,    -1,    -1,    -1,  2793,    -1,  1121,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2371,    -1,    -1,    -1,
    2371,    -1,  1980,  2811,    -1,    -1,    -1,  2815,    -1,  2817,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2826,    -1,
    1620,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2842,  2272,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2856,    -1,
      -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1661,    -1,    -1,    -1,    -1,  2044,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2884,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2062,  2893,    -1,    -1,    -1,  2897,
      -1,    -1,    -1,  2901,    -1,    -1,    -1,  1385,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   147,    -1,    -1,    -1,    -1,
      -1,  2089,  2920,  2921,  2922,  2923,    -1,    -1,  2096,   161,
      -1,    -1,    -1,    -1,   166,    -1,    -1,  2502,    -1,   171,
      -1,  2502,    -1,    -1,    -1,    -1,    -1,    -1,   180,    -1,
      -1,  2119,   184,    -1,  2952,    -1,    -1,    -1,    -1,    -1,
    2387,  2388,  2389,  2390,    -1,    -1,    -1,    -1,    -1,  2967,
      -1,    -1,    -1,  2538,    -1,    -1,    -1,  2538,    -1,    -1,
      -1,  2979,    -1,   215,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2993,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3013,    -1,  1341,    -1,    -1,
      -1,  3019,    -1,    -1,    -1,    -1,    -1,  1351,    -1,  1353,
      -1,    -1,  1356,  1357,  1358,  1359,    -1,  3035,  3036,  1517,
      -1,    -1,    -1,    -1,  2609,    -1,    -1,    -1,  2609,    -1,
      -1,    -1,   284,  2480,    -1,   287,  1380,    -1,    -1,    -1,
      -1,   293,  1386,  1387,  1388,  1389,  1390,  1391,  1392,    -1,
      -1,    -1,    -1,  1397,  1398,  2243,    -1,    -1,  1402,  1980,
      -1,    -1,  1406,    -1,    -1,  1409,  1410,  1411,  1412,  1413,
    1414,  1415,  1416,  1417,   875,   327,  1420,    -1,    -1,   880,
      -1,    -1,    -1,  1427,    -1,    -1,  1430,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   350,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1452,     0,
      -1,    -1,    -1,  2301,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1620,  2044,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2725,  2062,  1486,  1487,  2725,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,   406,    -1,    -1,    15,    16,    17,
      18,    19,    20,  1661,    -1,    -1,   967,    -1,  2089,    -1,
    1980,    -1,    -1,    -1,    -1,  2096,  2761,    35,    -1,    -1,
    2761,   433,    -1,  2371,    -1,    43,    -1,    -1,    -1,   441,
      -1,   992,    50,   994,   995,    -1,    -1,    -1,  2119,    -1,
      -1,    -1,    -1,    -1,    95,    -1,   458,  2792,   460,   461,
    2795,  2792,    -1,    -1,  2795,    -1,    -1,    75,    -1,    -1,
    1564,    -1,    -1,  1567,  1568,    -1,  1570,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2044,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,    -1,  2062,    -1,    -1,  1599,   147,    -1,    -1,    -1,
      -1,  1062,    -1,    -1,  1065,  1066,    -1,    -1,    -1,    -1,
     161,    -1,    -1,    -1,    -1,   166,    -1,    -1,    -1,  2089,
     171,    -1,    -1,    -1,    -1,    -1,  2096,    -1,    -1,   180,
    2737,    -1,    -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2754,    -1,  2119,
      -1,    -1,    -1,    -1,  2502,  1659,    -1,    -1,   176,    -1,
      -1,    -1,  2243,    -1,   215,    -1,  1670,    -1,    -1,    -1,
      -1,  1675,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,    -1,
    2538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1714,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,  2826,
    2301,  1725,    -1,  1727,  1728,    -1,    -1,    -1,    -1,    -1,
      -1,  1735,    -1,   284,    -1,  1739,   287,    -1,  1742,    -1,
      -1,    -1,   293,    -1,    -1,    -1,    -1,    -1,    -1,  2856,
      -1,    -1,  2997,    -1,   272,    -1,  2997,   275,    -1,    -1,
      -1,  2609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     968,   289,    -1,  2243,   292,  1779,   327,    -1,  1782,    -1,
    1784,    -1,    -1,    -1,    -1,  1246,    -1,    -1,    -1,    -1,
    2371,    -1,    -1,    -1,    -1,    -1,  1257,    -1,  1259,   350,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1268,    -1,    -1,
      -1,  1009,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1980,    -1,  1285,    -1,    -1,    -1,    -1,    -1,
      -1,  2301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1850,    -1,    -1,    -1,
    1311,  1312,    -1,    -1,    -1,   406,    -1,    -1,    -1,    -1,
      -1,  1865,  1866,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2725,    -1,    -1,
    1884,    -1,   433,  1344,  1345,    -1,  2044,  1348,  1349,    -1,
     441,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2371,    -1,    -1,  2062,    -1,    -1,   458,    -1,   460,
     461,    -1,    -1,  2761,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2502,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1127,
      -1,  2089,    -1,    -1,  1132,    -1,    -1,    -1,  2096,  1943,
      -1,    -1,    -1,    -1,  2792,    -1,   497,  2795,    -1,   500,
     501,   502,    -1,    -1,    -1,    -1,    -1,  2538,    -1,    -1,
      -1,  2119,    -1,    -1,    -1,   483,    -1,    -1,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,    -1,  1988,   503,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1486,  1487,    -1,  2609,    -1,
      -1,    -1,  2502,    -1,    -1,    -1,    -1,  2041,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2050,    -1,    -1,  2053,
      -1,    -1,  2056,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2538,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1537,    -1,    -1,  2083,
    2084,    -1,    -1,  2087,    -1,  2243,  1547,    -1,    -1,  1550,
      -1,    -1,    -1,    -1,  2098,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2107,    -1,    -1,  2110,    -1,  2112,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2120,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2128,  2129,    -1,    -1,  2132,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2609,
      -1,  1339,    -1,  2301,  2725,    -1,    -1,    -1,    -1,  2997,
      -1,    -1,  1350,    -1,    -1,  2159,  1354,    -1,    -1,    -1,
    1621,  1622,  1360,  1361,  1362,  2169,    -1,    -1,    -1,    -1,
      -1,  1369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2761,  2185,    -1,  1644,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,  1657,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,  2792,    -1,  2371,  2795,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    38,  1426,    -1,
      -1,    -1,    43,    -1,    -1,    -1,    -1,     8,    -1,    50,
      11,    -1,    -1,    -1,    15,    -1,    -1,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,  2725,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,  1471,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1485,    -1,    -1,
      -1,  2761,  1490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2317,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2792,    -1,    -1,  2795,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2502,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1820,
      -1,  2365,  2366,    -1,    -1,   176,  2370,    -1,    -1,    -1,
      -1,  2375,    -1,    -1,  2378,  2379,    -1,    -1,    -1,  2383,
    2538,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1855,  1856,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,   219,   220,
      -1,    -1,    -1,    -1,    -1,    -1,  2997,    -1,    -1,    -1,
      -1,   192,    -1,   234,    -1,    -1,   197,    -1,  2432,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,
      -1,  2609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   272,  2466,   234,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1673,    -1,    -1,   289,    -1,
      -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2493,
      -1,    -1,    -1,    -1,  1692,    -1,    -1,    -1,    -1,    -1,
      -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1710,    -1,  1712,  1713,    -1,  1715,   289,  1717,
      -1,    -1,    -1,  1721,    -1,    -1,  1724,  2997,    -1,    -1,
      -1,  1729,    -1,    -1,  1732,  1996,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1744,    -1,    -1,    -1,
    1748,  1749,  1750,  1751,  1752,  1753,  1754,    -1,    -1,    -1,
      -1,    -1,  1760,  1761,    -1,  1763,  1764,  2725,    -1,    -1,
     381,    -1,    -1,    -1,    -1,    -1,    -1,  1775,    -1,    -1,
    1778,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1786,  1787,
    1788,  1789,  1790,  1791,  1792,  1793,  1794,  1795,    -1,    -1,
      -1,    -1,    -1,  2761,    -1,    -1,    -1,    -1,  2612,    -1,
     381,    -1,    -1,    -1,    -1,    -1,    -1,  2621,  2622,    -1,
      -1,  2625,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1827,
      -1,    -1,    -1,    -1,  2792,    -1,    -1,  2795,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2663,
    2664,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   483,  2677,    -1,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
      -1,  2695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1948,  1949,  1950,    -1,    -1,    -1,    35,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2784,    -1,  2243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,  2801,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2815,    -1,    -1,  2818,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,  2833,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2997,
      -1,    -1,  2040,    35,    -1,    -1,    -1,    -1,  2046,    -1,
      -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
      -1,  2059,  2060,  2061,    -1,  2063,  2064,  2065,  2066,  2067,
      -1,    -1,  2070,  2071,  2072,  2073,  2074,  2075,  2076,  2077,
    2078,  2079,  2080,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,
      -1,  2099,    -1,    -1,  2102,  2909,  2104,    -1,    -1,  2913,
    2108,  2109,    -1,   192,    -1,    -1,    -1,    -1,   197,    -1,
      -1,    -1,    -1,    -1,  2122,  2123,  2124,  2125,    -1,  2127,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2943,
     219,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2976,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,
     192,    -1,    -1,    -1,    -1,   197,  2204,    -1,    -1,    -1,
     289,    -1,    -1,   292,    -1,    -1,    -1,    -1,  3022,  3023,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,    -1,
    2491,    -1,    -1,    -1,    -1,  2496,    -1,    -1,    -1,    -1,
      -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3055,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     272,    -1,    -1,   275,  2545,  2546,    -1,    -1,    -1,    -1,
      -1,    43,  3096,    -1,  2292,    -1,    -1,   289,    50,    -1,
     292,    -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2318,    -1,    -1,    75,  2322,  2323,    -1,  2325,    -1,    -1,
    2328,  2329,  2330,  2331,  2332,    -1,    -1,    -1,  2336,  2337,
    2338,  2339,  2340,  2341,  2342,  2343,  2344,  2345,  2346,  2347,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2357,
      -1,    -1,    -1,    -1,    -1,    -1,  2364,    -1,    -1,  2367,
      -1,  2369,    -1,    -1,    -1,  2373,    -1,    -1,  2376,  2377,
      -1,    -1,  2380,  2381,    -1,     8,  2384,    -1,    11,   381,
      -1,    -1,    15,   145,    -1,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,   483,    -1,    -1,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      43,   500,    -1,    -1,   176,  2423,    -1,    50,    -1,    -1,
      -1,    -1,    -1,  2431,    -1,    -1,    -1,    -1,    -1,    -1,
     192,    -1,    -1,    -1,    -1,   197,  2444,    -1,     8,    -1,
      -1,    11,    75,  2714,  2715,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,  2725,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    35,  2474,    -1,    -1,    -1,
      -1,    -1,   234,    43,    -1,    -1,    -1,    -1,    -1,    -1,
      50,   483,    -1,    -1,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,   500,     8,
      -1,    -1,    11,    -1,    -1,    75,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    -1,    35,   289,    31,    -1,
      -1,    -1,    -1,    -1,    43,    38,    -1,    -1,    -1,    -1,
      -1,    50,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,   197,    -1,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   219,   220,    -1,    -1,
      -1,    -1,    -1,    -1,  2602,    -1,    -1,    -1,  2606,    -1,
      -1,   234,    -1,    -1,    -1,   108,   176,  2615,  2616,  2617,
      -1,    -1,  2620,    -1,    -1,  2623,  2624,    -1,    -1,   381,
    2628,    -1,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,
      -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,   219,
     220,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,  2692,    -1,    -1,    -1,   197,    -1,
    2698,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,   272,  2711,    -1,   275,    -1,    -1,    -1,    -1,
     219,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,
      -1,   483,   292,    -1,    -1,   234,  2997,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   250,   381,    -1,
      -1,  2759,  2760,    -1,    -1,   258,    -1,  2765,  2766,  2767,
      -1,    -1,    -1,   272,    -1,    -1,   275,   270,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,    -1,    -1,   292,    -1,    -1,    -1,    -1,   291,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,    -1,
      -1,  2809,  2810,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,    -1,    -1,    -1,    -1,  2824,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2834,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   342,
      -1,    -1,    -1,   346,    -1,   348,    -1,    -1,    -1,    -1,
     483,    -1,    -1,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,   370,    -1,    -1,
    2878,    -1,   381,   376,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,  2896,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2918,    -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,    -1,    -1,  2937,
     500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   444,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2981,   483,    -1,    -1,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,   500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3010,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
    3058,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
     132,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
     492,    -1,    -1,    -1,    -1,   497,    -1,   499,   500,    -1,
      -1,    -1,   504,    -1,   506,   507,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,   485,    -1,
      -1,    -1,    -1,   490,   491,    -1,    -1,    -1,    -1,    -1,
     497,    -1,   499,   500,    -1,    -1,    -1,   504,    -1,   506,
     507,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,   485,    -1,    -1,    -1,    -1,   490,   491,
      -1,    -1,    -1,    -1,    -1,   497,    -1,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   491,    -1,    -1,    -1,    -1,    -1,
     497,    -1,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
     507,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    -1,    -1,    36,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
      -1,    -1,    -1,    -1,    -1,   497,    -1,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   491,   492,    -1,    -1,    -1,    -1,
     497,    -1,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
     507,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
     492,    -1,    -1,    -1,    -1,   497,    -1,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   491,   492,    -1,    -1,    -1,    -1,
     497,    -1,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
     507,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
      -1,    -1,    -1,    -1,    -1,   497,    -1,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   491,    -1,    -1,    -1,    -1,    -1,
     497,    -1,   499,   500,    -1,    -1,    -1,   504,    -1,   506,
     507,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
      -1,    -1,    -1,    -1,    -1,   497,    -1,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   491,    -1,    -1,    -1,    -1,    -1,
     497,    -1,   499,   500,    -1,    -1,    -1,   504,    -1,   506,
     507,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
      -1,    -1,    -1,    -1,    -1,   497,    -1,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   491,    -1,    -1,    -1,    -1,    -1,
     497,    -1,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
     507,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,    -1,   458,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
      -1,    -1,    -1,    -1,    -1,   497,    -1,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   491,    -1,    -1,    -1,    -1,    -1,
     497,    -1,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
     507,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
      -1,    -1,    -1,    -1,    -1,   497,    -1,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   491,    -1,    -1,    -1,    -1,    -1,
     497,    -1,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
     507,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
      -1,    -1,    -1,    -1,    -1,   497,    -1,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   491,    -1,    -1,    -1,    -1,    -1,
     497,    -1,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
     507,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
      -1,    -1,    -1,    -1,    -1,   497,    -1,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   491,    -1,    -1,    -1,    -1,    -1,
     497,    -1,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
     507,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
      -1,    -1,    -1,    -1,    -1,   497,    -1,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,   507,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,    -1,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,    -1,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   491,    -1,    -1,    -1,    -1,    -1,
     497,    -1,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
     507,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,
      -1,    -1,     3,     4,     5,     6,     7,   499,     9,    10,
      -1,    -1,    -1,    -1,   506,   507,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,
     491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,   232,   233,   234,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,    -1,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,    -1,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
      -1,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,
     491,     3,    -1,    -1,    -1,    -1,   497,    -1,   499,    -1,
      -1,    -1,    -1,   504,    -1,   506,   507,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    -1,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    -1,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,    -1,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,    -1,   176,   177,    -1,   179,    -1,    -1,
      -1,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,    -1,
      -1,   273,   274,   275,   276,    -1,    -1,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,    -1,   296,   297,   298,    -1,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,    -1,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,    -1,
     422,    -1,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,    -1,   448,    -1,   450,   451,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   479,   480,   481,
     482,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,   500,    -1,
      -1,   503,    38,    -1,    40,    41,    -1,    43,    44,    45,
      -1,    47,    48,    49,    50,    51,    -1,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,   172,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,    -1,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,   232,   233,    -1,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,    -1,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
      -1,   297,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,    -1,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,   447,   448,    -1,   450,    -1,   452,   453,   454,   455,
     456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   500,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,    -1,   231,   232,   233,   234,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,    -1,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,   289,   290,   291,    -1,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,   455,
     456,    -1,    -1,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,    -1,   485,
       3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,    -1,
      -1,    -1,    -1,   499,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,    -1,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,   287,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
       3,    -1,     5,    -1,    -1,    -1,    -1,   490,   491,   492,
      -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,    -1,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,    -1,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
       3,    -1,   485,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,    -1,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,    -1,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,    -1,   450,    -1,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
       3,    -1,   485,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,    -1,   450,    -1,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,     3,   485,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,    -1,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,    -1,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,    -1,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,    -1,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,   447,   448,    -1,   450,    -1,
     452,   453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,    -1,     3,     4,     5,    -1,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    15,    -1,   499,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      -1,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,    -1,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,    -1,   296,   297,   298,    -1,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,   314,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   479,
     480,   481,   482,    -1,     3,    -1,   486,   487,   488,     8,
     490,   491,   492,   493,   494,   495,    15,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
      -1,   450,    -1,   452,   453,   454,   455,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,    -1,    -1,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    -1,     8,    -1,    -1,    11,
      -1,    -1,    43,    15,    16,    17,    18,    19,    20,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,     8,    -1,    75,    11,    -1,    -1,    50,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
      -1,     8,    -1,    75,    11,    -1,    -1,    43,    15,    16,
      17,    18,    19,    20,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    75,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,     8,
      -1,    -1,    11,    -1,   176,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,
     192,    -1,    -1,    -1,    -1,   197,    35,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    43,    -1,    -1,    -1,    -1,    -1,
     176,    50,    -1,    -1,    -1,    -1,    -1,   219,   220,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,   197,   234,    -1,    -1,    -1,    75,    -1,    -1,   176,
      -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   219,   220,   192,    -1,    -1,   289,    -1,
     197,   292,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,
     272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   219,   220,    -1,    -1,    -1,   289,    -1,    -1,
     292,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   272,    -1,   176,   275,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,    -1,   289,   192,    -1,   292,    -1,    -1,   197,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,
     219,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      -1,    -1,    -1,   272,    43,    -1,   275,    -1,    -1,    -1,
      -1,    50,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,
     289,    -1,   483,   292,    -1,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    75,    -1,    -1,   500,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   483,    -1,    -1,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,   500,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,   483,    -1,    -1,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
      35,    -1,    -1,    -1,   500,    -1,     8,    -1,    43,    11,
      -1,    -1,   381,    15,    -1,    50,   483,    -1,    -1,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,   500,    -1,     8,    -1,   176,    11,    -1,
      75,    43,    15,    16,    17,    18,    19,    20,    50,     8,
      -1,    -1,    11,   192,    -1,    -1,    15,    -1,   197,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    -1,    -1,    75,    -1,    -1,    -1,    50,    -1,    -1,
     219,   220,    -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,
       8,    -1,    75,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,   483,    -1,    75,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    35,    -1,    -1,
      -1,   500,    -1,   272,    -1,    43,   275,    -1,    -1,    -1,
      -1,   176,    50,   145,    -1,    -1,    -1,    -1,    -1,    -1,
     289,    -1,    -1,   292,    -1,    -1,    -1,   192,    -1,    -1,
      -1,    -1,   197,    -1,    -1,    -1,    -1,    75,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   219,   220,   145,    -1,    -1,    -1,
     192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   234,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,     8,   192,
      -1,    11,    -1,    -1,   197,    15,    16,    17,    18,    19,
      20,    -1,   234,   192,    -1,    -1,    -1,   272,   197,    -1,
     275,    -1,   381,    -1,    -1,    35,   219,   220,    -1,    -1,
      -1,    -1,    -1,    43,   289,    -1,    -1,   292,    -1,    -1,
      50,   234,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
      -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   192,    75,    -1,   289,    -1,   197,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,
      -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   219,   220,    -1,    -1,    -1,   289,    -1,    -1,   292,
      -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
     289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   483,    -1,   381,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,   500,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,
      -1,   289,     8,    -1,   292,    11,   176,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   192,    -1,    -1,    -1,    -1,   197,   381,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,
      -1,    -1,   381,    -1,    50,    -1,    -1,    -1,    -1,   219,
     220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,   483,    75,
      -1,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   483,   272,    -1,    -1,   275,    -1,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,   289,
      -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     483,    -1,    -1,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,   483,    -1,    -1,   500,    -1,    -1,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,   483,    -1,    -1,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
      -1,   381,   500,   219,   220,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
     500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,   483,    -1,    -1,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,    -1,   498,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   492,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    -1,   492,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,   287,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,     4,     5,    -1,    -1,
      -1,     9,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,   287,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,     4,     5,    -1,    -1,
      -1,     9,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,   287,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,    -1,     8,    -1,    -1,
      11,    -1,   490,   491,    15,    16,    17,    18,    19,    20,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    -1,    43,    -1,    -1,    -1,    -1,    35,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    43,     8,    -1,    -1,    11,
      -1,    -1,    50,    15,    16,    17,    18,    19,    20,     8,
      -1,    -1,    11,    -1,    75,    -1,    15,    16,    17,    18,
      19,    20,    -1,    35,    -1,    -1,    -1,    75,    -1,    -1,
      -1,    43,    -1,    -1,    -1,    -1,    35,    -1,    50,    38,
      -1,    -1,    -1,    -1,    43,     8,    -1,    -1,    11,    -1,
      -1,    50,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    75,    -1,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    75,    -1,    -1,    -1,
      43,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    -1,    -1,   176,    -1,    35,   166,    -1,
      38,    -1,    -1,   171,    -1,    43,    -1,    -1,   176,    -1,
      -1,   192,    50,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,   165,    -1,    -1,    -1,    75,   219,   220,
      -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
      -1,   219,   220,   234,    -1,    -1,    -1,   176,    -1,    -1,
     192,    -1,    -1,    -1,    -1,   197,   234,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,    -1,
      -1,   272,    -1,   176,   275,    -1,    -1,    -1,    -1,    -1,
     219,   220,   234,    -1,   272,    -1,    -1,   275,   289,   192,
      -1,   292,    -1,    -1,   197,   234,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   219,   220,   176,    -1,
     272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   234,    -1,   272,   192,    -1,   275,   289,    -1,   197,
     292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   219,   220,   315,    -1,    -1,    -1,    -1,    -1,   272,
      -1,    -1,   275,    -1,    -1,    -1,   234,    -1,    -1,    -1,
     381,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,
      -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   310,    -1,    -1,
      -1,    -1,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,
      -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
     441,    -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,
      -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,   483,    -1,    -1,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   483,    -1,    -1,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,   483,    -1,    -1,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     483,    -1,    -1,   486,   487,   488,    35,   490,   491,   492,
     493,   494,   495,    -1,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   483,    75,    -1,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    -1,     8,    38,    -1,
      11,    -1,    -1,    43,    15,    16,    17,    18,    19,    20,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    -1,    -1,    75,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   171,    -1,    -1,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,    -1,     8,    -1,   197,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     219,   220,    -1,    35,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    43,    -1,    -1,    -1,   234,    -1,    -1,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   192,   272,    -1,    -1,   275,   197,    -1,    -1,
       8,    -1,    -1,    11,    -1,   176,    -1,    15,    -1,    -1,
     289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   219,
     220,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    43,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,   219,   220,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,    -1,    -1,    75,    -1,    -1,
      -1,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,    -1,     8,    -1,   289,
      11,    -1,   292,    -1,    15,    16,    17,    18,    19,    20,
     192,   272,   381,    -1,   275,   197,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,   289,    -1,
      -1,   292,    43,    -1,    -1,    -1,    -1,   219,   220,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,
      -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    75,    -1,    -1,    15,    16,    17,
      18,    19,    20,     8,    -1,    -1,    11,    -1,   176,    -1,
      15,    -1,    -1,    18,    19,    20,    -1,    35,    -1,    -1,
     272,   381,    -1,   275,   192,    43,    -1,    -1,    -1,   197,
      35,    -1,    50,    -1,    -1,    -1,    -1,   289,    43,    -1,
     292,    -1,    -1,    -1,   483,    50,    -1,   486,   487,   488,
     381,   490,   491,   492,   493,   494,   495,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
      75,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,   414,    15,    -1,    -1,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    43,    -1,    -1,    -1,   197,    -1,    -1,    50,
      -1,   289,    -1,   483,    -1,    -1,   486,   487,   488,   381,
     490,   491,   492,   493,   494,   495,    -1,    -1,   219,   220,
      -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   234,    -1,   486,   487,   488,   176,   490,
     491,   492,   493,   494,   495,     8,    -1,    -1,    11,    -1,
      -1,   176,    15,    -1,   192,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,
      -1,   272,   197,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      43,   219,   220,    -1,    -1,    -1,    -1,    50,   289,    -1,
      -1,   292,    -1,   381,   219,   220,   234,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,
      -1,   483,    75,    -1,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,   197,   272,    -1,    -1,
     275,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   289,    -1,    -1,   292,   219,   220,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,    -1,   145,   234,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,    -1,
      -1,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   289,    -1,
      -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   483,    -1,    -1,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,   483,    -1,
      -1,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,     5,    -1,    -1,
     483,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,   492,
     493,   494,   495,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,   287,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    -1,    -1,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
     168,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,   434,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
     168,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,   434,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    -1,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    -1,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
      -1,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,    -1,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,    -1,    -1,   273,   274,   275,   276,    -1,
      -1,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,    -1,   296,   297,
     298,    -1,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,    -1,   314,   315,    -1,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,    -1,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,    -1,   422,    -1,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,    -1,   450,    -1,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,    -1,   450,    -1,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,    -1,   450,    -1,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,    -1,   450,    -1,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    -1,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    -1,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,    -1,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,    -1,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,    -1,    -1,
     273,   274,   275,   276,    -1,    -1,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,    -1,   296,   297,   298,    -1,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
      -1,   314,   315,    -1,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
      -1,   404,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,    -1,   422,
      -1,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,    -1,   448,    -1,   450,   451,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   479,   480,   481,   482,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      38,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      38,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      38,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,    -1,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    -1,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    -1,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
      -1,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,    -1,    -1,   273,   274,   275,   276,    -1,
      -1,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,    -1,   296,   297,
     298,    -1,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,    -1,   314,   315,    -1,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,    -1,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,    -1,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,    -1,   422,    -1,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,    -1,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    -1,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    -1,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,    -1,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,    -1,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,    -1,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,    -1,    -1,
     273,   274,   275,   276,    -1,    -1,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,    -1,   296,   297,   298,    -1,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
      -1,   314,   315,    -1,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,    -1,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,    -1,   402,
      -1,   404,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,    -1,   422,
      -1,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,    -1,   448,    -1,   450,   451,   452,
     453,   454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,   464,   465,   466,   467,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   479,   480,   481,   482,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,    -1,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,    -1,   452,   453,   454,   455,   456,    -1,
      -1,   459,    -1,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    21,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    31,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    49,    49,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    58,    58,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    70,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    81,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    93,    95,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,   113,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   127,   127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,   137,    -1,    -1,    -1,    -1,   143,   143,    -1,
      -1,    -1,    -1,    -1,    -1,   151,   151,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   167,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   211,   211,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   237,   237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   314,   314,
      -1,   317,   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     346,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   355,
     355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   369,   369,    -1,    -1,    -1,    -1,    -1,
     376,   376,    -1,    -1,   380,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   390,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   402,   402,    -1,    -1,
     406,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   442,   442,    -1,    -1,
      -1,   447,   447,    -1,    -1,   451,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   461,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,
     485,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   499,   499
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    21,    31,    33,    34,    49,    58,    70,    81,    93,
      95,   113,   127,   137,   143,   151,   153,   154,   167,   196,
     211,   237,   314,   317,   346,   355,   369,   376,   380,   390,
     402,   406,   442,   447,   461,   485,   499,   510,   511,   512,
     513,   514,   521,   532,   540,   541,   542,   559,   607,   610,
     613,   616,   618,   619,   620,   624,   631,   633,   640,   644,
     645,   646,   653,   657,   672,   674,   675,   678,   680,   681,
     682,   683,   684,   685,   736,   737,   882,   884,   885,   890,
     893,   899,   900,   902,   419,   464,   883,   200,   362,   370,
     406,   453,   883,     3,    21,    22,    23,    24,    25,    26,
      27,    28,    30,    31,    32,    40,    41,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    56,
      57,    58,    59,    60,    61,    64,    65,    66,    67,    68,
      70,    71,    72,    73,    74,    76,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    89,    90,    91,    92,
      93,    94,    96,    97,    98,    99,   100,   101,   102,   103,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   118,   120,   121,   122,   123,   124,   125,   127,   128,
     129,   130,   131,   134,   135,   136,   137,   138,   140,   141,
     142,   144,   145,   146,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   160,   162,   163,   164,   165,
     167,   169,   170,   172,   173,   174,   175,   176,   177,   179,
     181,   182,   183,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   198,   199,   200,   201,   202,
     203,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   216,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   231,   232,   233,   234,   236,   237,   238,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   273,   274,   275,   276,   278,   279,   280,   281,   282,
     283,   285,   286,   289,   290,   291,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   321,   322,   323,   324,   325,   326,   328,   329,   330,
     331,   332,   333,   334,   335,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   404,   405,
     407,   408,   409,   410,   411,   412,   413,   415,   416,   419,
     420,   421,   422,   423,   425,   426,   427,   428,   429,   430,
     431,   432,   435,   436,   437,   438,   439,   440,   442,   443,
     444,   445,   446,   447,   448,   450,   451,   452,   453,   454,
     455,   456,   459,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   533,   534,   535,   795,   867,   871,
     874,   883,    52,   171,   499,   554,   177,   238,   292,   362,
     410,   412,   428,   434,   437,   605,   652,     3,     5,    29,
     175,   246,   317,   399,   533,   865,   871,   872,    23,    76,
      92,   146,   156,   168,   173,   200,   245,   249,   312,   326,
     359,   362,   370,   373,   392,   406,   413,   422,   428,   453,
     625,   626,   629,   883,   865,   451,   499,   513,   514,   521,
     540,   541,   542,   559,   607,   610,   613,   616,   618,   619,
     620,   624,   631,   636,   640,   646,   653,   672,   674,   675,
     678,   680,   882,   884,   885,   890,   893,   899,   902,   110,
      70,   211,   110,     5,   673,   870,   871,   673,   871,   865,
      29,   415,   419,   871,   891,   892,   901,   883,    29,   132,
     692,   693,   177,   238,   362,   374,   415,   894,   895,   901,
     883,   447,   680,   685,   901,   288,   749,   862,   871,   872,
     172,   499,   887,   499,   334,   686,   687,   865,   686,   681,
     682,     0,   502,   451,   634,   122,   210,   439,   147,   215,
     293,   433,   695,   696,   681,   683,   684,   503,    29,   415,
     419,   680,   901,   190,   862,   865,   190,   862,   190,   749,
     190,   862,   499,   497,   501,   846,   848,   393,   394,   557,
     870,   680,   862,   410,   412,   410,   412,   344,   190,   871,
     871,   876,   173,   245,   334,   370,   406,   453,   611,   200,
      29,   865,   251,   422,   109,   406,   406,   453,   365,     3,
      46,    51,    52,    53,    54,    66,    67,    76,    84,    96,
     100,   101,   102,   103,   106,   114,   115,   136,   164,   170,
     172,   176,   190,   192,   206,   213,   214,   216,   219,   220,
     222,   232,   234,   246,   265,   266,   267,   275,   280,   296,
     298,   331,   353,   357,   375,   377,   381,   384,   399,   408,
     415,   416,   427,   440,   448,   451,   533,   536,   630,   760,
     762,   764,   766,   768,   770,   772,   773,   774,   776,   777,
     778,   780,   781,   875,   190,   627,   876,   190,   863,   865,
     190,   865,   499,   632,   636,     3,    46,    50,    51,    52,
      53,    54,    66,    67,    74,    76,    84,    96,   100,   101,
     102,   103,   106,   114,   115,   152,   158,   164,   170,   172,
     175,   176,   181,   182,   192,   206,   207,   213,   214,   216,
     219,   220,   222,   232,   234,   246,   265,   266,   267,   271,
     275,   278,   280,   295,   296,   298,   299,   313,   316,   331,
     353,   357,   375,   377,   381,   384,   399,   401,   408,   415,
     416,   421,   423,   427,   440,   447,   448,   451,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   533,
     537,   637,   639,   640,   642,   643,   634,   870,   673,   870,
     488,   499,   499,   676,   482,   221,   501,   287,     4,     6,
       7,     8,     9,    10,    37,    51,    53,    54,    62,    63,
      66,    67,    74,    76,   100,   101,   102,   103,   104,   105,
     106,   114,   115,   117,   152,   158,   159,   164,   181,   182,
     213,   214,   216,   239,   240,   265,   267,   272,   277,   278,
     280,   289,   299,   313,   331,   357,   375,   384,   401,   415,
     416,   421,   423,   424,   427,   440,   448,   483,   490,   491,
     492,   497,   499,   504,   506,   507,   681,   726,   765,   768,
     771,   772,   773,   775,   776,   777,   780,   781,   792,   794,
     795,   796,   798,   812,   813,   820,   840,   845,   852,   853,
     854,   867,   868,   869,   870,   871,   851,   853,   894,   894,
     870,   894,   482,   171,   417,   488,   499,   862,   492,   848,
       3,   170,   172,   451,   640,   886,   888,   170,   889,   792,
     824,   825,   871,   686,   503,   499,   878,   500,   500,   512,
     862,   171,   217,   621,   749,    29,   132,   691,   691,    56,
     691,   161,   166,   235,   284,   701,   703,   704,   729,   731,
     732,   733,   695,   696,   499,   482,   221,   152,    25,    31,
     137,   291,   342,   346,   376,   444,   526,   529,   530,   342,
     152,    38,    57,   108,   199,   250,   258,   270,   301,   342,
     348,   370,   376,   390,   515,   518,   529,   152,   342,   376,
     529,   152,   342,   376,   529,     3,    29,    46,    52,    76,
      84,    96,   100,   101,   102,   103,   106,   132,   170,   172,
     175,   176,   192,   206,   219,   220,   222,   232,   234,   246,
     266,   275,   296,   298,   353,   375,   381,   399,   408,   427,
     440,   449,   451,   492,   500,   533,   538,   792,   827,   828,
     873,   879,   792,   847,     3,    29,    33,    34,    35,    36,
      37,    38,    39,    42,    55,    62,    63,    69,    75,    77,
      88,    95,   104,   105,   117,   119,   126,   132,   133,   139,
     143,   147,   159,   161,   166,   168,   171,   178,   180,   184,
     197,   204,   215,   217,   229,   230,   235,   239,   240,   272,
     277,   284,   287,   288,   292,   293,   310,   320,   327,   336,
     350,   369,   386,   403,   406,   414,   417,   418,   424,   433,
     434,   441,   447,   449,   457,   458,   460,   461,   533,   537,
     539,   866,   880,   846,   500,   499,   594,   605,   272,   614,
     501,   877,    38,   453,   190,   862,   190,   609,   862,   862,
     862,    84,   649,   465,    85,   129,   304,   411,   450,   779,
     779,   779,   499,   767,   767,   316,   499,   769,   152,   499,
      66,    67,   779,   767,   764,   463,   485,   499,   782,   499,
     782,    60,   349,   503,   628,   499,    37,   763,   499,   111,
     112,   187,   188,   252,   253,   254,   255,   256,   257,   260,
     261,   366,   367,   479,   480,   499,   783,   784,   785,   786,
     787,   788,   789,   790,   791,   767,   152,   503,   628,   152,
     503,   628,   152,   287,   825,   500,   503,     4,   159,   287,
     424,   490,   491,   517,   520,   635,   637,   638,   641,   869,
     870,   636,   499,   549,   553,   517,   641,   896,   898,   827,
     762,   829,    38,   233,   871,   499,   849,   497,   681,   792,
     844,   499,   499,   166,   499,   499,   681,   499,   499,   499,
     792,   499,   499,   499,   499,   499,   499,   499,   499,   499,
     792,   792,   792,   148,   855,   856,   825,   826,   681,   792,
     824,   814,   815,   816,   872,     9,   849,   848,   499,   870,
     499,   869,   870,     3,     8,    11,    15,    16,    17,    18,
      19,    20,    35,    38,    43,    50,    75,   176,   192,   197,
     219,   220,   234,   272,   275,   289,   292,   381,   483,   486,
     487,   488,   490,   491,   492,   493,   494,   495,   818,   819,
     820,   822,   462,   799,   849,   298,   792,   503,   217,   688,
     499,   870,   849,   501,   848,   688,     3,   117,   238,   517,
     781,   870,   897,    99,   117,   898,   117,   898,   862,   500,
     503,   634,   503,   500,   687,   863,   864,    38,   878,   621,
     655,   862,   376,    38,   871,   683,   683,    29,   492,   697,
     698,   792,   683,   163,   269,   717,   224,   270,   330,   379,
     439,     4,     9,    29,   712,   792,   490,   491,   713,   714,
     792,   794,   729,   730,   704,   703,   701,   702,   166,   732,
     282,   734,   701,   729,   825,   233,   862,    69,    77,    88,
     168,   190,   320,   434,   576,   586,   601,   871,    77,    88,
     679,    88,   679,   499,   417,   499,   574,   244,   437,   574,
      88,   503,   417,   862,   764,   517,    56,   519,   517,   517,
     108,   250,   258,    56,   417,   461,   485,   516,   263,   362,
     516,   518,   749,    88,   417,   679,   362,   862,   417,   362,
     827,   827,   828,   500,   503,   695,   696,    13,    14,   498,
     508,   417,   593,   598,   871,   461,   552,   334,   406,   453,
     152,    95,   559,   615,   616,   646,   902,   866,   501,   762,
     862,   272,   515,   617,   272,    38,   499,   594,   594,   499,
     612,   190,   588,   650,   871,   499,   826,   869,   630,   829,
     779,   779,    37,   763,   415,   415,   869,   869,   762,   759,
     871,   497,   497,   869,   869,   417,   417,   417,   417,   627,
     876,   863,   865,   865,   876,   500,   636,   642,     4,   869,
       4,   869,   551,   558,   880,    52,    97,   123,   141,   145,
     167,   170,   185,   277,   285,   328,   555,   503,   500,   503,
     500,   503,   620,   653,   677,   680,   884,   825,   846,   826,
     457,   841,   842,   792,   825,   499,   869,   869,     3,   783,
     784,   785,   786,   787,   788,   789,   790,   830,   831,   870,
     869,   869,   792,     8,    15,    18,    19,    20,   486,   487,
     488,   490,   491,   492,   493,   494,   495,   818,   823,   871,
     792,   832,   490,   491,   499,   793,   794,   820,   834,   500,
     825,   792,   824,   835,   792,    55,   171,   230,   418,   792,
     825,   838,   792,   499,   871,   344,   860,   498,   500,   503,
     503,   505,   508,   825,   792,   791,   791,   762,   792,   792,
     792,   792,   792,   792,   792,     5,   880,   881,   415,    42,
     403,   850,   876,   792,   792,   499,   681,   839,   132,   159,
     272,   277,   282,   424,   435,   792,   277,   499,   792,   417,
      50,   176,   192,   197,   234,   381,   792,   792,   792,   792,
     792,   792,   792,   792,   792,   792,    29,    36,   386,   817,
     180,   162,   800,   357,   499,   813,   854,   177,   238,   406,
     410,   412,   437,   689,   862,   171,   738,   827,   492,   738,
     499,   870,   500,   862,   886,   532,   862,   792,   503,   500,
     499,   441,   623,   117,   300,   499,   654,   680,    38,   499,
     659,   668,   669,   671,   871,   871,    39,   126,   699,   699,
     503,   441,   699,   357,   358,   490,   491,   714,   716,   794,
     379,   224,   288,   309,   309,   503,   494,     4,   715,   869,
     715,   357,   358,   716,   861,   862,   276,   383,   735,   730,
     702,   500,   342,   529,   499,   190,   586,   865,   224,   272,
     224,   441,   499,   579,   761,   762,   865,   871,   190,   865,
     190,   871,    25,   137,   376,   525,   528,   570,   584,   880,
     865,   578,   597,   880,   865,   526,   865,   342,   376,   515,
     529,   517,   876,   865,   517,   876,   865,   517,   342,   376,
     529,   865,   865,   865,   865,   342,   376,   529,   865,   865,
     695,   695,   695,   449,   828,   191,   347,   694,   792,   792,
     792,   847,   325,   548,   500,   503,   285,   171,   417,   543,
     453,   609,   862,   862,   871,   292,   605,   866,   499,   152,
     152,   151,   680,   234,   576,   586,   589,   592,   602,   604,
     871,   461,   463,   581,   461,   651,   500,   827,    38,   272,
     287,   825,   500,   500,   628,   500,   497,   482,   482,   500,
     500,   500,   503,   762,   869,   498,   869,   500,   500,   784,
     786,   787,   788,   787,   788,   788,   628,   628,   287,   628,
     500,   503,   492,   499,   517,   550,   641,    38,   547,   870,
     547,   272,   277,   328,   547,   547,   896,   762,   500,   498,
     792,   139,   842,   843,    38,   500,   792,   500,   500,   500,
     171,   500,   500,   503,   500,   501,   310,   833,   500,   793,
     793,   792,    11,    15,    18,    19,    20,   197,   219,   289,
     486,   487,   488,   490,   491,   492,   493,   494,   495,   820,
     793,   500,   500,   166,   171,   836,   837,   503,   500,    38,
     838,   825,   838,   838,   171,   500,    38,   864,   499,   792,
     857,   849,   792,   814,   792,   500,   500,   482,   793,   793,
     145,   825,   171,   132,   159,   277,   282,   424,   435,   499,
     145,   823,   792,   403,   850,   792,   839,   792,   417,   499,
     681,   499,   499,   155,   801,   410,   412,   410,   412,   862,
     406,   690,   690,   690,   229,   358,   499,   681,   737,   739,
     740,   741,   742,   749,   750,   795,   797,   798,   871,   458,
     755,   695,   856,   755,   869,   791,   878,   677,   740,   458,
     622,   447,   405,   440,   663,   658,   667,   871,   287,   660,
     871,   664,   671,   503,   738,   488,   849,   484,   700,   700,
     698,   289,   818,   821,   700,     4,   869,   716,   288,   439,
     713,   503,   243,   417,   792,   272,   601,   499,   152,   499,
     579,   200,   598,   599,   560,    38,   175,   569,   595,   560,
      25,   137,   346,   348,   376,   522,   523,   524,   530,   531,
     152,   628,   152,   628,   570,   584,   570,   500,   503,   563,
     870,   500,   503,   488,   501,   417,   362,    88,   417,   679,
     362,   417,   417,   417,   362,   694,   694,   694,   828,   279,
     279,   500,   498,   557,   593,   548,   862,    38,   499,   594,
     614,   344,   406,   598,   862,   609,   862,   865,   461,   608,
     862,   500,   503,   285,   574,   285,   287,   573,   574,    38,
     500,   406,   792,   152,   862,   500,   763,   869,   782,   782,
     763,   871,   498,   498,   876,   551,   545,   556,   641,   870,
     870,   277,   598,   492,   598,   870,   870,   414,   792,   143,
     762,   500,   792,   792,   823,   792,   836,   762,   793,   793,
     793,   793,   793,   132,   272,   282,   793,   793,   793,   793,
     793,   793,   793,   793,   793,   793,   792,   792,   837,   836,
     762,   500,   500,   500,   825,   762,   500,   792,   857,   858,
     859,    38,   500,   791,   792,    35,    35,   792,   500,   792,
     171,   499,   829,   792,   500,   145,   793,   793,   145,   145,
     792,   792,   696,   458,   792,   297,   805,   690,   690,   690,
     690,   862,   862,   862,   681,   750,   171,   681,   737,   741,
     742,    38,   743,   744,   871,   743,   503,    96,   172,   206,
     222,   232,   266,   353,   746,   744,    38,   743,   745,   871,
     485,   754,   848,   792,   180,   718,   694,   860,   718,   500,
     500,   792,   350,   662,   446,   500,   503,   849,    86,   662,
     500,   503,   659,   622,   792,   163,   228,   499,   700,   288,
     862,   865,   500,   152,   599,   586,   599,   560,   588,   503,
     500,   119,   204,   270,   272,   585,   499,    32,    56,   606,
     595,    69,    75,    88,   117,   119,   204,   272,   277,   320,
     336,   434,   441,   565,   566,   580,   175,   117,   189,   272,
     574,   516,   109,   117,   175,   272,   392,   395,   518,   574,
     376,   524,   428,   865,   871,   528,   597,     3,    46,    52,
      76,    84,    96,   100,   101,   102,   103,   106,   170,   172,
     175,   176,   192,   206,   219,   220,   222,   232,   234,   246,
     266,   271,   275,   289,   296,   298,   353,   375,   377,   381,
     399,   408,   427,   440,   451,   490,   491,   517,   533,   539,
     561,   600,   762,   821,   870,   873,   880,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   865,   500,   500,   500,
     695,   516,   557,   499,   680,   592,   651,   605,   190,   862,
     500,   617,    38,   499,   632,   109,   270,   583,   581,   589,
      81,   680,   680,   588,   441,   648,   498,   762,   628,   500,
     503,   598,   792,   500,   500,   837,   171,   132,   282,   499,
     500,   500,   503,   500,   871,   792,   792,   792,   829,   500,
     792,    35,    35,   792,   792,   145,   500,   500,   792,   500,
     499,   806,   871,   862,   862,   862,   862,   744,   745,   499,
     500,   872,   408,   709,   710,   499,   710,   741,   222,   296,
     747,   741,   747,   222,   746,   747,   222,   710,   499,   872,
     710,   499,   294,    56,   184,   727,   500,   727,   870,   852,
     680,   300,   680,   658,   287,   499,   656,   488,   671,   662,
     823,   560,   586,   500,   500,   461,   591,   120,   193,   202,
     119,   443,   792,   117,    38,   499,   876,   865,   793,   120,
     193,   119,   277,   224,   862,   591,    83,   606,   190,   277,
     517,   792,   606,   277,   490,   491,   520,   871,   762,   628,
     628,   246,   399,   873,   877,   488,   417,   417,   694,   549,
     441,   544,   546,   598,   608,   500,    38,   406,   272,   499,
     651,   151,   680,   592,   608,   109,   149,   198,   573,   122,
     137,   319,   461,   903,   287,   647,   871,   499,   556,   793,
     171,   499,   829,   857,   500,   792,   792,   792,   500,   807,
     871,   751,   752,   797,   743,   499,     4,     9,   705,   707,
     708,   871,   864,   741,   287,   441,   748,   741,   222,   741,
     756,   757,   872,   499,   756,   872,    29,    98,   181,   356,
     492,   499,   719,   720,   721,   722,   723,   724,   725,   792,
     792,   460,   802,   870,   802,   503,   663,    88,   499,   661,
     670,   797,   871,   133,   792,   500,   336,   591,   499,   582,
     560,   500,   189,   499,   792,   272,   566,   591,   594,   865,
      38,   152,    75,   758,   877,   494,   561,   865,   865,   500,
     516,   124,   500,   581,   680,   862,   152,    38,   865,   608,
     500,    29,    80,    89,   118,   189,   201,   392,   395,   577,
     577,   358,   358,    61,    69,   238,   862,   670,   793,   829,
     500,   306,   808,   500,   503,    38,   753,   864,   309,   494,
     309,   358,   494,   499,   499,   500,   792,   499,   741,   748,
     500,   503,   762,   756,   500,   499,   378,   499,   500,   503,
     803,   804,   871,   327,   728,   728,   446,   865,   792,   500,
     503,    75,   665,   665,   273,   439,   862,   560,   587,   590,
     880,   396,   455,   567,   568,   499,   562,   792,   500,   248,
     603,   189,   876,   441,   527,   494,   428,   549,   870,   651,
     573,   903,   499,   862,   680,   632,   581,    69,   290,    69,
     648,   500,   500,    56,   695,   754,   751,   499,   500,   871,
     705,   864,   757,   758,   500,   825,   499,   825,   721,   503,
      38,   792,   441,   706,   706,   680,   500,   755,   661,   876,
     666,   876,   666,   376,   594,   500,   503,   488,   515,   500,
     270,   575,   172,   305,   382,   287,   571,   572,   596,   562,
     792,   428,    38,   499,   903,   608,   573,   290,   290,   499,
     651,   824,   329,   358,   809,   756,   500,   503,   500,   500,
     500,   720,   500,   804,   806,   360,   665,   699,   699,   669,
     603,   590,   561,   500,   568,   202,   122,   439,   287,   596,
     287,   571,   680,   670,   755,    50,    99,   430,   792,   810,
     811,   810,   500,   500,     9,   343,   711,   500,   708,   666,
     700,   700,   755,   572,    60,   270,   349,   376,   564,   564,
     903,   500,   811,   357,   165,   315,   165,   315,   500,   499,
     699,   560,    24,   117,   277,   651,    35,     9,   700,   755,
     811,   500
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   509,   510,   511,   511,   512,   512,   512,   512,   512,
     512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
     512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
     512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
     542,   542,   542,   543,   543,   544,   544,   545,   545,   546,
     546,   547,   547,   548,   548,   549,   549,   550,   550,   550,
     550,   550,   551,   552,   552,   553,   553,   554,   554,   555,
     555,   555,   555,   555,   555,   555,   555,   555,   555,   555,
     555,   555,   555,   556,   557,   557,   557,   558,   558,   890,
     891,   891,   892,   892,   892,   540,   680,   680,   681,   681,
     682,   682,   682,   682,   682,   682,   682,   682,   683,   683,
     684,   684,   684,   684,   684,   684,   684,   685,   685,   685,
     686,   686,   687,   688,   688,   689,   689,   689,   689,   689,
     689,   689,   689,   689,   690,   690,   691,   691,   691,   692,
     692,   693,   693,   694,   694,   694,   695,   695,   696,   696,
     696,   697,   697,   698,   698,   699,   699,   699,   700,   700,
     700,   701,   701,   701,   701,   702,   702,   703,   703,   703,
     703,   704,   704,   705,   705,   705,   705,   705,   705,   706,
     706,   707,   707,   708,   708,   708,   708,   709,   710,   710,
     711,   711,   712,   712,   712,   712,   712,   713,   714,   714,
     714,   715,   715,   716,   716,   717,   717,   718,   718,   718,
     718,   719,   719,   720,   720,   721,   721,   721,   721,   721,
     722,   723,   724,   725,   726,   726,   727,   727,   728,   728,
     729,   729,   730,   730,   731,   731,   732,   733,   733,   733,
     733,   734,   734,   735,   735,   735,   736,   736,   737,   737,
     738,   738,   739,   739,   740,   740,   741,   741,   741,   741,
     741,   741,   741,   741,   742,   742,   742,   742,   742,   742,
     743,   743,   743,   743,   744,   744,   745,   745,   745,   745,
     745,   746,   746,   746,   746,   747,   747,   748,   748,   749,
     749,   749,   749,   750,   750,   751,   752,   752,   753,   753,
     754,   754,   755,   755,   756,   756,   757,   758,   758,   759,
     759,   760,   760,   761,   761,   762,   762,   762,   762,   762,
     762,   762,   762,   763,   763,   763,   764,   764,   764,   764,
     764,   764,   764,   765,   765,   765,   765,   766,   767,   767,
     768,   768,   768,   768,   768,   768,   768,   768,   768,   768,
     768,   769,   769,   770,   770,   771,   771,   772,   773,   774,
     774,   775,   775,   776,   777,   778,   778,   778,   778,   778,
     778,   779,   779,   780,   780,   780,   780,   781,   782,   782,
     782,   783,   783,   784,   784,   785,   785,   786,   786,   787,
     787,   788,   788,   789,   789,   790,   790,   791,   791,   791,
     791,   791,   791,   791,   791,   791,   791,   791,   791,   791,
     791,   791,   791,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   792,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   793,   793,   793,   793,   793,   793,
     793,   793,   793,   793,   793,   793,   793,   793,   793,   793,
     793,   793,   793,   793,   793,   793,   793,   793,   794,   794,
     794,   794,   794,   794,   794,   794,   794,   794,   794,   794,
     795,   795,   795,   795,   795,   795,   795,   796,   796,   797,
     797,   798,   798,   798,   798,   798,   798,   798,   798,   798,
     798,   798,   798,   798,   798,   798,   798,   798,   798,   798,
     798,   798,   798,   798,   798,   798,   798,   798,   798,   798,
     799,   799,   800,   800,   800,   801,   801,   802,   802,   803,
     803,   804,   805,   805,   805,   806,   807,   807,   808,   808,
     809,   809,   809,   810,   810,   811,   811,   811,   811,   811,
     812,   812,   813,   813,   814,   815,   815,   816,   816,   817,
     817,   817,   818,   818,   819,   819,   819,   819,   819,   819,
     819,   819,   819,   819,   819,   819,   819,   820,   820,   821,
     821,   822,   822,   822,   822,   822,   822,   822,   822,   823,
     823,   824,   824,   825,   825,   826,   826,   827,   827,   828,
     828,   828,   829,   829,   830,   830,   831,   831,   831,   831,
     831,   831,   831,   831,   831,   831,   832,   832,   833,   834,
     834,   835,   835,   835,   835,   835,   835,   836,   837,   838,
     838,   838,   839,   839,   840,   841,   841,   842,   843,   843,
     844,   844,   845,   845,   846,   846,   846,   847,   847,   848,
     848,   849,   849,   850,   850,   851,   851,   852,   852,   853,
     853,   854,   854,   854,   854,   854,   855,   855,   856,   856,
     857,   858,   858,   859,   859,   860,   860,   860,   861,   861,
     862,   862,   863,   863,   864,   864,   865,   866,   867,   867,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   869,   870,   871,   871,   871,   872,
     872,   873,   873,   873,   874,   874,   874,   875,   875,   875,
     876,   876,   877,   877,   878,   878,   879,   880,   880,   880,
     880,   881,   881,   674,   674,   674,   607,   607,   607,   608,
     608,   608,   609,   899,   899,   899,   899,   899,   899,   899,
     899,   900,   900,   901,   901,   514,   514,   515,   515,   516,
     516,   516,   517,   517,   517,   517,   518,   518,   518,   518,
     518,   518,   518,   518,   518,   518,   518,   518,   518,   518,
     519,   519,   520,   520,   520,   619,   619,   619,   619,   559,
     559,   559,   560,   560,   561,   561,   561,   561,   561,   561,
     562,   562,   563,   564,   564,   564,   564,   564,   565,   565,
     565,   565,   566,   566,   566,   566,   566,   566,   566,   566,
     567,   567,   568,   568,   569,   569,   569,   570,   571,   572,
     572,   572,   572,   572,   573,   573,   573,   573,   574,   575,
     575,   576,   576,   577,   577,   577,   577,   577,   577,   577,
     577,   578,   578,   579,   580,   580,   580,   580,   581,   581,
     581,   581,   582,   583,   583,   583,   584,   585,   585,   585,
     585,   585,   585,   586,   586,   587,   587,   588,   589,   589,
     589,   590,   590,   591,   591,   592,   592,   592,   593,   594,
     594,   595,   595,   596,   597,   597,   597,   597,   598,   598,
     599,   599,   600,   600,   600,   601,   601,   601,   601,   601,
     601,   602,   602,   603,   603,   603,   603,   604,   605,   605,
     605,   605,   605,   605,   605,   605,   606,   606,   631,   631,
     631,   632,   632,   613,   613,   614,   614,   615,   615,   615,
     615,   633,   633,   633,   633,   634,   634,   635,   635,   635,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     637,   637,   637,   638,   638,   639,   639,   640,   640,   641,
     641,   641,   641,   642,   643,   643,   624,   624,   624,   624,
     624,   624,   624,   624,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     626,   626,   626,   626,   626,   626,   626,   627,   627,   628,
     628,   628,   629,   629,   629,   630,   630,   618,   521,   521,
     521,   521,   521,   521,   521,   521,   522,   522,   523,   523,
     524,   524,   524,   524,   525,   525,   526,   526,   526,   526,
     526,   526,   526,   526,   526,   526,   526,   526,   526,   526,
     526,   526,   526,   526,   526,   526,   526,   526,   526,   526,
     526,   526,   526,   526,   526,   527,   527,   528,   528,   528,
     528,   529,   529,   530,   531,   531,   531,   882,   882,   882,
     882,   882,   882,   883,   883,   883,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   679,
     679,   675,   676,   676,   677,   677,   677,   677,   885,   885,
     885,   885,   885,   886,   886,   886,   886,   886,   887,   887,
     888,   888,   889,   889,   646,   646,   647,   648,   648,   649,
     649,   650,   650,   651,   651,   652,   652,   644,   645,   620,
     621,   621,   621,   622,   622,   623,   623,   902,   902,   902,
     902,   903,   903,   903,   903,   893,   893,   893,   893,   894,
     894,   894,   894,   895,   895,   895,   895,   896,   896,   897,
     897,   897,   897,   897,   897,   897,   898,   898,   541,   541,
     672,   672,   672,   673,   673,   616,   616,   617,   617,   610,
     610,   611,   611,   612,   612,   513,   513,   513,   513,   513,
     513,   884,   653,   654,   654,   654,   654,   654,   655,   655,
     656,   656,   656,   657,   657,   658,   659,   659,   660,   660,
     660,   661,   661,   661,   662,   662,   663,   663,   664,   664,
     665,   665,   666,   666,   667,   667,   668,   668,   669,   669,
     670,   670,   671,   532,   532,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,   533,   534,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   534,   534,   535,   535,   535,   535,   535,
     535,   535,   535,   535,   535,   535,   535,   535,   535,   535,
     535,   535,   535,   535,   535,   535,   535,   535,   535,   535,
     535,   535,   535,   535,   535,   535,   535,   535,   536,   536,
     536,   536,   536,   536,   536,   536,   536,   536,   536,   536,
     536,   536,   536,   536,   536,   536,   536,   536,   536,   536,
     536,   536,   536,   536,   536,   536,   536,   536,   536,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   538,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   538,   538,   538,   538,
     538,   538,   538,   538,   538,   538,   539,   539,   539,   539,
     539,   539,   539,   539,   539,   539,   539,   539,   539,   539,
     539,   539,   539,   539,   539,   539,   539,   539,   539,   539,
     539,   539,   539,   539,   539,   539,   539,   539,   539,   539,
     539,   539,   539,   539,   539,   539,   539,   539,   539,   539,
     539,   539,   539,   539,   539,   539,   539,   539,   539,   539,
     539,   539,   539,   539,   539,   539,   539,   539,   539,   539,
     539,   539,   539,   539,   539,   539,   539,   539
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
      11,     9,     3,     1,     1,     3,     0,     1,     3,     1,
       0,     1,     0,     1,     0,     1,     3,     1,     1,     1,
       3,     0,     2,     2,     0,     2,     0,     1,     0,     1,
       1,     1,     3,     3,     1,     1,     3,     3,     3,     3,
       4,     3,     2,     1,     1,     1,     1,     1,     3,     2,
       1,     1,     1,     2,     3,     2,     1,     1,     3,     3,
       1,     2,     4,     4,     2,     3,     5,     5,     1,     1,
      11,    11,     1,     2,     4,     4,     4,     2,     2,     3,
       1,     3,     6,     2,     0,     3,     3,     4,     4,     4,
       4,     3,     2,     1,     1,     0,     1,     1,     0,     1,
       5,     1,     0,     2,     2,     0,     1,     0,     3,     5,
       5,     1,     3,     4,     3,     1,     1,     0,     2,     2,
       0,     2,     2,     1,     1,     1,     0,     2,     4,     5,
       4,     2,     3,     2,     2,     2,     2,     1,     2,     3,
       0,     1,     0,     5,     1,     4,     6,     2,     1,     0,
       4,     0,     1,     1,     2,     2,     2,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     3,     3,     3,
       0,     1,     3,     1,     2,     1,     1,     1,     1,     1,
       2,     4,     4,     5,     1,     1,     2,     0,     2,     0,
       1,     3,     1,     0,     1,     2,     3,     2,     4,     2,
       3,     2,     0,     1,     2,     0,     4,     5,     1,     2,
       2,     0,     1,     3,     1,     2,     3,     3,     3,     3,
       3,     3,     1,     4,     3,     4,     5,     4,     5,     4,
       5,     2,     4,     1,     1,     0,     1,     4,     5,     4,
       0,     2,     2,     2,     1,     1,     0,     4,     2,     1,
       2,     2,     4,     2,     6,     2,     1,     3,     4,     0,
       2,     0,     2,     0,     1,     3,     3,     2,     0,     2,
       4,     1,     1,     1,     0,     2,     3,     5,     6,     2,
       3,     5,     5,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     4,     1,     1,     1,     1,     2,     3,     0,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       1,     3,     0,     1,     1,     1,     1,     5,     2,     1,
       1,     1,     1,     4,     1,     2,     2,     1,     3,     3,
       2,     1,     0,     5,     2,     5,     2,     1,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     3,     3,     5,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     2,     3,     3,     2,     2,     3,
       3,     5,     4,     6,     3,     5,     4,     6,     4,     6,
       5,     7,     3,     2,     4,     3,     2,     1,     3,     3,
       3,     3,     3,     3,     4,     3,     4,     3,     4,     5,
       6,     6,     7,     6,     7,     6,     7,     3,     4,     4,
       6,     2,     1,     4,     1,     3,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     5,     6,     6,     7,     1,     1,
       2,     2,     2,     4,     1,     2,     1,     2,     2,     4,
       3,     6,     7,     9,     7,     7,     4,     5,     1,     1,
       1,     5,     1,     1,     4,     1,     4,     1,     4,     1,
       4,     1,     1,     1,     1,     1,     1,     6,     6,     4,
       4,     4,     4,     6,     5,     5,     5,     4,     6,     4,
       5,     0,     5,     4,     0,     1,     0,     2,     0,     1,
       3,     3,     2,     2,     0,     6,     1,     0,     3,     0,
       2,     2,     0,     1,     4,     2,     2,     2,     2,     2,
       4,     3,     1,     5,     3,     1,     3,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     1,
       4,     1,     4,     1,     2,     1,     2,     1,     2,     1,
       3,     1,     3,     1,     2,     1,     0,     1,     3,     1,
       3,     3,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     3,     2,     3,
       0,     3,     3,     2,     2,     1,     0,     2,     2,     3,
       2,     1,     1,     3,     5,     1,     2,     4,     2,     0,
       1,     0,     1,     2,     2,     3,     5,     1,     0,     1,
       2,     0,     2,     1,     0,     1,     0,     1,     3,     1,
       2,     3,     2,     1,     3,     5,     4,     2,     1,     0,
       3,     1,     3,     1,     2,     4,     2,     0,     1,     3,
       1,     2,     1,     3,     1,     2,     1,     1,     1,     2,
       1,     1,     2,     1,     1,     2,     7,     2,     5,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     2,     4,     5,     7,    10,     9,     2,
       3,     0,     4,     2,     2,     2,     2,     3,     4,     2,
       1,     1,     1,     1,     3,     4,     6,     1,     2,     1,
       1,     0,     1,     2,     2,     1,     2,     2,     1,     2,
       3,     2,     2,     2,     2,     3,     3,     3,     1,     3,
       1,     0,     1,     2,     2,     2,     3,     2,     3,     9,
      12,    11,     0,     2,     1,     1,     1,     1,     1,     1,
       3,     0,     1,     2,     1,     1,     2,     2,     3,     1,
       1,     2,     2,     1,     2,     3,     5,     3,     2,     5,
       1,     1,     1,     0,     5,     7,     5,     2,     3,     1,
       1,     2,     2,     0,     3,     4,     4,     0,     3,     2,
       0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     1,     2,     2,     2,     2,     2,
       2,     0,     3,     3,     3,     0,     1,     2,     1,     2,
       2,     2,     2,     3,     4,     1,     3,     1,     1,     1,
       1,     3,     1,     2,     0,     1,     2,     0,     1,     3,
       0,     2,     0,     3,     3,     1,     5,     3,     1,     3,
       1,     2,     1,     4,     5,     5,     6,     3,     7,     4,
      11,     1,     3,     2,     2,     2,     0,     3,     1,     1,
       2,     2,     2,     2,     1,     0,     1,     2,     3,     9,
      12,     3,     0,     4,     7,     2,     0,     1,     1,     1,
       1,     2,     4,     3,     5,     1,     0,     1,     1,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     6,     4,     6,     4,
       6,     8,     4,     6,     1,     1,     1,     1,     2,     1,
       2,     1,     2,     1,     1,     1,     3,     3,     3,     3,
       2,     2,     1,     3,     1,     1,     1,     1,     3,     1,
       1,     0,     1,     1,     1,     1,     3,     5,     4,     6,
       4,     6,     4,     6,     4,     6,     1,     2,     3,     2,
       1,     3,     2,     3,     1,     3,     2,     5,     3,     6,
       4,     6,     6,     6,     5,     5,     6,     9,     4,     5,
       7,     6,     4,     8,     4,     2,     4,     3,     6,     4,
       2,     2,     2,     2,     1,     2,     0,     1,     2,     2,
       2,     1,     3,     4,     2,     1,     0,     2,     2,     2,
       2,     2,     2,     1,     1,     0,     6,     6,     8,     6,
       8,     6,     8,     6,     8,     8,    10,     8,    10,     1,
       0,     5,     3,     0,     1,     1,     1,     1,     4,     5,
       5,     4,     6,     1,     1,     1,     1,     1,     1,     0,
       1,     3,     1,     0,    13,    16,     1,     2,     0,     1,
       0,     1,     0,     2,     0,     1,     0,     4,     3,     7,
       1,     2,     3,     2,     0,     2,     0,     9,    11,    12,
      14,     3,     4,     4,     0,     2,     3,     3,     3,     1,
       3,     3,     2,     3,     3,     3,     3,     1,     1,     1,
       1,     3,     5,     1,     1,     1,     1,     3,     2,     1,
       2,     2,     3,     1,     1,     5,     8,     1,     0,     8,
       7,     1,     1,     2,     3,     6,     8,     6,     8,     6,
       8,     8,     7,     1,     4,     4,     7,     2,     1,     3,
       4,     3,     0,     1,     0,     2,     3,     5,     8,     5,
       0,     5,     5,     7,     2,     0,     1,     1,     1,     3,
       2,     0,     1,     0,     1,     3,     1,     3,     1,     2,
       1,     3,     2,     2,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 467 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 15437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 483 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 15453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 495 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 15464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 39: /* stmt: %empty  */
#line 538 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 15470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 40: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 15502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 41: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 15525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42: /* CopyStmt: COPY FROM copy_file_name  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = NULL;
					n->attlist = NIL;
					n->is_from = true;
					n->is_program = false;
					n->filename = (yyvsp[0].str);
					n->options = NIL;

					if (n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("COPYFROMFILE not allowed with NULL"),
								 parser_errposition((yylsp[0]))));

					(yyval.node) = (PGNode *)n;
				}
#line 15548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43: /* copy_from: FROM  */
#line 72 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 15554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44: /* copy_from: TO  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 15560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 79 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 15568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* copy_delimiter: %empty  */
#line 82 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 15574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 88 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 15582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 15590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* opt_using: USING  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 15596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* opt_using: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 15602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* opt_as: AS  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 15608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* opt_as: %empty  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 15614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* opt_program: PROGRAM  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 15620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* opt_program: %empty  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 15626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* copy_options: copy_opt_list  */
#line 115 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 15638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 15644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* copy_generic_opt_arg: NumericOnly  */
#line 122 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 15650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* copy_generic_opt_arg: '*'  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 15656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 124 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 15662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* copy_generic_opt_arg: %empty  */
#line 125 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 15668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 131 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 15676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* opt_oids: WITH OIDS  */
#line 139 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 15684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* opt_oids: %empty  */
#line 142 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 15690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 147 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 15696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* copy_opt_list: %empty  */
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 15702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* opt_binary: BINARY  */
#line 154 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 15710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* opt_binary: %empty  */
#line 157 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 15716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* copy_opt_item: BINARY  */
#line 163 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 15724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* copy_opt_item: OIDS  */
#line 167 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 15732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* copy_opt_item: FREEZE  */
#line 171 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 15740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 175 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 15748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 179 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 15756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* copy_opt_item: CSV  */
#line 183 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 15764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* copy_opt_item: HEADER_P  */
#line 187 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 15772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 191 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 15780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 195 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 15788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* copy_opt_item: FORCE QUOTE columnList  */
#line 199 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 15796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* copy_opt_item: FORCE QUOTE '*'  */
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 15804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 207 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 15812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* copy_opt_item: FORCE NULL_P columnList  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 15820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* copy_opt_item: ENCODING Sconst  */
#line 215 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 15828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 222 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 15834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* copy_file_name: Sconst  */
#line 228 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* copy_file_name: STDIN  */
#line 229 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 15846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* copy_file_name: STDOUT  */
#line 230 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 15852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 236 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 15860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 240 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 15868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* VariableResetStmt: RESET reset_rest  */
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 15874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* generic_reset: var_name  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 15885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* generic_reset: ALL  */
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 15895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* reset_rest: generic_reset  */
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 15901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* reset_rest: TIME ZONE  */
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 15912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 15923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 15933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 15939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 15945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 15998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 16010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 16064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 16083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* simple_select: values_clause_opt_comma  */
#line 188 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* simple_select: TABLE relation_expr  */
#line 190 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 16112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 209 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 16120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 16128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 217 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 16136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* with_clause: WITH cte_list  */
#line 234 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 16147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* with_clause: WITH_LA cte_list  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 16158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* with_clause: WITH RECURSIVE cte_list  */
#line 248 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 16169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* cte_list: common_table_expr  */
#line 257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* cte_list: cte_list ',' common_table_expr  */
#line 258 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 16181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* common_table_expr: name opt_name_list AS '(' PreparableStmt ')'  */
#line 262 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 16194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* into_clause: INTO OptTempTableName  */
#line 274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 16208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* into_clause: %empty  */
#line 284 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 16214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 293 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 303 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 308 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 321 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 16283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* OptTempTableName: TABLE qualified_name  */
#line 334 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 16292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* OptTempTableName: qualified_name  */
#line 339 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 16301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* opt_table: TABLE  */
#line 345 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 16307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* opt_table: %empty  */
#line 346 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 16313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* all_or_distinct: ALL  */
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 16319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* all_or_distinct: DISTINCT  */
#line 351 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* all_or_distinct: %empty  */
#line 352 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* distinct_clause: DISTINCT  */
#line 359 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 16337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 360 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 16343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* opt_all_clause: ALL  */
#line 364 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 16349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* opt_all_clause: %empty  */
#line 365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 16361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 16367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* opt_ignore_nulls: %empty  */
#line 371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* opt_sort_clause: sort_clause  */
#line 375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 16379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* opt_sort_clause: %empty  */
#line 376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* sort_clause: ORDER BY sortby_list  */
#line 380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 16405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* sort_clause: ORDER BY '*' opt_asc_desc opt_nulls_order  */
#line 392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 16419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* sortby_list: sortby  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 16425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* sortby_list: sortby_list ',' sortby  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 16431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 16444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 418 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 16457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* opt_asc_desc: ASC_P  */
#line 428 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 16463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_asc_desc: DESC_P  */
#line 429 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 16469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_asc_desc: %empty  */
#line 430 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 16475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 433 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 16481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 16487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_nulls_order: %empty  */
#line 435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 16493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* select_limit: limit_clause offset_clause  */
#line 439 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 16499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* select_limit: offset_clause limit_clause  */
#line 440 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 16505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* select_limit: limit_clause  */
#line 441 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 16511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* select_limit: offset_clause  */
#line 442 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 16517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_select_limit: select_limit  */
#line 446 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_select_limit: %empty  */
#line 447 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 16529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* limit_clause: LIMIT select_limit_value  */
#line 452 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 16535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 16548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 470 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 16554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 16560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* offset_clause: OFFSET select_offset_value  */
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 16566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 480 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 16572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* sample_count: FCONST '%'  */
#line 488 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 16580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* sample_count: ICONST '%'  */
#line 492 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 16588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* sample_count: FCONST PERCENT  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 16596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* sample_count: ICONST PERCENT  */
#line 500 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 16604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* sample_count: ICONST  */
#line 504 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 16612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* sample_count: ICONST ROWS  */
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 16620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 16628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* sample_clause: %empty  */
#line 519 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 16634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* opt_sample_func: ColId  */
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 16640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* opt_sample_func: %empty  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 16646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 16655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* tablesample_entry: sample_count  */
#line 537 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 16663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 541 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 16671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 545 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 16680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 553 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 16688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* opt_tablesample_clause: tablesample_clause  */
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* opt_tablesample_clause: %empty  */
#line 560 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 16700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 565 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 16706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* opt_repeatable_clause: %empty  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 16712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* select_limit_value: a_expr  */
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* select_limit_value: ALL  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 16727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* select_limit_value: a_expr '%'  */
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 16733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* select_limit_value: FCONST PERCENT  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 16739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* select_limit_value: ICONST PERCENT  */
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 16745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* select_offset_value: a_expr  */
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* select_fetch_first_value: c_expr  */
#line 605 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* select_fetch_first_value: '+' I_or_F_const  */
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 16763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* select_fetch_first_value: '-' I_or_F_const  */
#line 609 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 16769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* I_or_F_const: Iconst  */
#line 613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 16775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* I_or_F_const: FCONST  */
#line 614 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 16781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* row_or_rows: ROW  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 16787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* row_or_rows: ROWS  */
#line 619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 16793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* first_or_next: FIRST_P  */
#line 622 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 16799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* first_or_next: NEXT  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 16805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* group_clause: GROUP_P BY ALL  */
#line 650 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 16820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* group_clause: GROUP_P BY '*'  */
#line 655 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 16829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* group_clause: %empty  */
#line 659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* group_by_list: group_by_item  */
#line 663 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* group_by_list: group_by_list ',' group_by_item  */
#line 664 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 16847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* group_by_list_opt_comma: group_by_list  */
#line 668 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* group_by_list_opt_comma: group_by_list ','  */
#line 669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 16859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* group_by_item: a_expr  */
#line 673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* group_by_item: empty_grouping_set  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* group_by_item: cube_clause  */
#line 675 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* group_by_item: rollup_clause  */
#line 676 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* group_by_item: grouping_sets_clause  */
#line 677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* empty_grouping_set: '(' ')'  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 16897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 16905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 16913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 16921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* grouping_or_grouping_id: GROUPING  */
#line 715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 16927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* grouping_or_grouping_id: GROUPING_ID  */
#line 716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 16933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* having_clause: HAVING a_expr  */
#line 720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* having_clause: %empty  */
#line 721 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 16945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* qualify_clause: QUALIFY a_expr  */
#line 725 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* qualify_clause: %empty  */
#line 726 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 16957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* for_locking_clause: for_locking_items  */
#line 730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* for_locking_clause: FOR READ_P ONLY  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* opt_for_locking_clause: for_locking_clause  */
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* opt_for_locking_clause: %empty  */
#line 736 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 16981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* for_locking_items: for_locking_item  */
#line 740 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* for_locking_items: for_locking_items for_locking_item  */
#line 741 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 16993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 17005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* for_locking_strength: FOR UPDATE  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 17011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 757 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 17017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* for_locking_strength: FOR SHARE  */
#line 758 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 17023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* for_locking_strength: FOR KEY SHARE  */
#line 759 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 17029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* locked_rels_list: OF qualified_name_list  */
#line 763 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* locked_rels_list: %empty  */
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 17041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* opt_nowait_or_skip: NOWAIT  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 17047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 770 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 17053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* opt_nowait_or_skip: %empty  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 17059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 17069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 787 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 17079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* values_clause_opt_comma: values_clause  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* values_clause_opt_comma: values_clause ','  */
#line 796 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 17091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* from_clause: FROM from_list_opt_comma  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* from_clause: %empty  */
#line 810 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* from_list: table_ref  */
#line 814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 17109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* from_list: from_list ',' table_ref  */
#line 815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 17115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* from_list_opt_comma: from_list  */
#line 819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* from_list_opt_comma: from_list ','  */
#line 820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 17137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 833 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 17149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 841 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 17162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 17174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 17187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 17200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* table_ref: joined_table  */
#line 876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 17208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* table_ref: '(' joined_table ')' alias_clause  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 17217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* joined_table: '(' joined_table ')'  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 17225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 17260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 17295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 17322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* alias_clause: AS ColIdOrString  */
#line 986 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 17331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 991 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 17341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* alias_clause: ColId  */
#line 997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 17350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* opt_alias_clause: alias_clause  */
#line 1003 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 17356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* opt_alias_clause: %empty  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 17362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* func_alias_clause: alias_clause  */
#line 1013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 17370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1017 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 17378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 17388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1027 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 17398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* func_alias_clause: %empty  */
#line 1033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 17406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* join_type: FULL join_outer  */
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 17412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* join_type: LEFT join_outer  */
#line 1039 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 17418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* join_type: RIGHT join_outer  */
#line 1040 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 17424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* join_type: INNER_P  */
#line 1041 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 17430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* join_outer: OUTER_P  */
#line 1045 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 17436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* join_outer: %empty  */
#line 1046 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1058 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 17448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* join_qual: ON a_expr  */
#line 1059 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* relation_expr: qualified_name  */
#line 1065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 17465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* relation_expr: qualified_name '*'  */
#line 1072 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 17476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* relation_expr: ONLY qualified_name  */
#line 1079 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 17487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 17498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* func_table: func_expr_windowless opt_ordinality  */
#line 1118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 17513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 17528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1142 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 17534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* rowsfrom_list: rowsfrom_item  */
#line 1146 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 17540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1147 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 17546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1150 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* opt_col_def_list: %empty  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1154 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 17564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* opt_ordinality: %empty  */
#line 1155 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* where_clause: WHERE a_expr  */
#line 1160 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* where_clause: %empty  */
#line 1161 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* TableFuncElementList: TableFuncElement  */
#line 1167 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 17590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 17598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 17620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* opt_collate_clause: COLLATE any_name  */
#line 1198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 17632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* opt_collate_clause: %empty  */
#line 1205 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 17638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* colid_type_list: ColId Typename  */
#line 1218 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 17646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1221 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 17654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* opt_Typename: Typename  */
#line 1228 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* opt_Typename: %empty  */
#line 1229 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 17666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* Typename: SimpleTypename opt_array_bounds  */
#line 1232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 17675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 17685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1244 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 17694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1249 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 17704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* Typename: SimpleTypename ARRAY  */
#line 1255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 17713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 17723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1265 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 17734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1271 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 17745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1281 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 17751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1283 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 17757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* opt_array_bounds: %empty  */
#line 1285 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 17763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* SimpleTypename: GenericType  */
#line 1289 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* SimpleTypename: Numeric  */
#line 1290 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* SimpleTypename: Bit  */
#line 1291 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* SimpleTypename: Character  */
#line 1292 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* SimpleTypename: ConstDatetime  */
#line 1293 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* SimpleTypename: ConstInterval opt_interval  */
#line 1295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 17802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 17812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* ConstTypename: Numeric  */
#line 1319 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* ConstTypename: ConstBit  */
#line 1320 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* ConstTypename: ConstCharacter  */
#line 1321 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* ConstTypename: ConstDatetime  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* GenericType: type_name_token opt_type_modifiers  */
#line 1334 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1347 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 17852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* opt_type_modifiers: %empty  */
#line 1348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 17858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* Numeric: INT_P  */
#line 1355 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* Numeric: INTEGER  */
#line 1360 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* Numeric: SMALLINT  */
#line 1365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* Numeric: BIGINT  */
#line 1370 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* Numeric: REAL  */
#line 1375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* Numeric: FLOAT_P opt_float  */
#line 1380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* Numeric: DOUBLE_P PRECISION  */
#line 1385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* Numeric: DEC opt_type_modifiers  */
#line 1396 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1402 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* Numeric: BOOLEAN_P  */
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* opt_float: '(' Iconst ')'  */
#line 1415 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 17985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* opt_float: %empty  */
#line 1436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 17993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* Bit: BitWithLength  */
#line 1446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* Bit: BitWithoutLength  */
#line 1450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* ConstBit: BitWithLength  */
#line 1458 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* ConstBit: BitWithoutLength  */
#line 1462 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 18026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1470 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* BitWithoutLength: BIT opt_varying  */
#line 1482 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* Character: CharacterWithLength  */
#line 1503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* Character: CharacterWithoutLength  */
#line 1507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* ConstCharacter: CharacterWithLength  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 18081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* ConstCharacter: CharacterWithoutLength  */
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 18096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 18106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* CharacterWithoutLength: character  */
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* character: CHARACTER opt_varying  */
#line 1548 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* character: CHAR_P opt_varying  */
#line 1550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* character: VARCHAR  */
#line 1552 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 18136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* character: NATIONAL CHARACTER opt_varying  */
#line 1554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* character: NATIONAL CHAR_P opt_varying  */
#line 1556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* character: NCHAR opt_varying  */
#line 1558 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* opt_varying: VARYING  */
#line 1562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 18160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* opt_varying: %empty  */
#line 1563 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1571 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1580 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* ConstDatetime: TIME opt_timezone  */
#line 1597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* ConstInterval: INTERVAL  */
#line 1608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1615 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 18231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1616 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 18237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* opt_timezone: %empty  */
#line 1617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* opt_interval: year_keyword  */
#line 1646 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 18249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* opt_interval: month_keyword  */
#line 1648 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 18255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* opt_interval: day_keyword  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 18261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* opt_interval: hour_keyword  */
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 18267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* opt_interval: minute_keyword  */
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 18273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* opt_interval: second_keyword  */
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 18279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* opt_interval: millisecond_keyword  */
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 18285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* opt_interval: microsecond_keyword  */
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 18291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* opt_interval: year_keyword TO month_keyword  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 18300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* opt_interval: day_keyword TO hour_keyword  */
#line 1667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 18309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* opt_interval: day_keyword TO minute_keyword  */
#line 1672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 18319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* opt_interval: day_keyword TO second_keyword  */
#line 1678 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* opt_interval: hour_keyword TO minute_keyword  */
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 18339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* opt_interval: hour_keyword TO second_keyword  */
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* opt_interval: minute_keyword TO second_keyword  */
#line 1696 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* opt_interval: %empty  */
#line 1701 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 18364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* a_expr: c_expr  */
#line 1732 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* a_expr: a_expr TYPECAST Typename  */
#line 1735 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 18376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* a_expr: a_expr COLLATE any_name  */
#line 1737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 18388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 1745 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 18398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* a_expr: '+' a_expr  */
#line 1760 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* a_expr: '-' a_expr  */
#line 1762 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* a_expr: a_expr '+' a_expr  */
#line 1764 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* a_expr: a_expr '-' a_expr  */
#line 1766 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* a_expr: a_expr '*' a_expr  */
#line 1768 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* a_expr: a_expr '/' a_expr  */
#line 1770 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* a_expr: a_expr '%' a_expr  */
#line 1772 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* a_expr: a_expr '^' a_expr  */
#line 1774 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* a_expr: a_expr POWER_OF a_expr  */
#line 1776 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* a_expr: a_expr '<' a_expr  */
#line 1778 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* a_expr: a_expr '>' a_expr  */
#line 1780 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* a_expr: a_expr '=' a_expr  */
#line 1782 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 1786 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 1788 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* a_expr: a_expr qual_Op a_expr  */
#line 1791 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* a_expr: qual_Op a_expr  */
#line 1793 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* a_expr: a_expr qual_Op  */
#line 1795 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 18506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* a_expr: a_expr AND a_expr  */
#line 1798 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* a_expr: a_expr OR a_expr  */
#line 1800 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* a_expr: NOT a_expr  */
#line 1802 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 18524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* a_expr: NOT_LA a_expr  */
#line 1804 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 18530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* a_expr: a_expr GLOB a_expr  */
#line 1806 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* a_expr: a_expr LIKE a_expr  */
#line 1811 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 1816 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 18559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 1823 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 18568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 1828 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 18579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* a_expr: a_expr ILIKE a_expr  */
#line 1835 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 1840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 18599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 1847 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 18608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 1852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 18619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 1860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 18631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 1868 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 18643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 18655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 1884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 18667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* a_expr: a_expr IS NULL_P  */
#line 1902 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* a_expr: a_expr ISNULL  */
#line 1910 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* a_expr: a_expr IS NOT NULL_P  */
#line 1918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 18703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* a_expr: a_expr NOT NULL_P  */
#line 1926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* a_expr: a_expr NOTNULL  */
#line 1934 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* a_expr: row  */
#line 1941 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 18736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* a_expr: '{' dict_arguments_opt_comma '}'  */
#line 1945 "third_party/libpg_query/grammar/statements/select.y"
                                                           {
				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 18745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* a_expr: '[' opt_expr_list_opt_comma ']'  */
#line 1949 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 18754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 1954 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 18766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 1962 "third_party/libpg_query/grammar/statements/select.y"
                        {
                                        (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
                        }
#line 18774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* a_expr: row OVERLAPS row  */
#line 1966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 18794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* a_expr: a_expr IS TRUE_P  */
#line 1982 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 18806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* a_expr: a_expr IS NOT TRUE_P  */
#line 1990 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 18818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* a_expr: a_expr IS FALSE_P  */
#line 1998 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 18830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2006 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 18842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* a_expr: a_expr IS UNKNOWN  */
#line 2014 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 18854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 18866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 18874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2034 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 18882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2042 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 18898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2046 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 18910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 18922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2062 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 18934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 18946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* a_expr: a_expr IN_P in_expr  */
#line 2078 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 18970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2098 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 18996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2120 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 19011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2131 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 19022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* a_expr: ARRAY select_with_parens  */
#line 2138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* a_expr: DEFAULT  */
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* a_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 19065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* b_expr: c_expr  */
#line 2179 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* b_expr: b_expr TYPECAST Typename  */
#line 2181 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 19077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* b_expr: '+' b_expr  */
#line 2183 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* b_expr: '-' b_expr  */
#line 2185 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 19089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* b_expr: b_expr '+' b_expr  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* b_expr: b_expr '-' b_expr  */
#line 2189 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* b_expr: b_expr '*' b_expr  */
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* b_expr: b_expr '/' b_expr  */
#line 2193 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* b_expr: b_expr '%' b_expr  */
#line 2195 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* b_expr: b_expr '^' b_expr  */
#line 2197 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* b_expr: b_expr POWER_OF b_expr  */
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* b_expr: b_expr '<' b_expr  */
#line 2201 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* b_expr: b_expr '>' b_expr  */
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* b_expr: b_expr '=' b_expr  */
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2207 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2209 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* b_expr: b_expr qual_Op b_expr  */
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* b_expr: qual_Op b_expr  */
#line 2215 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* b_expr: b_expr qual_Op  */
#line 2217 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 19185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 19193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 19201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2227 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 19217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* c_expr: columnref  */
#line 2244 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* c_expr: AexprConst  */
#line 2245 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* c_expr: '#' ICONST  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 19240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* c_expr: '?' opt_indirection  */
#line 2254 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 19256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* c_expr: PARAM opt_indirection  */
#line 2266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 19275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* c_expr: '(' a_expr ')' opt_indirection  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 19291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* c_expr: case_expr  */
#line 2293 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* c_expr: func_expr opt_indirection  */
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else {
						(yyval.node) = (yyvsp[-1].node);
					}
				}
#line 19313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* c_expr: select_with_parens  */
#line 2307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* c_expr: select_with_parens indirection  */
#line 2318 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 19356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* c_expr: EXISTS select_with_parens  */
#line 2342 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 19371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* c_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2353 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 19382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* func_application: func_name '(' ')'  */
#line 2362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 19390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2366 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 19401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 19413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 19425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 19440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2400 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* func_application: func_name '(' '*' ')'  */
#line 2408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 19512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* func_expr: func_expr_common_subexpr  */
#line 2472 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* func_expr_windowless: func_application  */
#line 2482 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2483 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 19540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* func_expr_common_subexpr: CURRENT_DATE  */
#line 2497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 19548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* func_expr_common_subexpr: CURRENT_TIME  */
#line 2501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 19556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* func_expr_common_subexpr: CURRENT_TIME '(' Iconst ')'  */
#line 2505 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* func_expr_common_subexpr: CURRENT_TIMESTAMP  */
#line 2509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 19572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* func_expr_common_subexpr: CURRENT_TIMESTAMP '(' Iconst ')'  */
#line 2513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* func_expr_common_subexpr: LOCALTIME  */
#line 2517 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 19588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* func_expr_common_subexpr: LOCALTIME '(' Iconst ')'  */
#line 2521 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* func_expr_common_subexpr: LOCALTIMESTAMP  */
#line 2525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 19604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* func_expr_common_subexpr: LOCALTIMESTAMP '(' Iconst ')'  */
#line 2529 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* func_expr_common_subexpr: CURRENT_ROLE  */
#line 2533 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 19620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* func_expr_common_subexpr: CURRENT_USER  */
#line 2537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 19628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* func_expr_common_subexpr: SESSION_USER  */
#line 2541 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 19636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* func_expr_common_subexpr: USER  */
#line 2545 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 19644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* func_expr_common_subexpr: CURRENT_CATALOG  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 19652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* func_expr_common_subexpr: CURRENT_SCHEMA  */
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 19660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 19666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 19672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2574 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 19732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 19775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 19786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 2637 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* within_group_clause: %empty  */
#line 2638 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 2642 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 19804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* filter_clause: FILTER '(' a_expr ')'  */
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 19810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* filter_clause: %empty  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* export_clause: EXPORT_STATE  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 19822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* export_clause: %empty  */
#line 2649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* window_clause: WINDOW window_definition_list  */
#line 2656 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* window_clause: %empty  */
#line 2657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* window_definition_list: window_definition  */
#line 2661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 19846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* window_definition_list: window_definition_list ',' window_definition  */
#line 2663 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 19852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* window_definition: ColId AS window_specification  */
#line 2668 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 19862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* over_clause: OVER window_specification  */
#line 2676 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 19868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* over_clause: OVER ColId  */
#line 2678 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 19885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* over_clause: %empty  */
#line 2691 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 19891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 2696 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 19909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* opt_existing_window_name: ColId  */
#line 2721 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* opt_existing_window_name: %empty  */
#line 2722 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 19921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* opt_partition_clause: PARTITION BY expr_list  */
#line 2725 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* opt_partition_clause: %empty  */
#line 2726 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* opt_frame_clause: RANGE frame_extent  */
#line 2738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 19943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* opt_frame_clause: ROWS frame_extent  */
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 19953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* opt_frame_clause: %empty  */
#line 2750 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* frame_extent: frame_bound  */
#line 2760 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 19986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 20027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* frame_bound: UNBOUNDED PRECEDING  */
#line 2822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 2830 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* frame_bound: CURRENT_P ROW  */
#line 2838 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* frame_bound: a_expr PRECEDING  */
#line 2846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* frame_bound: a_expr FOLLOWING  */
#line 2854 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 20087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 2874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* qualified_row: ROW '(' ')'  */
#line 2875 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 20099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* row: qualified_row  */
#line 2878 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 20105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* row: '(' expr_list ',' a_expr ')'  */
#line 2879 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 20111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* dict_arg: ColIdOrString ':' a_expr  */
#line 2883 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 20124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* dict_arguments: dict_arg  */
#line 2893 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 2894 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* dict_arguments_opt_comma: dict_arguments  */
#line 2898 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 2899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* sub_type: ANY  */
#line 2903 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 20154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* sub_type: SOME  */
#line 2904 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 20160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* sub_type: ALL  */
#line 2905 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 20166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* all_Op: Op  */
#line 2908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* all_Op: MathOp  */
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 20178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* MathOp: '+'  */
#line 2912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 20184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* MathOp: '-'  */
#line 2913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 20190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* MathOp: '*'  */
#line 2914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 20196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* MathOp: '/'  */
#line 2915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 20202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* MathOp: '%'  */
#line 2916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 20208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* MathOp: '^'  */
#line 2917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 20214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* MathOp: POWER_OF  */
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 20220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* MathOp: '<'  */
#line 2919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 20226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* MathOp: '>'  */
#line 2920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 20232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* MathOp: '='  */
#line 2921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 20238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* MathOp: LESS_EQUALS  */
#line 2922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 20244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* MathOp: GREATER_EQUALS  */
#line 2923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 20250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* MathOp: NOT_EQUALS  */
#line 2924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 20256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* qual_Op: Op  */
#line 2928 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* qual_all_Op: all_Op  */
#line 2935 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 2937 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* subquery_Op: all_Op  */
#line 2942 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* subquery_Op: LIKE  */
#line 2946 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 20298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* subquery_Op: NOT_LA LIKE  */
#line 2948 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 20304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* subquery_Op: GLOB  */
#line 2950 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 20310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* subquery_Op: NOT_LA GLOB  */
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 20316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* subquery_Op: ILIKE  */
#line 2954 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 20322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* subquery_Op: NOT_LA ILIKE  */
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 20328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* any_operator: all_Op  */
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* any_operator: ColId '.' any_operator  */
#line 2972 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 20340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* expr_list: a_expr  */
#line 2976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* expr_list: expr_list ',' a_expr  */
#line 2980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* expr_list_opt_comma: expr_list  */
#line 2987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* expr_list_opt_comma: expr_list ','  */
#line 2992 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 20372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 2999 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* opt_expr_list_opt_comma: %empty  */
#line 3003 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 20388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* func_arg_list: func_arg_expr  */
#line 3012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* func_arg_expr: a_expr  */
#line 3022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* type_list: Typename  */
#line 3045 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 20444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* type_list: type_list ',' Typename  */
#line 3046 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 20450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* extract_list: extract_arg FROM a_expr  */
#line 3051 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 20458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* extract_list: %empty  */
#line 3054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* extract_arg: IDENT  */
#line 3061 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* extract_arg: year_keyword  */
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 20476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* extract_arg: month_keyword  */
#line 3063 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 20482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* extract_arg: day_keyword  */
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 20488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* extract_arg: hour_keyword  */
#line 3065 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 20494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* extract_arg: minute_keyword  */
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 20500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* extract_arg: second_keyword  */
#line 3067 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 20506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* extract_arg: millisecond_keyword  */
#line 3068 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 20512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* extract_arg: microsecond_keyword  */
#line 3069 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 20518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* extract_arg: Sconst  */
#line 3070 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3081 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3085 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* overlay_placing: PLACING a_expr  */
#line 3092 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* position_list: b_expr IN_P b_expr  */
#line 3098 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 20552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* position_list: %empty  */
#line 3099 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* substr_list: a_expr substr_from substr_for  */
#line 3116 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* substr_list: a_expr substr_for substr_from  */
#line 3120 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 20575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* substr_list: a_expr substr_from  */
#line 3125 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* substr_list: a_expr substr_for  */
#line 3129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 20602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* substr_list: expr_list  */
#line 3144 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* substr_list: %empty  */
#line 3148 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 20616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* substr_from: FROM a_expr  */
#line 3152 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* substr_for: FOR a_expr  */
#line 3155 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3158 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 20634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* trim_list: FROM expr_list_opt_comma  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* trim_list: expr_list_opt_comma  */
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* in_expr: select_with_parens  */
#line 3164 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 20657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3170 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 20663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3181 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 20677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* when_clause_list: when_clause  */
#line 3194 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* when_clause_list: when_clause_list when_clause  */
#line 3195 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3200 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 20701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* case_default: ELSE a_expr  */
#line 3210 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* case_default: %empty  */
#line 3211 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* case_arg: a_expr  */
#line 3214 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* case_arg: %empty  */
#line 3215 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* columnref: ColId  */
#line 3219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 20733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* columnref: ColId indirection  */
#line 3223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 20741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* indirection_el: '.' attr_name  */
#line 3230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 20749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* indirection_el: '[' a_expr ']'  */
#line 3234 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 20761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3242 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 20773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* opt_slice_bound: a_expr  */
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* opt_slice_bound: %empty  */
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* indirection: indirection_el  */
#line 3257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* indirection: indirection indirection_el  */
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* opt_indirection: %empty  */
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* opt_indirection: opt_indirection indirection_el  */
#line 3263 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3277 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* opt_target_list_opt_comma: %empty  */
#line 3278 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 20821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* target_list: target_el  */
#line 3282 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* target_list: target_list ',' target_el  */
#line 3283 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 20833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* target_list_opt_comma: target_list  */
#line 3287 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* target_list_opt_comma: target_list ','  */
#line 3288 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* target_el: a_expr AS ColLabelOrString  */
#line 3292 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 20857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* target_el: a_expr IDENT  */
#line 3308 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* target_el: a_expr  */
#line 3316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 20881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* target_el: '*' opt_except_list opt_replace_list  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-2]);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-2]);
				}
#line 20900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* target_el: ColId '.' '*' opt_except_list opt_replace_list  */
#line 3339 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-4]);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-4]);
				}
#line 20920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3356 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* except_list: EXCLUDE ColId  */
#line 3357 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* opt_except_list: except_list  */
#line 3360 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* opt_except_list: %empty  */
#line 3361 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 20944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* replace_list_el: a_expr AS ColId  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 20950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* replace_list: replace_list_el  */
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* replace_list: replace_list ',' replace_list_el  */
#line 3369 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 20962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* replace_list_opt_comma: replace_list  */
#line 3373 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* replace_list_opt_comma: replace_list ','  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3377 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* opt_replace_list: REPLACE replace_list_el  */
#line 3378 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* opt_replace_list: %empty  */
#line 3379 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 20992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* qualified_name_list: qualified_name  */
#line 3389 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 20998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 21004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* qualified_name: ColIdOrString  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 21012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* qualified_name: ColId indirection  */
#line 3406 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 21041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* name_list: name  */
#line 3433 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* name_list: name_list ',' name  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* name_list_opt_comma: name_list  */
#line 3440 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* name_list_opt_comma: name_list ','  */
#line 3441 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* name: ColIdOrString  */
#line 3444 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* attr_name: ColLabel  */
#line 3446 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* func_name: function_name_token  */
#line 3457 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* func_name: ColId indirection  */
#line 3460 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 21092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* AexprConst: Iconst  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 21100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* AexprConst: FCONST  */
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* AexprConst: Sconst opt_indirection  */
#line 3479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 21124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* AexprConst: BCONST  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* AexprConst: XCONST  */
#line 3495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* AexprConst: func_name Sconst  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* AexprConst: ConstTypename Sconst  */
#line 3549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 21206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 3553 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 21214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 3557 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 21222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 3561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 21230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* AexprConst: TRUE_P  */
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 21238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* AexprConst: FALSE_P  */
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 21246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* AexprConst: NULL_P  */
#line 3573 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 21254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* Iconst: ICONST  */
#line 3578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 21260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* Sconst: SCONST  */
#line 3579 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* ColId: IDENT  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* ColId: unreserved_keyword  */
#line 3596 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* ColId: col_name_keyword  */
#line 3597 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* ColIdOrString: ColId  */
#line 3600 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* ColIdOrString: SCONST  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* type_function_name: IDENT  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* type_function_name: unreserved_keyword  */
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* type_function_name: type_func_name_keyword  */
#line 3609 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* function_name_token: IDENT  */
#line 3612 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* function_name_token: unreserved_keyword  */
#line 3613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* function_name_token: func_name_keyword  */
#line 3614 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* type_name_token: IDENT  */
#line 3617 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* type_name_token: unreserved_keyword  */
#line 3618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* type_name_token: type_name_keyword  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* any_name: ColId  */
#line 3622 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* any_name: ColId attrs  */
#line 3623 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 21362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* attrs: '.' attr_name  */
#line 3627 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* attrs: attrs '.' attr_name  */
#line 3629 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 3633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* opt_name_list: %empty  */
#line 3634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* ColLabel: IDENT  */
#line 3645 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* ColLabel: other_keyword  */
#line 3646 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* ColLabel: unreserved_keyword  */
#line 3647 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* ColLabel: reserved_keyword  */
#line 3648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* ColLabelOrString: ColLabel  */
#line 3651 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* ColLabelOrString: SCONST  */
#line 3652 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 21514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 21520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 21526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 21540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 21564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* VariableShowStmt: SUMMARIZE var_name  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 21575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* VariableShowStmt: show_or_describe var_name  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* VariableShowStmt: show_or_describe ALL  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* var_name: ColId  */
#line 63 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* var_name: var_name '.' ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 21642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 21684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 21963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 21991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 21997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 22003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 22009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 22015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 22021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 22027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 22051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 22057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 22063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 22069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 22075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 22115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 22237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 22243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 22341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 22353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 22359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 22365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 22371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 22383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 22389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 22412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 22418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 22424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 22430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 22436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 22442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 22448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 22454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 22528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 22534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 22540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 22552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 22558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 22564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 22576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 22582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 22588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 22594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 22600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 22606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 22629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 22659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 22741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 22749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 22804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 22812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 22996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 23008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 23016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 23024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 23035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 23070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 23081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 23087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 23093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 23099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 23105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 23116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* execute_param_clause: '(' expr_list_opt_comma ')'  */
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* execute_param_clause: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 23168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* CreateSchemaStmt: CREATE_P SCHEMA ColId OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS ColId OptSchemaEltList  */
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 23209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* OptSchemaEltList: %empty  */
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 23215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 23226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 23240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 23251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 23262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 23268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 23274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 23286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 23292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 23344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 23350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 23356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 23362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 23368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 23394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 23512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* drop_type_any_name: SEQUENCE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 23518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* drop_type_any_name: FUNCTION  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* drop_type_any_name: MACRO  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* drop_type_any_name: MACRO TABLE  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 23536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* drop_type_any_name: VIEW  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 23542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 23548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* drop_type_any_name: INDEX  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 23554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* drop_type_any_name: FOREIGN TABLE  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 23560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* drop_type_any_name: COLLATION  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 23566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* drop_type_any_name: CONVERSION_P  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 23572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* drop_type_any_name: STATISTICS  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 23578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 23584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 23590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 23596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 23602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* drop_type_name: ACCESS METHOD  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 23608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* drop_type_name: EVENT TRIGGER  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 23614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* drop_type_name: EXTENSION  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 23620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 23626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* drop_type_name: PUBLICATION  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 23632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* drop_type_name: SCHEMA  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 23638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* drop_type_name: SERVER  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 23644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* any_name_list: any_name  */
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* any_name_list: any_name_list ',' any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* opt_drop_behavior: CASCADE  */
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 23662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* opt_drop_behavior: RESTRICT  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 23668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* opt_drop_behavior: %empty  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 23674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* drop_type_name_on_any_name: POLICY  */
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 23680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* drop_type_name_on_any_name: RULE  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 23686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* drop_type_name_on_any_name: TRIGGER  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 23692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* type_name_list: Typename  */
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 23698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* type_name_list: type_name_list ',' Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 23704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* CreateTypeStmt: CREATE_P TYPE_P any_name AS Typename  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].list);
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 23722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 23850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 23858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 23881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 23889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 23999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 24035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 24055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 24135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 24223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 24233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 24266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 24278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 24286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 24295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 24304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 24312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 24336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 24342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 24348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 24369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 24379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 24418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 24424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 24430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 24619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 24625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 24649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 24701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 24713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 24727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 24733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 24739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 24745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 24751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 24765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 24771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 24777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 24783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 24789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 24795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 24801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 24873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 24879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 24885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 24897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 24915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 24921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 24935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 21 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 24959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* relation_expr_opt_alias: relation_expr  */
#line 22 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 24967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* relation_expr_opt_alias: relation_expr ColId  */
#line 26 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 24978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 33 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 24989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* where_or_current_clause: WHERE a_expr  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* where_or_current_clause: %empty  */
#line 44 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 25001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* using_clause: USING from_list_opt_comma  */
#line 50 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* using_clause: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 25013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 25029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 25045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 25066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 54 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 25087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* opt_check_option: WITH CHECK_P OPTION  */
#line 74 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 25093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 75 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 25099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 76 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 25105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* opt_check_option: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 25111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 25121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 25131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 25141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 25151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 25157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 25168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 25183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 25195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 25207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 25219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 25230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 25241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 25247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 25253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 25261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 25269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 25288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 25299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 25305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 25311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 25317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* CheckPointStmt: FORCE CHECKPOINT  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* CheckPointStmt: CHECKPOINT  */
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 25360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* LoadStmt: INSTALL file_name  */
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 25371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* LoadStmt: FORCE INSTALL file_name  */
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 25382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* file_name: Sconst  */
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* file_name: ColId  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 25394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* OptSeqOptList: SeqOptList  */
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* OptSeqOptList: %empty  */
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 25434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				n->relpersistence=(yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
				
			}
#line 25449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				n->relpersistence=(yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				(yyval.node) = (PGNode *)n;
                         }
#line 25463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* param_list: '(' ')'  */
#line 42 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 25471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* param_list: '(' func_arg_list ')'  */
#line 46 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 25479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 25572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* InsertStmt: opt_with_clause INSERT INTO insert_target insert_rest opt_on_conflict returning_clause  */
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 25584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* insert_rest: SelectStmt  */
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 28 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 35 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 41 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* insert_rest: DEFAULT VALUES  */
#line 48 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 25636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* insert_target: qualified_name  */
#line 58 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 25644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* insert_target: qualified_name AS ColId  */
#line 62 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 25653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 25665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* opt_conf_expr: ON CONSTRAINT name  */
#line 80 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 25677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* opt_conf_expr: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 25685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* opt_with_clause: with_clause  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 25691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* opt_with_clause: %empty  */
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 25697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* insert_column_item: ColId opt_indirection  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* set_clause: set_target '=' a_expr  */
#line 114 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 25718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 119 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 25743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 144 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 25756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 154 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 25769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* opt_on_conflict: %empty  */
#line 163 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 25777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 170 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 192 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* returning_clause: RETURNING target_list  */
#line 206 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* returning_clause: %empty  */
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 25834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* override_kind: USER  */
#line 213 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 25840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* override_kind: SYSTEM_P  */
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 25846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* set_target_list: set_target  */
#line 219 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* set_target_list: set_target_list ',' set_target  */
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 25858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* opt_collate: COLLATE any_name  */
#line 226 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* opt_collate: %empty  */
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 25870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* opt_class: any_name  */
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* opt_class: %empty  */
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 25882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* insert_column_list: insert_column_item  */
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 240 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 25894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* set_clause_list: set_clause  */
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* set_clause_list: set_clause_list ',' set_clause  */
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 25906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* set_clause_list_opt_comma: set_clause_list  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* index_params: index_elem  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 25924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* index_params: index_params ',' index_elem  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 25930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* set_target: ColId opt_indirection  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 25956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 25970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 25974 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 41 "third_party/libpg_query/grammar/statements/analyze.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
